#
# WARNING: This file is auto-generated. Do not edit this file directly.
#
{
  "openapi": "3.0.2",
  "info":
    {
      "title": "Humanloop API",
      "description": "The Humanloop API allows you to interact with Humanloop from your product or service.\n\nYou can do this through HTTP requests from any language or via our official Python or TypeScript SDK.\n\nTo install the official [Python SDK](https://pypi.org/project/humanloop/), run the following command:\n\n```bash\npip install humanloop\n```\n\nTo install the official [TypeScript SDK](https://www.npmjs.com/package/humanloop), run the following command:\n\n```bash\nnpm i humanloop\n```\n\n---\n\nGuides and further details about key concepts can be found in [our docs](https://docs.humanloop.com/).",
      "version": "5.0.0",
    },
  "servers":
    [
      {
        "url": "https://api.humanloop.com/v5",
        "description": "Production server",
      },
    ],
  "paths":
    {
      "/prompts":
        {
          "post":
            {
              "tags": ["Prompts"],
              "summary": "Create A Prompt",
              "description": "Create a Prompt in an existing Directory. If no Directory is specified, the\nPrompt will be created in the Organization's root directory.",
              "operationId": "Prompts_create",
              "requestBody":
                {
                  "content":
                    {
                      "application/json":
                        {
                          "schema":
                            {
                              "$ref": "#/components/schemas/CreatePromptRequest",
                            },
                        },
                    },
                  "required": true,
                },
              "responses":
                {
                  "201":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/PromptResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
        },
      "/prompts/{id}":
        {
          "get":
            {
              "tags": ["Prompts"],
              "summary": "Retrieve A Prompt",
              "description": "Retrieve the Prompt with the given ID.",
              "operationId": "Prompts_get",
              "parameters":
                [
                  {
                    "description": "Unique identifier for Prompt. Starts with `pr_`.",
                    "required": true,
                    "schema":
                      {
                        "type": "string",
                        "title": "Prompt ID",
                        "description": "Unique identifier for Prompt. Starts with `pr_`.",
                      },
                    "name": "id",
                    "in": "path",
                  },
                ],
              "responses":
                {
                  "200":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/PromptResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
          "delete":
            {
              "tags": ["Prompts"],
              "summary": "Delete A Prompt",
              "description": "Delete the Prompt with the given ID.",
              "operationId": "Prompts_delete",
              "parameters":
                [
                  {
                    "description": "Unique identifier for Prompt. Starts with `pr_`.",
                    "required": true,
                    "schema":
                      {
                        "type": "string",
                        "title": "Prompt ID",
                        "description": "Unique identifier for Prompt. Starts with `pr_`.",
                      },
                    "name": "id",
                    "in": "path",
                  },
                ],
              "responses":
                {
                  "204": { "description": "Successful Response" },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
          "patch":
            {
              "tags": ["Prompts"],
              "summary": "Update A Prompt",
              "description": "Update the Prompt with the given ID.",
              "operationId": "Prompts_update",
              "parameters":
                [
                  {
                    "description": "Unique identifier for Prompt. Starts with `pr_`.",
                    "required": true,
                    "schema":
                      {
                        "type": "string",
                        "title": "Prompt ID",
                        "description": "Unique identifier for Prompt. Starts with `pr_`.",
                      },
                    "name": "id",
                    "in": "path",
                  },
                ],
              "requestBody":
                {
                  "content":
                    {
                      "application/json":
                        {
                          "schema":
                            {
                              "$ref": "#/components/schemas/UpdatePromptRequest",
                            },
                        },
                    },
                  "required": true,
                },
              "responses":
                {
                  "200":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/PromptResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
        },
      "/prompts/{id}/versions":
        {
          "get":
            {
              "tags": ["Prompts"],
              "summary": "List Prompt Versions",
              "description": "Get a list of the Prompt Versions for a Prompt.",
              "operationId": "Prompts_list",
              "parameters":
                [
                  {
                    "description": "Unique identifier for Prompt. Starts with `pr_`.",
                    "required": true,
                    "schema":
                      {
                        "type": "string",
                        "title": "Tool ID",
                        "description": "Unique identifier for Prompt. Starts with `pr_`.",
                      },
                    "name": "id",
                    "in": "path",
                  },
                  {
                    "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned.",
                    "required": false,
                    "schema":
                      {
                        "allOf":
                          [{ "$ref": "#/components/schemas/VersionStatus" }],
                        "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned.",
                      },
                    "name": "status",
                    "in": "query",
                  },
                  {
                    "required": false,
                    "schema":
                      { "type": "boolean", "title": "Evaluation Aggregates" },
                    "name": "evaluation_aggregates",
                    "in": "query",
                  },
                ],
              "responses":
                {
                  "200":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/ListPromptVersionsResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
        },
      "/prompts/{id}/deployments":
        {
          "post":
            {
              "tags": ["Prompts"],
              "summary": "Deploy To Environment",
              "description": "Deploy Prompt Version to Environment.\n\nSet the deployed Version for the specified Environment. This Prompt Version\nwill be used for calls made to the Prompt in this Environment.",
              "operationId": "deploy_to_environment_prompts__id__deployments_post",
              "parameters":
                [
                  {
                    "description": "Unique identifier for Prompt. Starts with `pr_`.",
                    "required": true,
                    "schema":
                      {
                        "type": "string",
                        "title": "Prompt ID",
                        "description": "Unique identifier for Prompt. Starts with `pr_`.",
                      },
                    "name": "id",
                    "in": "path",
                  },
                ],
              "requestBody":
                {
                  "content":
                    {
                      "application/json":
                        {
                          "schema":
                            {
                              "$ref": "#/components/schemas/UpdateDeploymentRequest",
                            },
                        },
                    },
                  "required": true,
                },
              "responses":
                {
                  "200":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/PromptResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
        },
      "/prompts/versions":
        {
          "post":
            {
              "tags": ["Prompts"],
              "summary": "Commit Prompt Version",
              "description": "Commit a new Prompt Version for the Prompt with the given ID.",
              "operationId": "PromptVersions_commit",
              "requestBody":
                {
                  "content":
                    {
                      "application/json":
                        {
                          "schema":
                            {
                              "oneOf":
                                [
                                  {
                                    "$ref": "#/components/schemas/CreateChatPromptVersionRequest",
                                  },
                                  {
                                    "$ref": "#/components/schemas/CreateCompletionPromptVersionRequest",
                                  },
                                ],
                              "title": "Request",
                              "discriminator":
                                {
                                  "propertyName": "endpoint",
                                  "mapping":
                                    {
                                      "chat": "#/components/schemas/CreateChatPromptVersionRequest",
                                      "complete": "#/components/schemas/CreateCompletionPromptVersionRequest",
                                    },
                                },
                            },
                        },
                    },
                  "required": true,
                },
              "responses":
                {
                  "201":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/PromptVersionResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
        },
      "/prompts/versions/{id}":
        {
          "get":
            {
              "tags": ["Prompts"],
              "summary": "Retrieve Prompt Version",
              "description": "Retrieve the Prompt Version with the given ID.",
              "operationId": "PromptVersions_get",
              "parameters":
                [
                  {
                    "description": "Unique identifier for Prompt. Starts with `pr_`.",
                    "required": true,
                    "schema":
                      {
                        "type": "string",
                        "title": "Prompt ID",
                        "description": "Unique identifier for Prompt. Starts with `pr_`.",
                      },
                    "name": "id",
                    "in": "path",
                  },
                ],
              "responses":
                {
                  "200":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/PromptVersionResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
        },
      "/tools/templates":
        {
          "get":
            {
              "tags": ["Tools"],
              "summary": "List Tool Templates",
              "operationId": "list_tool_templates_tools_templates_get",
              "parameters":
                [
                  {
                    "description": "Type of tool to return the template",
                    "required": false,
                    "schema":
                      {
                        "allOf":
                          [
                            {
                              "$ref": "#/components/schemas/src__domain__files__tool__ToolType",
                            },
                          ],
                        "title": "Specific tool type template",
                        "description": "Type of tool to return the template",
                      },
                    "name": "tool_type",
                    "in": "query",
                  },
                ],
              "responses":
                {
                  "200":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "items":
                                    {
                                      "$ref": "#/components/schemas/ToolTemplateResponse",
                                    },
                                  "type": "array",
                                  "title": "Response List Tool Templates Tools Templates Get",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
        },
      "/tools":
        {
          "post":
            {
              "tags": ["Tools"],
              "summary": "Create A Tool",
              "description": "Create a Tool in an existing Directory. If no Directory is specified, the\nTool will be created in the Organization's root directory.",
              "operationId": "Tools_create",
              "requestBody":
                {
                  "content":
                    {
                      "application/json":
                        {
                          "schema":
                            {
                              "$ref": "#/components/schemas/CreateToolRequest",
                            },
                        },
                    },
                  "required": true,
                },
              "responses":
                {
                  "201":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                { "$ref": "#/components/schemas/ToolResponse" },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
        },
      "/tools/{id}":
        {
          "get":
            {
              "tags": ["Tools"],
              "summary": "Retrieve A Tool",
              "description": "Retrieve the Tool with the given ID.",
              "operationId": "Tools_get",
              "parameters":
                [
                  {
                    "description": "Unique identifier for Tool. Starts with `tl_`.",
                    "required": true,
                    "schema":
                      {
                        "type": "string",
                        "title": "Tool ID",
                        "description": "Unique identifier for Tool. Starts with `tl_`.",
                      },
                    "name": "id",
                    "in": "path",
                  },
                ],
              "responses":
                {
                  "200":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                { "$ref": "#/components/schemas/ToolResponse" },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
          "delete":
            {
              "tags": ["Tools"],
              "summary": "Delete A Tool",
              "description": "Delete the Tool with the given ID.",
              "operationId": "Tools_delete",
              "parameters":
                [
                  {
                    "description": "Unique identifier for Tool. Starts with `tl_`.",
                    "required": true,
                    "schema":
                      {
                        "type": "string",
                        "title": "Tool ID",
                        "description": "Unique identifier for Tool. Starts with `tl_`.",
                      },
                    "name": "id",
                    "in": "path",
                  },
                ],
              "responses":
                {
                  "204": { "description": "Successful Response" },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
          "patch":
            {
              "tags": ["Tools"],
              "summary": "Update A Tool",
              "description": "Update the Tool with the given ID.",
              "operationId": "Tools_update",
              "parameters":
                [
                  {
                    "description": "Unique identifier for Tool. Starts with `tl_`.",
                    "required": true,
                    "schema":
                      {
                        "type": "string",
                        "title": "Tool ID",
                        "description": "Unique identifier for Tool. Starts with `tl_`.",
                      },
                    "name": "id",
                    "in": "path",
                  },
                ],
              "requestBody":
                {
                  "content":
                    {
                      "application/json":
                        {
                          "schema":
                            {
                              "$ref": "#/components/schemas/UpdateToolRequest",
                            },
                        },
                    },
                  "required": true,
                },
              "responses":
                {
                  "200":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                { "$ref": "#/components/schemas/ToolResponse" },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
        },
      "/tools/{id}/versions":
        {
          "get":
            {
              "tags": ["Tools"],
              "summary": "List Tool Versions",
              "description": "Get a list of the Tool Versions for a Tool.",
              "operationId": "Tools_list",
              "parameters":
                [
                  {
                    "description": "Unique identifier for Tool. Starts with `tl_`.",
                    "required": true,
                    "schema":
                      {
                        "type": "string",
                        "title": "Tool ID",
                        "description": "Unique identifier for Tool. Starts with `tl_`.",
                      },
                    "name": "id",
                    "in": "path",
                  },
                  {
                    "description": "Filter versions by status: 'uncommitted', 'committed''",
                    "required": false,
                    "schema":
                      {
                        "allOf":
                          [{ "$ref": "#/components/schemas/VersionStatus" }],
                        "description": "Filter versions by status: 'uncommitted', 'committed''",
                        "default": "committed",
                      },
                    "name": "status",
                    "in": "query",
                  },
                  {
                    "required": false,
                    "schema":
                      { "type": "boolean", "title": "Evaluation Aggregates" },
                    "name": "evaluation_aggregates",
                    "in": "query",
                  },
                ],
              "responses":
                {
                  "200":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/ListToolVersionsResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
        },
      "/tools/versions":
        {
          "post":
            {
              "tags": ["Tools"],
              "summary": "Commit A Tool Version",
              "description": "Commit a new Tool Version for the Tool with the given ID.",
              "operationId": "ToolVersions_commit",
              "requestBody":
                {
                  "content":
                    {
                      "application/json":
                        {
                          "schema":
                            {
                              "$ref": "#/components/schemas/CreateToolVersionRequest",
                            },
                        },
                    },
                  "required": true,
                },
              "responses":
                {
                  "201":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/ToolVersionResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
        },
      "/tools/versions/{id}":
        {
          "get":
            {
              "tags": ["Tools"],
              "summary": "Retrieve A Tool Version",
              "description": "Retrieve the Tool Version with the given ID.",
              "operationId": "ToolVersions_get",
              "parameters":
                [
                  {
                    "description": "Unique identifier for Tool. Starts with `tl_`.",
                    "required": true,
                    "schema":
                      {
                        "type": "string",
                        "title": "Tool ID",
                        "description": "Unique identifier for Tool. Starts with `tl_`.",
                      },
                    "name": "id",
                    "in": "path",
                  },
                ],
              "responses":
                {
                  "200":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/ToolVersionResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
        },
      "/datasets":
        {
          "post":
            {
              "tags": ["Datasets"],
              "summary": "Create A Dataset",
              "description": "Create a Dataset in an existing Directory.\n\nIf no Directory is specified, the Dataset will be created in the Organization's root directory.",
              "operationId": "Datasets_create",
              "requestBody":
                {
                  "content":
                    {
                      "application/json":
                        {
                          "schema":
                            {
                              "$ref": "#/components/schemas/CreateDatasetRequest",
                            },
                        },
                    },
                  "required": true,
                },
              "responses":
                {
                  "201":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/DatasetResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
        },
      "/datasets/{id}":
        {
          "get":
            {
              "tags": ["Datasets"],
              "summary": "Retrieve A Dataset",
              "description": "Retrieve the Dataset with the given ID.",
              "operationId": "Datasets_get",
              "parameters":
                [
                  {
                    "description": "Unique identifier for Dataset. Starts with `ds_`.",
                    "required": true,
                    "schema":
                      {
                        "type": "string",
                        "title": "Dataset ID",
                        "description": "Unique identifier for Dataset. Starts with `ds_`.",
                      },
                    "name": "id",
                    "in": "path",
                  },
                ],
              "responses":
                {
                  "200":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/DatasetResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
          "delete":
            {
              "tags": ["Datasets"],
              "summary": "Delete Dataset",
              "description": "Delete the Dataset with the given ID.",
              "operationId": "Datasets_delete",
              "parameters":
                [
                  {
                    "description": "Unique identifier for Dataset. Starts with `ds_`.",
                    "required": true,
                    "schema":
                      {
                        "type": "string",
                        "title": "Dataset ID",
                        "description": "Unique identifier for Dataset. Starts with `ds_`.",
                      },
                    "name": "id",
                    "in": "path",
                  },
                ],
              "responses":
                {
                  "204": { "description": "Successful Response" },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
          "patch":
            {
              "tags": ["Datasets"],
              "summary": "Update A Dataset",
              "description": "Update the Prompt with the given ID.",
              "operationId": "Datasets_update",
              "parameters":
                [
                  {
                    "description": "Unique identifier for Dataset. Starts with `ds_`.",
                    "required": true,
                    "schema":
                      {
                        "type": "string",
                        "title": "Dataset ID",
                        "description": "Unique identifier for Dataset. Starts with `ds_`.",
                      },
                    "name": "id",
                    "in": "path",
                  },
                ],
              "requestBody":
                {
                  "content":
                    {
                      "application/json":
                        {
                          "schema":
                            {
                              "$ref": "#/components/schemas/UpdateDatasetRequest",
                            },
                        },
                    },
                  "required": true,
                },
              "responses":
                {
                  "200":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/DatasetResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
        },
      "/datasets/{id}/versions":
        {
          "get":
            {
              "tags": ["Datasets"],
              "summary": "List Versions",
              "description": "List the Dataset Versions associated with this Dataset.",
              "operationId": "Datasets_list_versions",
              "parameters":
                [
                  {
                    "description": "Unique identifier for Dataset. Starts with `ds_`.",
                    "required": true,
                    "schema":
                      {
                        "type": "string",
                        "title": "Dataset ID",
                        "description": "Unique identifier for Dataset. Starts with `ds_`.",
                      },
                    "name": "id",
                    "in": "path",
                  },
                  {
                    "description": "Filter versions by status: 'uncommitted', 'committed''",
                    "required": false,
                    "schema":
                      {
                        "allOf":
                          [{ "$ref": "#/components/schemas/VersionStatus" }],
                        "description": "Filter versions by status: 'uncommitted', 'committed''",
                        "default": "committed",
                      },
                    "name": "status",
                    "in": "query",
                  },
                ],
              "responses":
                {
                  "200":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/ListDatasetVersionsResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
        },
      "/datasets/versions":
        {
          "post":
            {
              "tags": ["Datasets"],
              "summary": "Commit A Dataset Version",
              "description": "Commit a new Dataset Version for the Dataset with the given ID.",
              "operationId": "DatasetVersions_commit",
              "requestBody":
                {
                  "content":
                    {
                      "application/json":
                        {
                          "schema":
                            {
                              "$ref": "#/components/schemas/CreateDatasetVersionRequest",
                            },
                        },
                    },
                  "required": true,
                },
              "responses":
                {
                  "201":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/DatasetVersionResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
        },
      "/datasets/versions/{id}":
        {
          "get":
            {
              "tags": ["Datasets"],
              "summary": "Retrieve A Dataset Version",
              "description": "Retrieve the Dataset Version with the given ID.",
              "operationId": "DatasetVersions_get",
              "parameters":
                [
                  {
                    "description": "Unique identifier for Dataset Version. Starts with `dsv_`.",
                    "required": true,
                    "schema":
                      {
                        "type": "string",
                        "title": "Dataset Version ID",
                        "description": "Unique identifier for Dataset Version. Starts with `dsv_`.",
                      },
                    "name": "id",
                    "in": "path",
                  },
                ],
              "responses":
                {
                  "200":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/DatasetVersionResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
          "post":
            {
              "tags": ["Datasets"],
              "summary": "Modify A Dataset Version",
              "description": "Apply a modification to a Dataset Version and get back a new Version.\n\nIt is possible to add a list of new Datapoints and remove a list of existing\nDatapoints from the passed in Dataset Version.\n\nSince Dataset Versions are immutable, a new Dataset Version will be created\nand returned. The new version will have its own unique ID.",
              "operationId": "DatasetVersions_modify",
              "parameters":
                [
                  {
                    "description": "Unique identifier for Dataset Version. Starts with `dsv_`.",
                    "required": true,
                    "schema":
                      {
                        "type": "string",
                        "title": "Dataset Version ID",
                        "description": "Unique identifier for Dataset Version. Starts with `dsv_`.",
                      },
                    "name": "id",
                    "in": "path",
                  },
                ],
              "requestBody":
                {
                  "content":
                    {
                      "application/json":
                        {
                          "schema":
                            {
                              "$ref": "#/components/schemas/ModifyDatasetVersionRequest",
                            },
                        },
                    },
                  "required": true,
                },
              "responses":
                {
                  "201":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/DatasetVersionResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
        },
      "/evaluators":
        {
          "post":
            {
              "tags": ["Evaluators"],
              "summary": "Create An Evaluator",
              "description": "Create a Evaluator in an existing Directory. If no Directory is specified, the\nEvaluator will be created in the Organization's root directory.",
              "operationId": "Evaluators_create",
              "requestBody":
                {
                  "content":
                    {
                      "application/json":
                        {
                          "schema":
                            {
                              "$ref": "#/components/schemas/CreateEvaluatorRequest",
                            },
                        },
                    },
                  "required": true,
                },
              "responses":
                {
                  "201":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/EvaluatorResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
        },
      "/evaluators/{id}":
        {
          "get":
            {
              "tags": ["Evaluators"],
              "summary": "Retrieve A Evaluator",
              "operationId": "Evaluators_get",
              "parameters":
                [
                  {
                    "description": "Unique identifier for Evaluator. Starts with `ev_`.",
                    "required": true,
                    "schema":
                      {
                        "type": "string",
                        "title": "Evaluator ID",
                        "description": "Unique identifier for Evaluator. Starts with `ev_`.",
                      },
                    "name": "id",
                    "in": "path",
                  },
                ],
              "responses":
                {
                  "200":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/EvaluatorResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
          "delete":
            {
              "tags": ["Evaluators"],
              "summary": "Delete A Evaluator",
              "description": "Delete the Evaluator with the given ID.",
              "operationId": "Evaluators_delete",
              "parameters":
                [
                  {
                    "description": "Unique identifier for Evaluator. Starts with `ev_`.",
                    "required": true,
                    "schema":
                      {
                        "type": "string",
                        "title": "Evaluator ID",
                        "description": "Unique identifier for Evaluator. Starts with `ev_`.",
                      },
                    "name": "id",
                    "in": "path",
                  },
                ],
              "responses":
                {
                  "204": { "description": "Successful Response" },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
          "patch":
            {
              "tags": ["Evaluators"],
              "summary": "Update A Evaluator",
              "description": "Update the Evaluator with the given ID.",
              "operationId": "Evaluators_update",
              "parameters":
                [
                  {
                    "description": "Unique identifier for Evaluator. Starts with `ev_`.",
                    "required": true,
                    "schema":
                      {
                        "type": "string",
                        "title": "Evaluator ID",
                        "description": "Unique identifier for Evaluator. Starts with `ev_`.",
                      },
                    "name": "id",
                    "in": "path",
                  },
                ],
              "requestBody":
                {
                  "content":
                    {
                      "application/json":
                        {
                          "schema":
                            {
                              "$ref": "#/components/schemas/UpdateEvaluatorRequest",
                            },
                        },
                    },
                  "required": true,
                },
              "responses":
                {
                  "200":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/EvaluatorResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
        },
      "/evaluators/{id}/versions":
        {
          "get":
            {
              "tags": ["Evaluators"],
              "summary": "List Evaluator Versions",
              "description": "Get a list of the Evaluator Versions for a Evaluator.",
              "operationId": "Evaluators_list",
              "parameters":
                [
                  {
                    "description": "Unique identifier for Evaluator. Starts with `ev_`.",
                    "required": true,
                    "schema":
                      {
                        "type": "string",
                        "title": "Evaluator ID",
                        "description": "Unique identifier for Evaluator. Starts with `ev_`.",
                      },
                    "name": "id",
                    "in": "path",
                  },
                  {
                    "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned.",
                    "required": false,
                    "schema":
                      {
                        "allOf":
                          [{ "$ref": "#/components/schemas/VersionStatus" }],
                        "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned.",
                      },
                    "name": "status",
                    "in": "query",
                  },
                  {
                    "required": false,
                    "schema":
                      { "type": "boolean", "title": "Evaluation Aggregates" },
                    "name": "evaluation_aggregates",
                    "in": "query",
                  },
                ],
              "responses":
                {
                  "200":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/ListEvaluatorVersionsResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
        },
      "/evaluators/{id}/deployments":
        {
          "post":
            {
              "tags": ["Evaluators"],
              "summary": "Deploy To Environment",
              "description": "Deploy Evaluator Version to Environment.\n\nSet the deployed Version for the specified Environment. This Evaluator Version\nwill be used for calls made to the Evaluator in this Environment.",
              "operationId": "deploy_to_environment_evaluators__id__deployments_post",
              "parameters":
                [
                  {
                    "description": "Unique identifier for Evaluator. Starts with `ev_`.",
                    "required": true,
                    "schema":
                      {
                        "type": "string",
                        "title": "Evaluator ID",
                        "description": "Unique identifier for Evaluator. Starts with `ev_`.",
                      },
                    "name": "id",
                    "in": "path",
                  },
                ],
              "requestBody":
                {
                  "content":
                    {
                      "application/json":
                        {
                          "schema":
                            {
                              "$ref": "#/components/schemas/UpdateDeploymentRequest",
                            },
                        },
                    },
                  "required": true,
                },
              "responses":
                {
                  "200":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/EvaluatorResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
        },
      "/evaluators/versions":
        {
          "post":
            {
              "tags": ["Evaluators"],
              "summary": "Commit Evaluator Version",
              "description": "Commit a new Evaluator Version for the Evaluator with the given ID.",
              "operationId": "EvaluatorVersions_commit",
              "requestBody":
                {
                  "content":
                    {
                      "application/json":
                        {
                          "schema":
                            {
                              "oneOf":
                                [
                                  {
                                    "$ref": "#/components/schemas/CreateLLMEvaluatorVersionRequest",
                                  },
                                  {
                                    "$ref": "#/components/schemas/CreatePythonEvaluatorVersionRequest",
                                  },
                                  {
                                    "$ref": "#/components/schemas/CreateHumanEvaluatorVersionRequest",
                                  },
                                  {
                                    "$ref": "#/components/schemas/CreateExternalEvaluatorVersionRequest",
                                  },
                                ],
                              "title": "Request",
                              "discriminator":
                                {
                                  "propertyName": "evaluator_type",
                                  "mapping":
                                    {
                                      "llm": "#/components/schemas/CreateLLMEvaluatorVersionRequest",
                                      "python": "#/components/schemas/CreatePythonEvaluatorVersionRequest",
                                      "human": "#/components/schemas/CreateHumanEvaluatorVersionRequest",
                                      "external": "#/components/schemas/CreateExternalEvaluatorVersionRequest",
                                    },
                                },
                            },
                        },
                    },
                  "required": true,
                },
              "responses":
                {
                  "201":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/EvaluatorVersionResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
        },
      "/evaluators/versions/{id}":
        {
          "get":
            {
              "tags": ["Evaluators"],
              "summary": "Retrieve Evaluator Version",
              "description": "Retrieve the Evaluator Version with the given ID.",
              "operationId": "EvaluatorVersions_get",
              "parameters":
                [
                  {
                    "description": "Unique identifier for Evaluator. Starts with `ev_`.",
                    "required": true,
                    "schema":
                      {
                        "type": "string",
                        "title": "Evaluator ID",
                        "description": "Unique identifier for Evaluator. Starts with `ev_`.",
                      },
                    "name": "id",
                    "in": "path",
                  },
                ],
              "responses":
                {
                  "200":
                    {
                      "description": "Successful Response",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/EvaluatorVersionResponse",
                                },
                            },
                        },
                    },
                  "422":
                    {
                      "description": "Validation Error",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "$ref": "#/components/schemas/HTTPValidationError",
                                },
                            },
                        },
                    },
                },
              "security": [{ "APIKeyHeader": [] }],
            },
        },
    },
  "components":
    {
      "schemas":
        {
          "BaseMetricResponse":
            {
              "properties":
                {
                  "id":
                    {
                      "type": "string",
                      "title": "Metric ID",
                      "description": "ID of the metric. Starts with 'metric_'.",
                    },
                  "name":
                    {
                      "type": "string",
                      "title": "Metric name",
                      "description": "The name of the metric.",
                    },
                  "description":
                    {
                      "type": "string",
                      "title": "Metric description",
                      "description": "A description of what the metric measures.",
                    },
                  "code":
                    {
                      "type": "string",
                      "title": "Metric code",
                      "description": "Python code used to calculate a metric value on each logged datapoint.",
                    },
                  "default":
                    {
                      "type": "boolean",
                      "title": "Metric default flag",
                      "description": "Whether the metric is a global default metric. Metrics with this flag enabled cannot be deleted or modified.",
                    },
                  "active":
                    {
                      "type": "boolean",
                      "title": "Metric active flag",
                      "description": "If enabled, the metric is calculated for every logged datapoint.",
                    },
                  "created_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Created At",
                    },
                  "updated_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Updated At",
                    },
                },
              "type": "object",
              "required":
                [
                  "id",
                  "name",
                  "description",
                  "code",
                  "default",
                  "active",
                  "created_at",
                  "updated_at",
                ],
              "title": "BaseMetricResponse",
            },
          "CategoricalFeedbackLabel":
            {
              "properties":
                {
                  "value": { "type": "string", "title": "Label value" },
                  "sentiment":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/LabelSentiment" }],
                      "title": "Feedback label sentiment",
                      "description": "Whether the feedback sentiment is positive or negative.",
                    },
                  "status":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/FeedbackLabelStatus",
                          },
                        ],
                      "title": "Feedback label status",
                      "description": "Whether the feedback label is active or inactive.",
                    },
                },
              "type": "object",
              "required": ["value", "sentiment", "status"],
              "title": "CategoricalFeedbackLabel",
            },
          "ChatMessage":
            {
              "properties":
                {
                  "content":
                    {
                      "anyOf":
                        [
                          { "type": "string" },
                          {
                            "items":
                              {
                                "anyOf":
                                  [
                                    {
                                      "$ref": "#/components/schemas/TextChatContent",
                                    },
                                    {
                                      "$ref": "#/components/schemas/ImageChatContent",
                                    },
                                  ],
                              },
                            "type": "array",
                          },
                        ],
                      "title": "Content",
                      "description": "The content of the message.",
                      "nullable": true,
                    },
                  "name":
                    {
                      "type": "string",
                      "title": "Name",
                      "description": "Optional name of the message author.",
                      "nullable": true,
                    },
                  "tool_call_id":
                    {
                      "type": "string",
                      "title": "Tool call id",
                      "description": "Tool call that this message is responding to.",
                      "nullable": true,
                    },
                  "role":
                    {
                      "allOf": [{ "$ref": "#/components/schemas/ChatRole" }],
                      "title": "Role",
                      "description": "Role of the message author.",
                    },
                  "tool_calls":
                    {
                      "items": { "$ref": "#/components/schemas/ToolCall" },
                      "type": "array",
                      "title": "Tool calls",
                      "description": "A list of tool calls requested by the assistant.",
                      "nullable": true,
                    },
                },
              "type": "object",
              "required": ["role"],
              "title": "ChatMessage",
            },
          "ChatMessageDict":
            {
              "properties":
                {
                  "content":
                    {
                      "anyOf":
                        [
                          { "type": "string" },
                          {
                            "items":
                              {
                                "anyOf":
                                  [
                                    {
                                      "$ref": "#/components/schemas/TextChatContentDict",
                                    },
                                    {
                                      "$ref": "#/components/schemas/ImageChatContentDict",
                                    },
                                  ],
                              },
                            "type": "array",
                          },
                        ],
                      "title": "Content",
                    },
                  "name": { "type": "string", "title": "Name" },
                  "tool_call_id": { "type": "string", "title": "Tool Call Id" },
                  "role": { "$ref": "#/components/schemas/ChatRole" },
                  "tool_call":
                    { "$ref": "#/components/schemas/FunctionToolDict" },
                  "tool_calls":
                    {
                      "items": { "$ref": "#/components/schemas/ToolCallDict" },
                      "type": "array",
                      "title": "Tool Calls",
                    },
                },
              "type": "object",
              "required": ["content", "role"],
              "title": "ChatMessageDict",
            },
          "ChatPromptVersionResponse":
            {
              "properties":
                {
                  "id":
                    {
                      "type": "string",
                      "title": "Prompt Version ID",
                      "description": "Unique identifier for the Prompt Version. Starts with `prv_`.",
                    },
                  "prompt_id":
                    {
                      "type": "string",
                      "title": "Prompt ID",
                      "description": "Unique identifier for the Prompt that this Prompt Version belongs to. Starts with `pr_`.",
                    },
                  "prompt":
                    {
                      "$ref": "#/components/schemas/PromptVersionPromptResponse",
                    },
                  "commit_message":
                    {
                      "type": "string",
                      "title": "Commit message",
                      "description": "Message describing the changes made.",
                    },
                  "status":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/VersionStatus" }],
                      "title": "Status",
                      "description": "The status of the Prompt Version.",
                    },
                  "tools":
                    {
                      "items":
                        {
                          "$ref": "#/components/schemas/PromptVersionToolResponse",
                        },
                      "type": "array",
                      "title": "Tool",
                      "description": "The list of Tools and Tool Versions that have are associated to this Prompt Version.",
                    },
                  "feedback_stats":
                    {
                      "items":
                        {
                          "$ref": "#/components/schemas/PromptVersionFeedbackStatsResponse",
                        },
                      "type": "array",
                      "title": "Feedback statistics",
                      "description": "Feedback statistics for the Prompt Version.",
                    },
                  "type":
                    {
                      "type": "string",
                      "enum": ["prompt"],
                      "title": "Type",
                      "default": "prompt",
                    },
                  "created_by": { "$ref": "#/components/schemas/UserResponse" },
                  "num_logs": { "type": "integer", "title": "Num Logs" },
                  "last_used_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Last Used At",
                    },
                  "created_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Created At",
                    },
                  "updated_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Updated At",
                    },
                  "endpoint":
                    {
                      "type": "string",
                      "enum": ["chat"],
                      "title": "Provider endpoint",
                      "description": "The provider model endpoint used.",
                      "default": "chat",
                    },
                  "chat_template":
                    {
                      "items": { "$ref": "#/components/schemas/ChatMessage" },
                      "type": "array",
                      "title": "Chat template",
                      "description": "Messages prepended to the list of messages sent to the provider. These messages that will take your specified inputs to form your final request to the provider model. Input variables within the template should be specified with syntax: {{INPUT_NAME}}.",
                    },
                  "provider":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/ModelProviders" }],
                      "title": "Model provider",
                      "description": "The company providing the underlying model service.",
                      "default": "openai",
                    },
                  "model":
                    {
                      "type": "string",
                      "title": "Model instance used",
                      "description": "The model instance used. E.g. gpt-4.",
                    },
                  "max_tokens":
                    {
                      "type": "integer",
                      "title": "Maximum tokens",
                      "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt",
                      "default": -1,
                    },
                  "temperature":
                    {
                      "type": "number",
                      "title": "Sampling temperature",
                      "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
                      "default": 1,
                    },
                  "top_p":
                    {
                      "type": "number",
                      "title": "Top p probability mass",
                      "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
                      "default": 1,
                    },
                  "stop":
                    {
                      "anyOf":
                        [
                          { "type": "string" },
                          { "items": { "type": "string" }, "type": "array" },
                        ],
                      "title": "Stop sequence(s)",
                      "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
                    },
                  "presence_penalty":
                    {
                      "type": "number",
                      "title": "Presence penalty",
                      "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
                      "default": 0,
                    },
                  "frequency_penalty":
                    {
                      "type": "number",
                      "title": "Frequency penalty",
                      "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
                      "default": 0,
                    },
                  "other":
                    {
                      "type": "object",
                      "title": "Other provider parameters",
                      "description": "Other parameter values to be passed to the provider call.",
                      "default": {},
                    },
                  "seed":
                    {
                      "type": "integer",
                      "title": "Seed",
                      "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed.",
                    },
                  "response_format":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/ResponseFormat" }],
                      "title": "Response format",
                      "description": 'The format of the response. Only `{"type": "json_object"}` is currently supported for chat.',
                    },
                },
              "type": "object",
              "required":
                [
                  "id",
                  "prompt_id",
                  "prompt",
                  "status",
                  "tools",
                  "num_logs",
                  "last_used_at",
                  "created_at",
                  "updated_at",
                  "model",
                ],
              "title": "ChatPromptVersionResponse",
              "description": "Base type that all Version Responses should inherit from.",
            },
          "ChatRole":
            {
              "type": "string",
              "enum": ["user", "assistant", "system", "tool"],
              "title": "ChatRole",
              "description": "An enumeration.",
            },
          "CompletionPromptVersionResponse":
            {
              "properties":
                {
                  "id":
                    {
                      "type": "string",
                      "title": "Prompt Version ID",
                      "description": "Unique identifier for the Prompt Version. Starts with `prv_`.",
                    },
                  "prompt_id":
                    {
                      "type": "string",
                      "title": "Prompt ID",
                      "description": "Unique identifier for the Prompt that this Prompt Version belongs to. Starts with `pr_`.",
                    },
                  "prompt":
                    {
                      "$ref": "#/components/schemas/PromptVersionPromptResponse",
                    },
                  "commit_message":
                    {
                      "type": "string",
                      "title": "Commit message",
                      "description": "Message describing the changes made.",
                    },
                  "status":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/VersionStatus" }],
                      "title": "Status",
                      "description": "The status of the Prompt Version.",
                    },
                  "tools":
                    {
                      "items":
                        {
                          "$ref": "#/components/schemas/PromptVersionToolResponse",
                        },
                      "type": "array",
                      "title": "Tool",
                      "description": "The list of Tools and Tool Versions that have are associated to this Prompt Version.",
                    },
                  "feedback_stats":
                    {
                      "items":
                        {
                          "$ref": "#/components/schemas/PromptVersionFeedbackStatsResponse",
                        },
                      "type": "array",
                      "title": "Feedback statistics",
                      "description": "Feedback statistics for the Prompt Version.",
                    },
                  "type":
                    {
                      "type": "string",
                      "enum": ["prompt"],
                      "title": "Type",
                      "default": "prompt",
                    },
                  "created_by": { "$ref": "#/components/schemas/UserResponse" },
                  "num_logs": { "type": "integer", "title": "Num Logs" },
                  "last_used_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Last Used At",
                    },
                  "created_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Created At",
                    },
                  "updated_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Updated At",
                    },
                  "endpoint":
                    {
                      "type": "string",
                      "enum": ["complete"],
                      "title": "Provider endpoint",
                      "description": "The provider model endpoint used.",
                      "default": "complete",
                    },
                  "prompt_template":
                    {
                      "type": "string",
                      "title": "Prompt template",
                      "description": "Prompt template that will take your specified inputs to form your final request to the model. Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}.",
                    },
                  "provider":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/ModelProviders" }],
                      "title": "Model provider",
                      "description": "The company providing the underlying model service.",
                      "default": "openai",
                    },
                  "model":
                    {
                      "type": "string",
                      "title": "Model instance used",
                      "description": "The model instance used. E.g. gpt-4.",
                    },
                  "max_tokens":
                    {
                      "type": "integer",
                      "title": "Maximum tokens",
                      "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt",
                      "default": -1,
                    },
                  "temperature":
                    {
                      "type": "number",
                      "title": "Sampling temperature",
                      "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
                      "default": 1,
                    },
                  "top_p":
                    {
                      "type": "number",
                      "title": "Top p probability mass",
                      "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
                      "default": 1,
                    },
                  "stop":
                    {
                      "anyOf":
                        [
                          { "type": "string" },
                          { "items": { "type": "string" }, "type": "array" },
                        ],
                      "title": "Stop sequence(s)",
                      "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
                    },
                  "presence_penalty":
                    {
                      "type": "number",
                      "title": "Presence penalty",
                      "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
                      "default": 0,
                    },
                  "frequency_penalty":
                    {
                      "type": "number",
                      "title": "Frequency penalty",
                      "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
                      "default": 0,
                    },
                  "other":
                    {
                      "type": "object",
                      "title": "Other provider parameters",
                      "description": "Other parameter values to be passed to the provider call.",
                      "default": {},
                    },
                  "seed":
                    {
                      "type": "integer",
                      "title": "Seed",
                      "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed.",
                    },
                  "response_format":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/ResponseFormat" }],
                      "title": "Response format",
                      "description": 'The format of the response. Only `{"type": "json_object"}` is currently supported for chat.',
                    },
                },
              "type": "object",
              "required":
                [
                  "id",
                  "prompt_id",
                  "prompt",
                  "status",
                  "tools",
                  "num_logs",
                  "last_used_at",
                  "created_at",
                  "updated_at",
                  "model",
                ],
              "title": "CompletionPromptVersionResponse",
              "description": "Base type that all Version Responses should inherit from.",
            },
          "CreateChatPromptVersionRequest":
            {
              "properties":
                {
                  "prompt_id":
                    {
                      "type": "string",
                      "title": "Prompt ID",
                      "description": "Unique identifier for the Prompt to create a new Prompt Version for. Starts with `pr_`.",
                    },
                  "commit_message":
                    {
                      "type": "string",
                      "minLength": 1,
                      "title": "Commit message",
                      "description": "Message describing the changes made.",
                    },
                  "endpoint":
                    {
                      "type": "string",
                      "enum": ["chat"],
                      "title": "Provider endpoint",
                      "description": "The provider model endpoint used.",
                      "default": "chat",
                    },
                  "chat_template":
                    {
                      "items": { "$ref": "#/components/schemas/ChatMessage" },
                      "type": "array",
                      "title": "Chat template",
                      "description": "Messages prepended to the list of messages sent to the provider. These messages that will take your specified inputs to form your final request to the provider model. Input variables within the template should be specified with syntax: {{INPUT_NAME}}.",
                    },
                  "provider":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/ModelProviders" }],
                      "title": "Model provider",
                      "description": "The company providing the underlying model service.",
                      "default": "openai",
                    },
                  "model":
                    {
                      "type": "string",
                      "title": "Model instance used",
                      "description": "The model instance used. E.g. gpt-4.",
                    },
                  "max_tokens":
                    {
                      "type": "integer",
                      "title": "Maximum tokens",
                      "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt",
                      "default": -1,
                    },
                  "temperature":
                    {
                      "type": "number",
                      "title": "Sampling temperature",
                      "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
                      "default": 1,
                    },
                  "top_p":
                    {
                      "type": "number",
                      "title": "Top p probability mass",
                      "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
                      "default": 1,
                    },
                  "stop":
                    {
                      "anyOf":
                        [
                          { "type": "string" },
                          { "items": { "type": "string" }, "type": "array" },
                        ],
                      "title": "Stop sequence(s)",
                      "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
                    },
                  "presence_penalty":
                    {
                      "type": "number",
                      "title": "Presence penalty",
                      "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
                      "default": 0,
                    },
                  "frequency_penalty":
                    {
                      "type": "number",
                      "title": "Frequency penalty",
                      "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
                      "default": 0,
                    },
                  "other":
                    {
                      "type": "object",
                      "title": "Other provider parameters",
                      "description": "Other parameter values to be passed to the provider call.",
                      "default": {},
                    },
                  "seed":
                    {
                      "type": "integer",
                      "title": "Seed",
                      "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed.",
                    },
                  "response_format":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/ResponseFormat" }],
                      "title": "Response format",
                      "description": 'The format of the response. Only `{"type": "json_object"}` is currently supported for chat.',
                    },
                },
              "type": "object",
              "required": ["prompt_id", "commit_message", "model"],
              "title": "CreateChatPromptVersionRequest",
            },
          "CreateCompletionPromptVersionRequest":
            {
              "properties":
                {
                  "prompt_id":
                    {
                      "type": "string",
                      "title": "Prompt ID",
                      "description": "Unique identifier for the Prompt to create a new Prompt Version for. Starts with `pr_`.",
                    },
                  "commit_message":
                    {
                      "type": "string",
                      "minLength": 1,
                      "title": "Commit message",
                      "description": "Message describing the changes made.",
                    },
                  "endpoint":
                    {
                      "type": "string",
                      "enum": ["complete"],
                      "title": "Provider endpoint",
                      "description": "The provider model endpoint used.",
                      "default": "complete",
                    },
                  "prompt_template":
                    {
                      "type": "string",
                      "title": "Prompt template",
                      "description": "Prompt template that will take your specified inputs to form your final request to the model. Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}.",
                    },
                  "provider":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/ModelProviders" }],
                      "title": "Model provider",
                      "description": "The company providing the underlying model service.",
                      "default": "openai",
                    },
                  "model":
                    {
                      "type": "string",
                      "title": "Model instance used",
                      "description": "The model instance used. E.g. gpt-4.",
                    },
                  "max_tokens":
                    {
                      "type": "integer",
                      "title": "Maximum tokens",
                      "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt",
                      "default": -1,
                    },
                  "temperature":
                    {
                      "type": "number",
                      "title": "Sampling temperature",
                      "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
                      "default": 1,
                    },
                  "top_p":
                    {
                      "type": "number",
                      "title": "Top p probability mass",
                      "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
                      "default": 1,
                    },
                  "stop":
                    {
                      "anyOf":
                        [
                          { "type": "string" },
                          { "items": { "type": "string" }, "type": "array" },
                        ],
                      "title": "Stop sequence(s)",
                      "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
                    },
                  "presence_penalty":
                    {
                      "type": "number",
                      "title": "Presence penalty",
                      "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
                      "default": 0,
                    },
                  "frequency_penalty":
                    {
                      "type": "number",
                      "title": "Frequency penalty",
                      "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
                      "default": 0,
                    },
                  "other":
                    {
                      "type": "object",
                      "title": "Other provider parameters",
                      "description": "Other parameter values to be passed to the provider call.",
                      "default": {},
                    },
                  "seed":
                    {
                      "type": "integer",
                      "title": "Seed",
                      "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed.",
                    },
                  "response_format":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/ResponseFormat" }],
                      "title": "Response format",
                      "description": 'The format of the response. Only `{"type": "json_object"}` is currently supported for chat.',
                    },
                },
              "type": "object",
              "required": ["prompt_id", "commit_message", "model"],
              "title": "CreateCompletionPromptVersionRequest",
            },
          "CreateDatasetRequest":
            {
              "properties":
                {
                  "name":
                    {
                      "type": "string",
                      "title": "Dataset Name",
                      "description": "Name of the Dataset. This has to be unique within your Organization.",
                    },
                  "directory_id":
                    {
                      "type": "string",
                      "title": "Directory ID",
                      "description": "Unique identifier for the Directory to create the Dataset in. Starts with `dir_`. If not provided, the Dataset will be created in your Organization's root directory.",
                    },
                },
              "type": "object",
              "title": "CreateDatasetRequest",
            },
          "CreateDatasetVersionRequest":
            {
              "properties":
                {
                  "dataset_id":
                    {
                      "type": "string",
                      "title": "Dataset ID",
                      "description": "Unique identifier of the Dataset to create a new Version of. Starts with `ds_`.",
                    },
                  "commit_message":
                    {
                      "type": "string",
                      "minLength": 1,
                      "title": "Commit message",
                      "description": "Message describing the changes made.",
                    },
                  "datapoints":
                    {
                      "items":
                        { "$ref": "#/components/schemas/DatapointRequest" },
                      "type": "array",
                      "title": "Datapoints",
                      "description": "The list of datapoints in this version of the dataset.",
                    },
                },
              "type": "object",
              "required": ["dataset_id", "commit_message", "datapoints"],
              "title": "CreateDatasetVersionRequest",
            },
          "CreateEvaluatorRequest":
            {
              "properties":
                {
                  "name":
                    {
                      "type": "string",
                      "title": "Evaluator Name",
                      "description": "Name of the Evaluator. This has to be unique within your Organization.",
                    },
                  "directory_id":
                    {
                      "type": "string",
                      "title": "Directory ID",
                      "description": "Unique identifier for the Directory to create Evaluator in. Starts with `dir_`. If not provided, the Evaluator will be created in your Organization's root directory.",
                    },
                  "evaluator_type":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/EvaluatorType" }],
                      "title": "Evaluator Type",
                      "description": "Type of Evaluator, one of python, llm, human, external.",
                    },
                },
              "type": "object",
              "required": ["evaluator_type"],
              "title": "CreateEvaluatorRequest",
            },
          "CreateExternalEvaluatorVersionRequest":
            {
              "properties":
                {
                  "evaluator_id":
                    {
                      "type": "string",
                      "title": "Evaluator ID",
                      "description": "Unique identifier for the Evaluator to create a new Evaluator Version for. Starts with `ev_`.",
                    },
                  "commit_message":
                    {
                      "type": "string",
                      "title": "Commit message",
                      "description": "Message describing the changes made.",
                    },
                  "evaluator_type":
                    {
                      "type": "string",
                      "enum": ["external"],
                      "title": "Evaluator type",
                      "description": "The type of the evaluator.",
                      "default": "external",
                    },
                  "arguments_type":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/EvaluatorArgumentsType",
                          },
                        ],
                      "title": "Arguments type",
                      "description": "Whether this evaluator is target-free or target-required.",
                    },
                  "return_type":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/EvaluatorReturnTypeEnum",
                          },
                        ],
                      "title": "Return type",
                      "description": "The type of the return value of the evaluator.",
                    },
                },
              "type": "object",
              "required": ["evaluator_id", "arguments_type", "return_type"],
              "title": "CreateExternalEvaluatorVersionRequest",
            },
          "CreateHumanEvaluatorVersionRequest":
            {
              "properties":
                {
                  "evaluator_id":
                    {
                      "type": "string",
                      "title": "Evaluator ID",
                      "description": "Unique identifier for the Evaluator to create a new Evaluator Version for. Starts with `ev_`.",
                    },
                  "commit_message":
                    {
                      "type": "string",
                      "title": "Commit message",
                      "description": "Message describing the changes made.",
                    },
                  "evaluator_type":
                    {
                      "type": "string",
                      "enum": ["human"],
                      "title": "Evaluator type",
                      "description": "The type of the evaluator.",
                      "default": "human",
                    },
                  "arguments_type":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/EvaluatorArgumentsType",
                          },
                        ],
                      "title": "Arguments type",
                      "description": "Whether this evaluator is target-free or target-required.",
                    },
                  "return_type":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/EvaluatorReturnTypeEnum",
                          },
                        ],
                      "title": "Return type",
                      "description": "The type of the return value of the evaluator.",
                    },
                },
              "type": "object",
              "required": ["evaluator_id", "arguments_type", "return_type"],
              "title": "CreateHumanEvaluatorVersionRequest",
            },
          "CreateLLMEvaluatorVersionRequest":
            {
              "properties":
                {
                  "evaluator_id":
                    {
                      "type": "string",
                      "title": "Evaluator ID",
                      "description": "Unique identifier for the Evaluator to create a new Evaluator Version for. Starts with `ev_`.",
                    },
                  "commit_message":
                    {
                      "type": "string",
                      "title": "Commit message",
                      "description": "Message describing the changes made.",
                    },
                  "evaluator_type":
                    {
                      "type": "string",
                      "enum": ["llm"],
                      "title": "Evaluator type",
                      "description": "The type of the evaluator.",
                      "default": "llm",
                    },
                  "prompt":
                    {
                      "anyOf":
                        [
                          {
                            "$ref": "#/components/schemas/CreatePromptCompletionRequest",
                          },
                          {
                            "$ref": "#/components/schemas/CreatePromptChatRequest",
                          },
                        ],
                      "title": "Prompt parameters",
                      "description": "The prompt parameters used to generate.",
                    },
                  "arguments_type":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/EvaluatorArgumentsType",
                          },
                        ],
                      "title": "Arguments type",
                      "description": "Whether this evaluator is target-free or target-required.",
                    },
                  "return_type":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/EvaluatorReturnTypeEnum",
                          },
                        ],
                      "title": "Return type",
                      "description": "The type of the return value of the evaluator.",
                    },
                },
              "type": "object",
              "required": ["evaluator_id", "arguments_type", "return_type"],
              "title": "CreateLLMEvaluatorVersionRequest",
            },
          "CreatePromptChatRequest":
            {
              "properties":
                {
                  "endpoint":
                    {
                      "type": "string",
                      "enum": ["chat"],
                      "title": "Provider endpoint",
                      "description": "The provider model endpoint used.",
                      "default": "chat",
                    },
                  "chat_template":
                    {
                      "items": { "$ref": "#/components/schemas/ChatMessage" },
                      "type": "array",
                      "title": "Chat template",
                      "description": "Messages prepended to the list of messages sent to the provider. These messages that will take your specified inputs to form your final request to the provider model. Input variables within the template should be specified with syntax: {{INPUT_NAME}}.",
                    },
                  "provider":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/ModelProviders" }],
                      "title": "Model provider",
                      "description": "The company providing the underlying model service.",
                      "default": "openai",
                    },
                  "model":
                    {
                      "type": "string",
                      "title": "Model instance used",
                      "description": "The model instance used. E.g. gpt-4.",
                    },
                  "max_tokens":
                    {
                      "type": "integer",
                      "title": "Maximum tokens",
                      "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt",
                      "default": -1,
                    },
                  "temperature":
                    {
                      "type": "number",
                      "title": "Sampling temperature",
                      "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
                      "default": 1,
                    },
                  "top_p":
                    {
                      "type": "number",
                      "title": "Top p probability mass",
                      "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
                      "default": 1,
                    },
                  "stop":
                    {
                      "anyOf":
                        [
                          { "type": "string" },
                          { "items": { "type": "string" }, "type": "array" },
                        ],
                      "title": "Stop sequence(s)",
                      "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
                    },
                  "presence_penalty":
                    {
                      "type": "number",
                      "title": "Presence penalty",
                      "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
                      "default": 0,
                    },
                  "frequency_penalty":
                    {
                      "type": "number",
                      "title": "Frequency penalty",
                      "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
                      "default": 0,
                    },
                  "other":
                    {
                      "type": "object",
                      "title": "Other provider parameters",
                      "description": "Other parameter values to be passed to the provider call.",
                      "default": {},
                    },
                  "seed":
                    {
                      "type": "integer",
                      "title": "Seed",
                      "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed.",
                    },
                  "response_format":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/ResponseFormat" }],
                      "title": "Response format",
                      "description": 'The format of the response. Only `{"type": "json_object"}` is currently supported for chat.',
                    },
                },
              "type": "object",
              "required": ["model"],
              "title": "CreatePromptChatRequest",
            },
          "CreatePromptCompletionRequest":
            {
              "properties":
                {
                  "endpoint":
                    {
                      "type": "string",
                      "enum": ["complete"],
                      "title": "Provider endpoint",
                      "description": "The provider model endpoint used.",
                      "default": "complete",
                    },
                  "prompt_template":
                    {
                      "type": "string",
                      "title": "Prompt template",
                      "description": "Prompt template that will take your specified inputs to form your final request to the model. Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}.",
                    },
                  "provider":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/ModelProviders" }],
                      "title": "Model provider",
                      "description": "The company providing the underlying model service.",
                      "default": "openai",
                    },
                  "model":
                    {
                      "type": "string",
                      "title": "Model instance used",
                      "description": "The model instance used. E.g. gpt-4.",
                    },
                  "max_tokens":
                    {
                      "type": "integer",
                      "title": "Maximum tokens",
                      "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt",
                      "default": -1,
                    },
                  "temperature":
                    {
                      "type": "number",
                      "title": "Sampling temperature",
                      "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
                      "default": 1,
                    },
                  "top_p":
                    {
                      "type": "number",
                      "title": "Top p probability mass",
                      "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
                      "default": 1,
                    },
                  "stop":
                    {
                      "anyOf":
                        [
                          { "type": "string" },
                          { "items": { "type": "string" }, "type": "array" },
                        ],
                      "title": "Stop sequence(s)",
                      "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
                    },
                  "presence_penalty":
                    {
                      "type": "number",
                      "title": "Presence penalty",
                      "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
                      "default": 0,
                    },
                  "frequency_penalty":
                    {
                      "type": "number",
                      "title": "Frequency penalty",
                      "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
                      "default": 0,
                    },
                  "other":
                    {
                      "type": "object",
                      "title": "Other provider parameters",
                      "description": "Other parameter values to be passed to the provider call.",
                      "default": {},
                    },
                  "seed":
                    {
                      "type": "integer",
                      "title": "Seed",
                      "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed.",
                    },
                  "response_format":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/ResponseFormat" }],
                      "title": "Response format",
                      "description": 'The format of the response. Only `{"type": "json_object"}` is currently supported for chat.',
                    },
                },
              "type": "object",
              "required": ["model"],
              "title": "CreatePromptCompletionRequest",
            },
          "CreatePromptRequest":
            {
              "properties":
                {
                  "name":
                    {
                      "type": "string",
                      "title": "Prompt Name",
                      "description": "Name of the Prompt. This has to be unique within your Organization.",
                    },
                  "directory_id":
                    {
                      "type": "string",
                      "title": "Directory ID",
                      "description": "Unique identifier for the Directory to create Prompt in. Starts with `dir_`. If not provided, the Prompt will be created in your Organization's root directory.",
                    },
                },
              "type": "object",
              "title": "CreatePromptRequest",
            },
          "CreatePythonEvaluatorVersionRequest":
            {
              "properties":
                {
                  "evaluator_id":
                    {
                      "type": "string",
                      "title": "Evaluator ID",
                      "description": "Unique identifier for the Evaluator to create a new Evaluator Version for. Starts with `ev_`.",
                    },
                  "commit_message":
                    {
                      "type": "string",
                      "title": "Commit message",
                      "description": "Message describing the changes made.",
                    },
                  "evaluator_type":
                    {
                      "type": "string",
                      "enum": ["python"],
                      "title": "Evaluator type",
                      "description": "The type of the evaluator.",
                      "default": "python",
                    },
                  "code":
                    {
                      "type": "string",
                      "title": "Code",
                      "description": "The code for the evaluator. This code will be executed in a sandboxed environment.",
                    },
                  "arguments_type":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/EvaluatorArgumentsType",
                          },
                        ],
                      "title": "Arguments type",
                      "description": "Whether this evaluator is target-free or target-required.",
                    },
                  "return_type":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/EvaluatorReturnTypeEnum",
                          },
                        ],
                      "title": "Return type",
                      "description": "The type of the return value of the evaluator.",
                    },
                },
              "type": "object",
              "required": ["evaluator_id", "arguments_type", "return_type"],
              "title": "CreatePythonEvaluatorVersionRequest",
            },
          "CreateToolRequest":
            {
              "properties":
                {
                  "name":
                    {
                      "type": "string",
                      "title": "Tool Name",
                      "description": "Name of the Tool. This has to be unique within your Organization.",
                    },
                  "directory_id":
                    {
                      "type": "string",
                      "title": "Directory ID",
                      "description": "Unique identifier for the Directory to create Tool in. Starts with `dir_`. If not provided, the Tool will be created in your Organization's root directory.",
                    },
                  "tool_type":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/src__domain__files__tool__ToolType",
                          },
                        ],
                      "title": "Tool Type",
                      "description": "Type of Tool if runnable by Humanloop. Otherwise `null`.",
                    },
                },
              "type": "object",
              "title": "CreateToolRequest",
            },
          "CreateToolVersionRequest":
            {
              "properties":
                {
                  "tool_id":
                    {
                      "type": "string",
                      "title": "Tool ID",
                      "description": "Unique identifier for the Tool to create a new Tool Version for. Starts with `tl_`.",
                    },
                  "commit_message":
                    {
                      "type": "string",
                      "minLength": 1,
                      "title": "Commit message",
                      "description": "Message describing the changes made.",
                    },
                  "name":
                    {
                      "type": "string",
                      "title": "Name",
                      "description": "Name for the Tool referenced by the model.",
                    },
                  "description":
                    {
                      "type": "string",
                      "title": "Description",
                      "description": "Description of the Tool referenced by the model",
                    },
                  "parameters":
                    {
                      "type": "object",
                      "title": "Tool parameters",
                      "description": "Parameters needed to run the Tool, defined in JSON Schema format: https://json-schema.org/",
                    },
                  "source_code":
                    {
                      "type": "string",
                      "title": "Source Code",
                      "description": "Code source of the Tool.",
                    },
                  "setup_values":
                    {
                      "type": "object",
                      "title": "Setup values",
                      "description": "Values needed to setup the Tool, defined in JSON Schema format: https://json-schema.org/",
                    },
                },
              "type": "object",
              "required": ["tool_id", "commit_message", "name"],
              "title": "CreateToolVersionRequest",
            },
          "DashboardConfiguration":
            {
              "properties":
                {
                  "time_unit": { "$ref": "#/components/schemas/TimeUnit" },
                  "time_range_days":
                    { "type": "integer", "title": "Time Range Days" },
                  "model_config_ids":
                    {
                      "items": { "type": "string" },
                      "type": "array",
                      "title": "Model Config Ids",
                    },
                },
              "type": "object",
              "required": ["time_unit", "time_range_days", "model_config_ids"],
              "title": "DashboardConfiguration",
            },
          "DatapointRequest":
            {
              "properties":
                {
                  "variables":
                    {
                      "additionalProperties": { "type": "string" },
                      "type": "object",
                      "title": "Variables",
                    },
                  "messages":
                    {
                      "items":
                        { "$ref": "#/components/schemas/ChatMessageDict" },
                      "type": "array",
                      "title": "Messages",
                    },
                  "target": { "type": "object", "title": "Target" },
                },
              "type": "object",
              "required": ["target"],
              "title": "DatapointRequest",
            },
          "DatapointResponse":
            {
              "properties":
                {
                  "variables":
                    {
                      "additionalProperties": { "type": "string" },
                      "type": "object",
                      "title": "Variables",
                    },
                  "messages":
                    {
                      "items":
                        { "$ref": "#/components/schemas/ChatMessageDict" },
                      "type": "array",
                      "title": "Messages",
                    },
                  "target": { "type": "object", "title": "Target" },
                  "hash": { "type": "string", "title": "Hash" },
                },
              "type": "object",
              "required": ["target", "hash"],
              "title": "DatapointResponse",
            },
          "DatasetResponse":
            {
              "properties":
                {
                  "id":
                    {
                      "type": "string",
                      "title": "Prompt ID",
                      "description": "Unique identifier for Dataset. Starts with `ds_`.",
                    },
                  "name":
                    {
                      "type": "string",
                      "title": "Dataset Name",
                      "description": "Name of the Dataset.",
                    },
                  "type":
                    { "type": "string", "enum": ["dataset"], "title": "Type" },
                  "directory_id":
                    {
                      "type": "string",
                      "title": "Directory ID",
                      "description": "Unique identifier for the Directory the Dataset belongs to. Starts with `dir_`.",
                    },
                  "created_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Created At",
                    },
                  "updated_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Updated At",
                    },
                },
              "type": "object",
              "required": ["id", "name", "type", "created_at", "updated_at"],
              "title": "DatasetResponse",
              "description": "Base type that all File Responses should inherit from.\n\nAttributes defined here are common to all File Responses and should be overridden\nin the inheriting classes with documentation and appropriate Field definitions.",
            },
          "DatasetVersionResponse":
            {
              "properties":
                {
                  "id":
                    {
                      "type": "string",
                      "title": "Dataset Version ID",
                      "description": "Unique identifier for this Version. Starts with `dsv_`.",
                    },
                  "dataset_id":
                    {
                      "type": "string",
                      "title": "Dataset ID",
                      "description": "Unique identifier for the Dataset of which this is a version. Starts with `ds_`.",
                    },
                  "dataset":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/DatasetResponse" }],
                      "title": "Dataset",
                      "description": "The dataset of which this is a version.",
                    },
                  "datapoints":
                    {
                      "items":
                        { "$ref": "#/components/schemas/DatapointResponse" },
                      "type": "array",
                      "title": "Datapoints",
                    },
                  "commit_message":
                    {
                      "type": "string",
                      "minLength": 1,
                      "title": "Commit message",
                      "description": "Message describing the changes made.",
                    },
                  "status":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/VersionStatus" }],
                      "title": "Status",
                      "description": "The commit status of this version of the dataset - either 'committed' or 'uncommitted'.",
                    },
                  "type":
                    {
                      "type": "string",
                      "enum": ["dataset"],
                      "title": "Type",
                      "default": "dataset",
                    },
                  "created_by": { "$ref": "#/components/schemas/UserResponse" },
                  "created_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Created At",
                    },
                  "updated_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Updated At",
                    },
                },
              "type": "object",
              "required":
                [
                  "id",
                  "dataset_id",
                  "dataset",
                  "datapoints",
                  "commit_message",
                  "status",
                  "created_at",
                  "updated_at",
                ],
              "title": "DatasetVersionResponse",
              "description": "Base type that all Version Responses should inherit from.",
            },
          "DeploymentRequest":
            {
              "properties":
                {
                  "version_id":
                    {
                      "type": "string",
                      "title": "Version ID",
                      "description": "Unique identifier for the Version to deploy.",
                    },
                  "environment_id":
                    {
                      "type": "string",
                      "title": "Environment ID",
                      "description": "Unique identifier for the Environment to deploy the Version to. Starts with `env_`.",
                    },
                },
              "type": "object",
              "required": ["version_id", "environment_id"],
              "title": "DeploymentRequest",
            },
          "DeploymentResponse_EvaluatorVersionResponse_":
            {
              "properties":
                {
                  "version":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/EvaluatorVersionResponse",
                          },
                        ],
                      "title": "Version",
                      "description": "Version that is deployed.",
                    },
                  "experiment":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/ExperimentResponse" }],
                      "title": "Experiment",
                      "description": "Experiment that is deployed.",
                    },
                  "environment":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/EnvironmentResponse",
                          },
                        ],
                      "title": "Environment",
                      "description": "Environment where the version or experiment is deployed.",
                    },
                },
              "type": "object",
              "required": ["environment"],
              "title": "DeploymentResponse[EvaluatorVersionResponse]",
            },
          "DeploymentResponse_PromptVersionResponse_":
            {
              "properties":
                {
                  "version":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/PromptVersionResponse",
                          },
                        ],
                      "title": "Version",
                      "description": "Version that is deployed.",
                    },
                  "experiment":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/ExperimentResponse" }],
                      "title": "Experiment",
                      "description": "Experiment that is deployed.",
                    },
                  "environment":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/EnvironmentResponse",
                          },
                        ],
                      "title": "Environment",
                      "description": "Environment where the version or experiment is deployed.",
                    },
                },
              "type": "object",
              "required": ["environment"],
              "title": "DeploymentResponse[PromptVersionResponse]",
            },
          "DeploymentResponse_ToolVersionResponse_":
            {
              "properties":
                {
                  "version":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/ToolVersionResponse",
                          },
                        ],
                      "title": "Version",
                      "description": "Version that is deployed.",
                    },
                  "experiment":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/ExperimentResponse" }],
                      "title": "Experiment",
                      "description": "Experiment that is deployed.",
                    },
                  "environment":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/EnvironmentResponse",
                          },
                        ],
                      "title": "Environment",
                      "description": "Environment where the version or experiment is deployed.",
                    },
                },
              "type": "object",
              "required": ["environment"],
              "title": "DeploymentResponse[ToolVersionResponse]",
            },
          "EnvironmentResponse":
            {
              "properties":
                {
                  "id": { "type": "string", "title": "Id" },
                  "created_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Created At",
                    },
                  "name": { "type": "string", "title": "Name" },
                  "tag": { "$ref": "#/components/schemas/EnvironmentTag" },
                },
              "type": "object",
              "required": ["id", "created_at", "name", "tag"],
              "title": "EnvironmentResponse",
            },
          "EnvironmentTag":
            {
              "type": "string",
              "enum": ["default", "other"],
              "title": "EnvironmentTag",
              "description": "An enumeration.",
            },
          "EvaluatorArgumentsType":
            {
              "type": "string",
              "enum": ["target_free", "target_required"],
              "title": "EvaluatorArgumentsType",
              "description": "Enum representing the possible argument types of an evaluator.",
            },
          "EvaluatorInputResponse":
            {
              "properties":
                {
                  "name":
                    {
                      "type": "string",
                      "title": "Input name",
                      "description": "Type of input.",
                    },
                },
              "type": "object",
              "required": ["name"],
              "title": "EvaluatorInputResponse",
            },
          "EvaluatorResponse":
            {
              "properties":
                {
                  "id":
                    {
                      "type": "string",
                      "title": "Evaluator ID",
                      "description": "Unique identifier for Evaluator. Starts with `ev_`.",
                    },
                  "name":
                    {
                      "type": "string",
                      "title": "Evaluator Name",
                      "description": "Name of the Evaluator.",
                    },
                  "type":
                    {
                      "type": "string",
                      "enum": ["evaluator"],
                      "title": "Type",
                    },
                  "directory_id":
                    {
                      "type": "string",
                      "title": "Directory ID",
                      "description": "Unique identifier for the Directory the Evaluator belongs to. Starts with `dir_`.",
                    },
                  "created_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Created At",
                    },
                  "updated_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Updated At",
                    },
                  "evaluator_type":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/EvaluatorType" }],
                      "title": "Evaluator Type",
                      "description": "The type of the evaluator.",
                    },
                  "deployments":
                    {
                      "items":
                        {
                          "$ref": "#/components/schemas/DeploymentResponse_EvaluatorVersionResponse_",
                        },
                      "type": "array",
                      "title": "Deployments",
                      "description": "The list of deployments associated to the Evaluator.",
                    },
                },
              "type": "object",
              "required":
                [
                  "id",
                  "name",
                  "type",
                  "created_at",
                  "updated_at",
                  "deployments",
                ],
              "title": "EvaluatorResponse",
              "description": "Base type that all File Responses should inherit from.\n\nAttributes defined here are common to all File Responses and should be overridden\nin the inheriting classes with documentation and appropriate Field definitions.",
            },
          "EvaluatorReturnTypeEnum":
            {
              "type": "string",
              "enum": ["boolean", "number"],
              "title": "EvaluatorReturnTypeEnum",
              "description": "Enum representing the possible return types of an evaluator.",
            },
          "EvaluatorType":
            {
              "type": "string",
              "enum": ["python", "llm", "human", "external"],
              "title": "EvaluatorType",
              "description": "An enumeration.",
            },
          "EvaluatorVersionEvaluatorResponse":
            {
              "properties":
                {
                  "id":
                    {
                      "type": "string",
                      "title": "Evaluator ID",
                      "description": "Unique identifier for Evaluator. Starts with `ev_`.",
                    },
                  "name":
                    {
                      "type": "string",
                      "title": "Evaluator Name",
                      "description": "Name of the Evaluator.",
                    },
                  "type":
                    {
                      "type": "string",
                      "enum": ["evaluator"],
                      "title": "Type",
                    },
                  "directory_id":
                    {
                      "type": "string",
                      "title": "Directory ID",
                      "description": "Unique identifier for the Directory the Evaluator belongs to. Starts with `dir_`.",
                    },
                  "created_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Created At",
                    },
                  "updated_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Updated At",
                    },
                  "evaluator_type":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/EvaluatorType" }],
                      "title": "Evaluator Type",
                      "description": "The type of the evaluator.",
                    },
                },
              "type": "object",
              "required": ["id", "name", "type", "created_at", "updated_at"],
              "title": "EvaluatorVersionEvaluatorResponse",
            },
          "EvaluatorVersionResponse":
            {
              "oneOf":
                [
                  {
                    "$ref": "#/components/schemas/LLMEvaluatorVersionResponse",
                  },
                  {
                    "$ref": "#/components/schemas/PythonEvaluatorVersionResponse",
                  },
                  {
                    "$ref": "#/components/schemas/HumanEvaluatorVersionResponse",
                  },
                  {
                    "$ref": "#/components/schemas/ExternalEvaluatorVersionResponse",
                  },
                ],
              "title": "EvaluatorVersionResponse",
              "discriminator":
                {
                  "propertyName": "evaluator_type",
                  "mapping":
                    {
                      "llm": "#/components/schemas/LLMEvaluatorVersionResponse",
                      "python": "#/components/schemas/PythonEvaluatorVersionResponse",
                      "human": "#/components/schemas/HumanEvaluatorVersionResponse",
                      "external": "#/components/schemas/ExternalEvaluatorVersionResponse",
                    },
                },
            },
          "ExperimentResponse":
            {
              "properties":
                {
                  "id":
                    {
                      "type": "string",
                      "title": "Experiment ID",
                      "description": "String ID of experiment. Starts with `exp_`.",
                    },
                  "file_id":
                    {
                      "type": "string",
                      "title": "File ID",
                      "description": "String ID of file the experiment belongs to.",
                    },
                  "name":
                    {
                      "type": "string",
                      "title": "Experiment name",
                      "description": "Name of experiment.",
                    },
                  "status":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/ExperimentStatus" }],
                      "title": "Experiment status",
                      "description": "Status of experiment.",
                    },
                  "versions":
                    {
                      "items":
                        {
                          "$ref": "#/components/schemas/ExperimentVersionResponse",
                        },
                      "type": "array",
                      "title": "Experiment Versions",
                      "description": "List of Versions associated to the experiment.",
                    },
                  "metric":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/BaseMetricResponse" }],
                      "title": "Experiment metric",
                      "description": "Metric used as the experiment's objective.",
                    },
                  "positive_labels":
                    {
                      "items": { "$ref": "#/components/schemas/PositiveLabel" },
                      "type": "array",
                      "title": "Positive labels",
                      "description": "Feedback labels to treat as positive user feedback. Used to monitor the performance of model configs in the experiment.",
                    },
                  "created_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Created At",
                    },
                  "updated_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Updated At",
                    },
                },
              "type": "object",
              "required":
                [
                  "id",
                  "file_id",
                  "name",
                  "status",
                  "metric",
                  "positive_labels",
                  "created_at",
                  "updated_at",
                ],
              "title": "ExperimentResponse",
            },
          "ExperimentStatus":
            {
              "type": "string",
              "enum": ["Initialized", "In progress"],
              "title": "ExperimentStatus",
              "description": "An enumeration.",
            },
          "ExperimentVersionResponse":
            {
              "properties":
                {
                  "mean":
                    {
                      "type": "number",
                      "title": "Mean of experiment's metric",
                      "description": "The mean performance of the Version.",
                    },
                  "spread":
                    {
                      "type": "number",
                      "title": "Spread of experiment's metric",
                      "description": "The spread of performance of the Version.",
                    },
                  "trials_count":
                    {
                      "type": "integer",
                      "title": "Trials count",
                      "description": "Number of datapoints with feedback associated to the experiment.",
                    },
                  "active":
                    {
                      "type": "boolean",
                      "title": "Version active",
                      "description": "Whether the Version is active in the experiment. Only active model configs can be sampled from the experiment.",
                    },
                  "id":
                    {
                      "type": "string",
                      "title": "Version ID",
                      "description": "String ID of Version.",
                    },
                  "commit_message":
                    {
                      "type": "string",
                      "title": "Commit message",
                      "description": "Commit message of Version.",
                    },
                  "version":
                    {
                      "anyOf":
                        [
                          {
                            "$ref": "#/components/schemas/PromptVersionResponse",
                          },
                          {
                            "$ref": "#/components/schemas/ToolVersionResponse",
                          },
                        ],
                      "title": "Version",
                      "description": "Version of the Tool.",
                    },
                  "created_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Created At",
                    },
                  "updated_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Updated At",
                    },
                },
              "type": "object",
              "required":
                [
                  "trials_count",
                  "active",
                  "id",
                  "version",
                  "created_at",
                  "updated_at",
                ],
              "title": "ExperimentVersionResponse",
            },
          "ExternalEvaluatorVersionResponse":
            {
              "properties":
                {
                  "id":
                    {
                      "type": "string",
                      "title": "Evaluator Version ID",
                      "description": "Unique identifier for the Evaluator Version. Starts with `evv_`.",
                    },
                  "evaluator_id":
                    {
                      "type": "string",
                      "title": "Evaluator ID",
                      "description": "Unique identifier for the Evaluator that this Evaluator Version belongs to. Starts with `ev_`.",
                    },
                  "evaluator":
                    {
                      "$ref": "#/components/schemas/EvaluatorVersionEvaluatorResponse",
                    },
                  "commit_message":
                    {
                      "type": "string",
                      "title": "Commit message",
                      "description": "Message describing the changes made.",
                    },
                  "status":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/VersionStatus" }],
                      "title": "Status",
                      "description": "The status of the Evaluator Version.",
                    },
                  "type":
                    {
                      "type": "string",
                      "enum": ["evaluator"],
                      "title": "Type",
                      "default": "evaluator",
                    },
                  "created_by": { "$ref": "#/components/schemas/UserResponse" },
                  "num_logs": { "type": "integer", "title": "Num Logs" },
                  "last_used_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Last Used At",
                    },
                  "created_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Created At",
                    },
                  "updated_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Updated At",
                    },
                  "evaluator_type":
                    {
                      "type": "string",
                      "enum": ["external"],
                      "title": "Evaluator type",
                      "description": "The type of the evaluator.",
                      "default": "external",
                    },
                  "arguments_type":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/EvaluatorArgumentsType",
                          },
                        ],
                      "title": "Arguments type",
                      "description": "Whether this evaluator is target-free or target-required.",
                    },
                  "return_type":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/EvaluatorReturnTypeEnum",
                          },
                        ],
                      "title": "Return type",
                      "description": "The type of the return value of the evaluator.",
                    },
                },
              "type": "object",
              "required":
                [
                  "id",
                  "evaluator_id",
                  "evaluator",
                  "status",
                  "num_logs",
                  "last_used_at",
                  "created_at",
                  "updated_at",
                  "arguments_type",
                  "return_type",
                ],
              "title": "ExternalEvaluatorVersionResponse",
              "description": "Base type that all Version Responses should inherit from.",
            },
          "FeedbackClass":
            {
              "type": "string",
              "enum": ["select", "multi_select", "text", "number"],
              "title": "FeedbackClass",
              "description": "An enumeration.",
            },
          "FeedbackLabelStatus":
            {
              "type": "string",
              "enum": ["unset", "active", "inactive"],
              "title": "FeedbackLabelStatus",
              "description": "Controls whether the label is displayed in the UI.",
            },
          "FeedbackType":
            {
              "type": "string",
              "enum": ["rating", "action", "issue", "correction", "comment"],
              "title": "FeedbackType",
              "description": "An enumeration.",
            },
          "FeedbackTypeModel":
            {
              "properties":
                {
                  "type":
                    {
                      "anyOf":
                        [
                          { "$ref": "#/components/schemas/FeedbackType" },
                          { "type": "string" },
                        ],
                      "title": "Feedback type",
                      "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'.",
                    },
                  "values":
                    {
                      "items":
                        {
                          "$ref": "#/components/schemas/CategoricalFeedbackLabel",
                        },
                      "type": "array",
                      "title": "Allowed values for categorical feedback types",
                      "description": "The allowed values for categorical feedback types. Not populated for `correction` and `comment`.",
                    },
                },
              "type": "object",
              "required": ["type"],
              "title": "FeedbackTypeModel",
            },
          "FeedbackTypes":
            {
              "items": { "$ref": "#/components/schemas/FeedbackTypeModel" },
              "type": "array",
              "title": "FeedbackTypes",
            },
          "FunctionTool":
            {
              "properties":
                {
                  "name": { "type": "string", "title": "Name" },
                  "arguments": { "type": "string", "title": "Arguments" },
                },
              "type": "object",
              "required": ["name"],
              "title": "FunctionTool",
              "description": "A function tool to be called by the model where user owns runtime.",
            },
          "FunctionToolDict":
            {
              "properties":
                {
                  "name": { "type": "string", "title": "Name" },
                  "arguments": { "type": "string", "title": "Arguments" },
                },
              "type": "object",
              "required": ["name", "arguments"],
              "title": "FunctionToolDict",
            },
          "HTTPValidationError":
            {
              "properties":
                {
                  "detail":
                    {
                      "items":
                        { "$ref": "#/components/schemas/ValidationError" },
                      "type": "array",
                      "title": "Detail",
                    },
                },
              "type": "object",
              "title": "HTTPValidationError",
            },
          "HumanEvaluatorVersionResponse":
            {
              "properties":
                {
                  "id":
                    {
                      "type": "string",
                      "title": "Evaluator Version ID",
                      "description": "Unique identifier for the Evaluator Version. Starts with `evv_`.",
                    },
                  "evaluator_id":
                    {
                      "type": "string",
                      "title": "Evaluator ID",
                      "description": "Unique identifier for the Evaluator that this Evaluator Version belongs to. Starts with `ev_`.",
                    },
                  "evaluator":
                    {
                      "$ref": "#/components/schemas/EvaluatorVersionEvaluatorResponse",
                    },
                  "commit_message":
                    {
                      "type": "string",
                      "title": "Commit message",
                      "description": "Message describing the changes made.",
                    },
                  "status":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/VersionStatus" }],
                      "title": "Status",
                      "description": "The status of the Evaluator Version.",
                    },
                  "type":
                    {
                      "type": "string",
                      "enum": ["evaluator"],
                      "title": "Type",
                      "default": "evaluator",
                    },
                  "created_by": { "$ref": "#/components/schemas/UserResponse" },
                  "num_logs": { "type": "integer", "title": "Num Logs" },
                  "last_used_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Last Used At",
                    },
                  "created_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Created At",
                    },
                  "updated_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Updated At",
                    },
                  "evaluator_type":
                    {
                      "type": "string",
                      "enum": ["human"],
                      "title": "Evaluator type",
                      "description": "The type of the evaluator.",
                      "default": "human",
                    },
                  "arguments_type":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/EvaluatorArgumentsType",
                          },
                        ],
                      "title": "Arguments type",
                      "description": "Whether this evaluator is target-free or target-required.",
                    },
                  "return_type":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/EvaluatorReturnTypeEnum",
                          },
                        ],
                      "title": "Return type",
                      "description": "The type of the return value of the evaluator.",
                    },
                },
              "type": "object",
              "required":
                [
                  "id",
                  "evaluator_id",
                  "evaluator",
                  "status",
                  "num_logs",
                  "last_used_at",
                  "created_at",
                  "updated_at",
                  "arguments_type",
                  "return_type",
                ],
              "title": "HumanEvaluatorVersionResponse",
              "description": "Base type that all Version Responses should inherit from.",
            },
          "ImageChatContent":
            {
              "properties":
                {
                  "type":
                    {
                      "type": "string",
                      "enum": ["image_url"],
                      "title": "Type",
                    },
                  "image_url":
                    {
                      "allOf": [{ "$ref": "#/components/schemas/ImageUrl" }],
                      "title": "Image URL",
                      "description": "The message's image content.",
                    },
                },
              "type": "object",
              "required": ["type", "image_url"],
              "title": "ImageChatContent",
            },
          "ImageChatContentDict":
            {
              "properties":
                {
                  "type":
                    {
                      "type": "string",
                      "enum": ["image_url"],
                      "title": "Type",
                    },
                  "image_url": { "$ref": "#/components/schemas/ImageUrlDict" },
                },
              "type": "object",
              "required": ["type", "image_url"],
              "title": "ImageChatContentDict",
            },
          "ImageUrl":
            {
              "properties":
                {
                  "url":
                    {
                      "type": "string",
                      "title": "URL",
                      "description": "Either a URL of the image or the base64 encoded image data.",
                    },
                  "detail":
                    {
                      "type": "string",
                      "enum": ["high", "low", "auto"],
                      "title": "Image detail level",
                      "description": "Specify the detail level of the image provided to the model. For more details see: https://platform.openai.com/docs/guides/vision/low-or-high-fidelity-image-understanding",
                    },
                },
              "type": "object",
              "required": ["url"],
              "title": "ImageUrl",
            },
          "ImageUrlDict":
            {
              "properties":
                {
                  "url": { "type": "string", "title": "Url" },
                  "detail": { "type": "string", "title": "Detail" },
                },
              "type": "object",
              "required": ["url", "detail"],
              "title": "ImageUrlDict",
            },
          "LLMEvaluatorVersionResponse":
            {
              "properties":
                {
                  "id":
                    {
                      "type": "string",
                      "title": "Evaluator Version ID",
                      "description": "Unique identifier for the Evaluator Version. Starts with `evv_`.",
                    },
                  "evaluator_id":
                    {
                      "type": "string",
                      "title": "Evaluator ID",
                      "description": "Unique identifier for the Evaluator that this Evaluator Version belongs to. Starts with `ev_`.",
                    },
                  "evaluator":
                    {
                      "$ref": "#/components/schemas/EvaluatorVersionEvaluatorResponse",
                    },
                  "commit_message":
                    {
                      "type": "string",
                      "title": "Commit message",
                      "description": "Message describing the changes made.",
                    },
                  "status":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/VersionStatus" }],
                      "title": "Status",
                      "description": "The status of the Evaluator Version.",
                    },
                  "type":
                    {
                      "type": "string",
                      "enum": ["evaluator"],
                      "title": "Type",
                      "default": "evaluator",
                    },
                  "created_by": { "$ref": "#/components/schemas/UserResponse" },
                  "num_logs": { "type": "integer", "title": "Num Logs" },
                  "last_used_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Last Used At",
                    },
                  "created_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Created At",
                    },
                  "updated_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Updated At",
                    },
                  "evaluator_type":
                    {
                      "type": "string",
                      "enum": ["llm"],
                      "title": "Evaluator type",
                      "description": "The type of the evaluator.",
                      "default": "llm",
                    },
                  "prompt":
                    {
                      "anyOf":
                        [
                          {
                            "$ref": "#/components/schemas/CreatePromptCompletionRequest",
                          },
                          {
                            "$ref": "#/components/schemas/CreatePromptChatRequest",
                          },
                        ],
                      "title": "Prompt parameters",
                      "description": "The prompt parameters used to generate.",
                    },
                  "arguments_type":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/EvaluatorArgumentsType",
                          },
                        ],
                      "title": "Arguments type",
                      "description": "Whether this evaluator is target-free or target-required.",
                    },
                  "return_type":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/EvaluatorReturnTypeEnum",
                          },
                        ],
                      "title": "Return type",
                      "description": "The type of the return value of the evaluator.",
                    },
                },
              "type": "object",
              "required":
                [
                  "id",
                  "evaluator_id",
                  "evaluator",
                  "status",
                  "num_logs",
                  "last_used_at",
                  "created_at",
                  "updated_at",
                  "arguments_type",
                  "return_type",
                ],
              "title": "LLMEvaluatorVersionResponse",
              "description": "Base type that all Version Responses should inherit from.",
            },
          "LabelSentiment":
            {
              "type": "string",
              "enum": ["positive", "negative", "neutral", "unset"],
              "title": "LabelSentiment",
              "description": "How a label should be treated in calculating Version performance.\n\nUsed by a File's PAPV (Positive Action Per View) metric.",
            },
          "ListDatasetVersionsResponse":
            {
              "properties":
                {
                  "records":
                    {
                      "items":
                        {
                          "$ref": "#/components/schemas/DatasetVersionResponse",
                        },
                      "type": "array",
                      "title": "Records",
                      "description": "The list of Dataset Versions for this.",
                    },
                },
              "type": "object",
              "required": ["records"],
              "title": "ListDatasetVersionsResponse",
            },
          "ListEvaluatorVersionsResponse":
            {
              "properties":
                {
                  "records":
                    {
                      "items":
                        {
                          "$ref": "#/components/schemas/EvaluatorVersionResponse",
                        },
                      "type": "array",
                      "title": "Records",
                      "description": "The list of Evaluator Versions associated to the Evaluator.",
                    },
                },
              "type": "object",
              "required": ["records"],
              "title": "ListEvaluatorVersionsResponse",
            },
          "ListPromptVersionsResponse":
            {
              "properties":
                {
                  "records":
                    {
                      "items":
                        {
                          "$ref": "#/components/schemas/PromptVersionResponse",
                        },
                      "type": "array",
                      "title": "Records",
                      "description": "The list of Prompt Versions associated to the Prompt.",
                    },
                },
              "type": "object",
              "required": ["records"],
              "title": "ListPromptVersionsResponse",
            },
          "ListToolVersionsResponse":
            {
              "properties":
                {
                  "records":
                    {
                      "items":
                        { "$ref": "#/components/schemas/ToolVersionResponse" },
                      "type": "array",
                      "title": "Records",
                      "description": "The list of Tool Versions associated to the Tool.",
                    },
                },
              "type": "object",
              "required": ["records"],
              "title": "ListToolVersionsResponse",
            },
          "ModelProviders":
            {
              "type": "string",
              "enum":
                [
                  "openai",
                  "openai_azure",
                  "ai21",
                  "mock",
                  "anthropic",
                  "langchain",
                  "cohere",
                  "replicate",
                  "google",
                  "groq",
                ],
              "title": "ModelProviders",
              "description": "Supported model providers.",
            },
          "ModifyDatasetVersionRequest":
            {
              "properties":
                {
                  "commit_message":
                    {
                      "type": "string",
                      "minLength": 1,
                      "title": "Commit message",
                      "description": "Message describing the changes made.",
                    },
                  "add_datapoints":
                    {
                      "items":
                        { "$ref": "#/components/schemas/DatapointRequest" },
                      "type": "array",
                      "title": "Added Datapoints",
                      "description": "The list of datapoints to add to this version of the dataset.",
                    },
                  "remove_datapoints":
                    {
                      "items": { "type": "string" },
                      "type": "array",
                      "title": "Removed Datapoints",
                      "description": "The list of datapoint hashes to remove from this version of the dataset.",
                    },
                },
              "type": "object",
              "required": ["commit_message"],
              "title": "ModifyDatasetVersionRequest",
            },
          "MonitoringEvaluatorResponse":
            {
              "properties":
                {
                  "version_reference":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/VersionReferenceResponse",
                          },
                        ],
                      "title": "Version reference",
                      "description": "The Evaluator Version used for monitoring. This can be a specific Version by ID, or a Version deployed to an Environment.",
                    },
                  "version":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/EvaluatorVersionResponse",
                          },
                        ],
                      "title": "Version",
                      "description": "The deployed Version.",
                    },
                  "state":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/MonitoringEvaluatorState",
                          },
                        ],
                      "title": "State",
                      "description": "The state of the Monitoring Evaluator. Either `active` or `inactive`",
                    },
                  "created_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Created At",
                    },
                  "updated_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Updated At",
                    },
                },
              "type": "object",
              "required":
                ["version_reference", "state", "created_at", "updated_at"],
              "title": "MonitoringEvaluatorResponse",
            },
          "MonitoringEvaluatorState":
            {
              "type": "string",
              "enum": ["active", "inactive"],
              "title": "MonitoringEvaluatorState",
              "description": "State of an evaluator connected to a file",
            },
          "PlatformAccessEnum":
            {
              "type": "string",
              "enum": ["superadmin", "supportadmin", "user"],
              "title": "PlatformAccessEnum",
              "description": "An enumeration.",
            },
          "PositiveLabel":
            {
              "properties":
                {
                  "type": { "type": "string", "title": "Feedback type" },
                  "value": { "type": "string", "title": "Feedback value" },
                },
              "type": "object",
              "required": ["type", "value"],
              "title": "PositiveLabel",
            },
          "PromptInputResponse":
            {
              "properties":
                {
                  "name":
                    {
                      "type": "string",
                      "title": "Input name",
                      "description": "Type of input.",
                    },
                },
              "type": "object",
              "required": ["name"],
              "title": "PromptInputResponse",
            },
          "PromptResponse":
            {
              "properties":
                {
                  "id":
                    {
                      "type": "string",
                      "title": "Prompt ID",
                      "description": "Unique identifier for this Prompt. Starts with `pr_`.",
                    },
                  "name":
                    {
                      "type": "string",
                      "title": "Prompt Name",
                      "description": "Name of the prompt.",
                    },
                  "type":
                    { "type": "string", "enum": ["prompt"], "title": "Type" },
                  "directory_id":
                    {
                      "type": "string",
                      "title": "Directory ID",
                      "description": "Unique identifier for the Directory the Prompt belongs to. Starts with `dir_`.",
                    },
                  "created_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Created At",
                    },
                  "updated_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Updated At",
                    },
                  "deployments":
                    {
                      "items":
                        {
                          "$ref": "#/components/schemas/DeploymentResponse_PromptVersionResponse_",
                        },
                      "type": "array",
                      "title": "Deployments",
                      "description": "The list of deployments associated to the Prompt.",
                    },
                },
              "type": "object",
              "required":
                [
                  "id",
                  "name",
                  "type",
                  "created_at",
                  "updated_at",
                  "deployments",
                ],
              "title": "PromptResponse",
              "description": "Base type that all File Responses should inherit from.\n\nAttributes defined here are common to all File Responses and should be overridden\nin the inheriting classes with documentation and appropriate Field definitions.",
            },
          "PromptVersionFeedbackStatsResponse":
            {
              "properties":
                {
                  "feedback_type_id":
                    { "type": "integer", "title": "Feedback Type Id" },
                  "feedback_type":
                    { "type": "string", "title": "Feedback Type" },
                  "feedback_value":
                    { "type": "string", "title": "Feedback Value" },
                  "feedback_count":
                    { "type": "integer", "title": "Feedback Count" },
                },
              "type": "object",
              "required":
                [
                  "feedback_type_id",
                  "feedback_type",
                  "feedback_value",
                  "feedback_count",
                ],
              "title": "PromptVersionFeedbackStatsResponse",
            },
          "PromptVersionPromptResponse":
            {
              "properties":
                {
                  "id":
                    {
                      "type": "string",
                      "title": "Prompt ID",
                      "description": "Unique identifier for this Prompt. Starts with `pr_`.",
                    },
                  "name":
                    {
                      "type": "string",
                      "title": "Prompt Name",
                      "description": "Name of the prompt.",
                    },
                  "type":
                    { "type": "string", "enum": ["prompt"], "title": "Type" },
                  "directory_id":
                    {
                      "type": "string",
                      "title": "Directory ID",
                      "description": "Unique identifier for the Directory the Prompt belongs to. Starts with `dir_`.",
                    },
                  "created_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Created At",
                    },
                  "updated_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Updated At",
                    },
                },
              "type": "object",
              "required": ["id", "name", "type", "created_at", "updated_at"],
              "title": "PromptVersionPromptResponse",
            },
          "PromptVersionResponse":
            {
              "oneOf":
                [
                  { "$ref": "#/components/schemas/ChatPromptVersionResponse" },
                  {
                    "$ref": "#/components/schemas/CompletionPromptVersionResponse",
                  },
                ],
              "title": "PromptVersionResponse",
              "discriminator":
                {
                  "propertyName": "endpoint",
                  "mapping":
                    {
                      "chat": "#/components/schemas/ChatPromptVersionResponse",
                      "complete": "#/components/schemas/CompletionPromptVersionResponse",
                    },
                },
            },
          "PromptVersionToolResponse":
            {
              "properties":
                {
                  "id":
                    {
                      "type": "string",
                      "title": "Tool ID",
                      "description": "The ID of the tool. Starts with either tlv_ or tl_.",
                    },
                  "name":
                    {
                      "type": "string",
                      "title": "Name",
                      "description": "Name for the tool referenced by the model.",
                    },
                  "description":
                    {
                      "type": "string",
                      "title": "Description",
                      "description": "Description of the tool referenced by the model",
                    },
                  "parameters":
                    {
                      "type": "object",
                      "title": "Run arguments schema.",
                      "description": "Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/",
                    },
                  "source":
                    {
                      "type": "string",
                      "title": "Origin",
                      "description": "The origin of the tool",
                    },
                },
              "type": "object",
              "required": ["name"],
              "title": "PromptVersionToolResponse",
            },
          "PythonEvaluatorVersionResponse":
            {
              "properties":
                {
                  "id":
                    {
                      "type": "string",
                      "title": "Evaluator Version ID",
                      "description": "Unique identifier for the Evaluator Version. Starts with `evv_`.",
                    },
                  "evaluator_id":
                    {
                      "type": "string",
                      "title": "Evaluator ID",
                      "description": "Unique identifier for the Evaluator that this Evaluator Version belongs to. Starts with `ev_`.",
                    },
                  "evaluator":
                    {
                      "$ref": "#/components/schemas/EvaluatorVersionEvaluatorResponse",
                    },
                  "commit_message":
                    {
                      "type": "string",
                      "title": "Commit message",
                      "description": "Message describing the changes made.",
                    },
                  "status":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/VersionStatus" }],
                      "title": "Status",
                      "description": "The status of the Evaluator Version.",
                    },
                  "type":
                    {
                      "type": "string",
                      "enum": ["evaluator"],
                      "title": "Type",
                      "default": "evaluator",
                    },
                  "created_by": { "$ref": "#/components/schemas/UserResponse" },
                  "num_logs": { "type": "integer", "title": "Num Logs" },
                  "last_used_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Last Used At",
                    },
                  "created_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Created At",
                    },
                  "updated_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Updated At",
                    },
                  "evaluator_type":
                    {
                      "type": "string",
                      "enum": ["python"],
                      "title": "Evaluator type",
                      "description": "The type of the evaluator.",
                      "default": "python",
                    },
                  "code":
                    {
                      "type": "string",
                      "title": "Code",
                      "description": "The code for the evaluator. This code will be executed in a sandboxed environment.",
                    },
                  "arguments_type":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/EvaluatorArgumentsType",
                          },
                        ],
                      "title": "Arguments type",
                      "description": "Whether this evaluator is target-free or target-required.",
                    },
                  "return_type":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/EvaluatorReturnTypeEnum",
                          },
                        ],
                      "title": "Return type",
                      "description": "The type of the return value of the evaluator.",
                    },
                },
              "type": "object",
              "required":
                [
                  "id",
                  "evaluator_id",
                  "evaluator",
                  "status",
                  "num_logs",
                  "last_used_at",
                  "created_at",
                  "updated_at",
                  "arguments_type",
                  "return_type",
                ],
              "title": "PythonEvaluatorVersionResponse",
              "description": "Base type that all Version Responses should inherit from.",
            },
          "ResponseFormat":
            {
              "properties":
                {
                  "type":
                    {
                      "type": "string",
                      "enum": ["json_object"],
                      "title": "Type",
                    },
                },
              "type": "object",
              "required": ["type"],
              "title": "ResponseFormat",
              "description": "Response format of the model.",
            },
          "TextChatContent":
            {
              "properties":
                {
                  "type":
                    { "type": "string", "enum": ["text"], "title": "Type" },
                  "text":
                    {
                      "type": "string",
                      "title": "Text",
                      "description": "The message's text content.",
                    },
                },
              "type": "object",
              "required": ["type", "text"],
              "title": "TextChatContent",
            },
          "TextChatContentDict":
            {
              "properties":
                {
                  "type":
                    { "type": "string", "enum": ["text"], "title": "Type" },
                  "text": { "type": "string", "title": "Text" },
                },
              "type": "object",
              "required": ["type", "text"],
              "title": "TextChatContentDict",
            },
          "TimeUnit":
            {
              "type": "string",
              "enum": ["day", "week", "month"],
              "title": "TimeUnit",
              "description": "An enumeration.",
            },
          "ToolCall":
            {
              "properties":
                {
                  "id": { "type": "string", "title": "Id" },
                  "type":
                    {
                      "$ref": "#/components/schemas/src__domain__chat_types__enums__ToolType",
                    },
                  "function": { "$ref": "#/components/schemas/FunctionTool" },
                },
              "type": "object",
              "required": ["id", "type", "function"],
              "title": "ToolCall",
              "description": "A tool call to be made.",
            },
          "ToolCallDict":
            {
              "properties":
                {
                  "id": { "type": "string", "title": "Id" },
                  "type":
                    {
                      "$ref": "#/components/schemas/src__domain__chat_types__enums__ToolType",
                    },
                  "function":
                    { "$ref": "#/components/schemas/FunctionToolDict" },
                },
              "type": "object",
              "required": ["id", "type", "function"],
              "title": "ToolCallDict",
            },
          "ToolInputResponse":
            {
              "properties":
                {
                  "name":
                    {
                      "type": "string",
                      "title": "Input name",
                      "description": "Type of input.",
                    },
                },
              "type": "object",
              "required": ["name"],
              "title": "ToolInputResponse",
            },
          "ToolResponse":
            {
              "properties":
                {
                  "id":
                    {
                      "type": "string",
                      "title": "Tool ID",
                      "description": "Unique identifier for Tool. Starts with `tl_`.",
                    },
                  "name":
                    {
                      "type": "string",
                      "title": "Tool Name",
                      "description": "Name of the tool.",
                    },
                  "type":
                    { "type": "string", "enum": ["tool"], "title": "Type" },
                  "directory_id":
                    {
                      "type": "string",
                      "title": "Directory ID",
                      "description": "Unique identifier for the Directory the Tool belongs to. Starts with `dir_`.",
                    },
                  "created_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Created At",
                    },
                  "updated_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Updated At",
                    },
                  "tool_type":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/src__domain__files__tool__ToolType",
                          },
                        ],
                      "title": "Tool Type",
                      "description": "Type of Tool if runnable by Humanloop. Otherwise `null`.",
                    },
                  "deployments":
                    {
                      "items":
                        {
                          "$ref": "#/components/schemas/DeploymentResponse_ToolVersionResponse_",
                        },
                      "type": "array",
                      "title": "Deployments",
                      "description": "The list of deployments associated to the Tool.",
                    },
                },
              "type": "object",
              "required":
                [
                  "id",
                  "name",
                  "type",
                  "created_at",
                  "updated_at",
                  "deployments",
                ],
              "title": "ToolResponse",
              "description": "Base type that all File Responses should inherit from.\n\nAttributes defined here are common to all File Responses and should be overridden\nin the inheriting classes with documentation and appropriate Field definitions.",
            },
          "ToolTemplateResponse":
            {
              "properties":
                {
                  "name":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/src__domain__files__tool__ToolType",
                          },
                        ],
                      "title": "Name",
                      "description": "Name of Tool if runnable by Humanloop.",
                    },
                  "description":
                    {
                      "type": "string",
                      "title": "Description",
                      "description": "Description of the Tool.",
                    },
                  "signature":
                    {
                      "type": "string",
                      "title": "Signature",
                      "description": "Signature of the Tool.",
                    },
                },
              "type": "object",
              "required": ["name", "description"],
              "title": "ToolTemplateResponse",
            },
          "ToolVersionResponse":
            {
              "properties":
                {
                  "tool_id":
                    {
                      "type": "string",
                      "title": "Tool ID",
                      "description": "Unique identifier for the Tool that this Tool Version belongs to. Starts with `tl_`.",
                    },
                  "commit_message":
                    {
                      "type": "string",
                      "title": "Commit message",
                      "description": "Message describing the changes made.",
                    },
                  "name":
                    {
                      "type": "string",
                      "title": "Name",
                      "description": "Name for the Tool referenced by the model.",
                    },
                  "description":
                    {
                      "type": "string",
                      "title": "Description",
                      "description": "Description of the Tool referenced by the model",
                    },
                  "parameters":
                    {
                      "type": "object",
                      "title": "Tool parameters",
                      "description": "Parameters needed to run the Tool, defined in JSON Schema format: https://json-schema.org/",
                    },
                  "source_code":
                    {
                      "type": "string",
                      "title": "Source Code",
                      "description": "Code source of the Tool.",
                    },
                  "setup_values":
                    {
                      "type": "object",
                      "title": "Setup values",
                      "description": "Values needed to setup the Tool, defined in JSON Schema format: https://json-schema.org/",
                    },
                  "id":
                    {
                      "type": "string",
                      "title": "Tool Version ID",
                      "description": "Unique identifier for the Tool Version. Starts with `tlv_`.",
                    },
                  "tool":
                    { "$ref": "#/components/schemas/ToolVersionToolResponse" },
                  "signature":
                    {
                      "type": "string",
                      "title": "Signature",
                      "description": "The function signature of the tool when being called.",
                    },
                  "status":
                    {
                      "allOf":
                        [{ "$ref": "#/components/schemas/VersionStatus" }],
                      "title": "Status",
                      "description": "The status of the Tool Version.",
                    },
                  "type":
                    {
                      "type": "string",
                      "enum": ["tool"],
                      "title": "Type",
                      "default": "tool",
                    },
                  "created_by": { "$ref": "#/components/schemas/UserResponse" },
                  "num_logs": { "type": "integer", "title": "Num Logs" },
                  "last_used_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Last Used At",
                    },
                  "created_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Created At",
                    },
                  "updated_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Updated At",
                    },
                },
              "type": "object",
              "required":
                [
                  "tool_id",
                  "name",
                  "id",
                  "tool",
                  "status",
                  "num_logs",
                  "last_used_at",
                  "created_at",
                  "updated_at",
                ],
              "title": "ToolVersionResponse",
              "description": "Base type that all Version Responses should inherit from.",
            },
          "ToolVersionToolResponse":
            {
              "properties":
                {
                  "id":
                    {
                      "type": "string",
                      "title": "Tool ID",
                      "description": "Unique identifier for Tool. Starts with `tl_`.",
                    },
                  "name":
                    {
                      "type": "string",
                      "title": "Tool Name",
                      "description": "Name of the tool.",
                    },
                  "type":
                    { "type": "string", "enum": ["tool"], "title": "Type" },
                  "directory_id":
                    {
                      "type": "string",
                      "title": "Directory ID",
                      "description": "Unique identifier for the Directory the Tool belongs to. Starts with `dir_`.",
                    },
                  "created_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Created At",
                    },
                  "updated_at":
                    {
                      "type": "string",
                      "format": "date-time",
                      "title": "Updated At",
                    },
                  "tool_type":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/src__domain__files__tool__ToolType",
                          },
                        ],
                      "title": "Tool Type",
                      "description": "Type of Tool if runnable by Humanloop. Otherwise `null`.",
                    },
                },
              "type": "object",
              "required": ["id", "name", "type", "created_at", "updated_at"],
              "title": "ToolVersionToolResponse",
            },
          "UpdateDatasetRequest":
            {
              "properties":
                {
                  "name":
                    {
                      "type": "string",
                      "title": "Dataset Name",
                      "description": "Name of the Dataset. This has to be unique within your Organization.",
                    },
                  "directory_id":
                    {
                      "type": "string",
                      "title": "Directory ID",
                      "description": "Unique identifier for the Directory to move Dataset to. Starts with `dir_`.",
                    },
                },
              "type": "object",
              "title": "UpdateDatasetRequest",
            },
          "UpdateDeploymentRequest":
            {
              "properties":
                {
                  "deployments":
                    {
                      "items":
                        { "$ref": "#/components/schemas/DeploymentRequest" },
                      "type": "array",
                      "title": "Deployments",
                      "description": "The list of deployments to update.",
                    },
                },
              "type": "object",
              "required": ["deployments"],
              "title": "UpdateDeploymentRequest",
            },
          "UpdateEvaluatorRequest":
            {
              "properties":
                {
                  "name":
                    {
                      "type": "string",
                      "title": "Evaluator Name",
                      "description": "Name of the Evaluator. This has to be unique within your Organization.",
                    },
                  "directory_id":
                    {
                      "type": "string",
                      "title": "Directory ID",
                      "description": "Unique identifier for the Directory to move Evaluator to. Starts with `dir_`.",
                    },
                },
              "type": "object",
              "title": "UpdateEvaluatorRequest",
            },
          "UpdatePromptRequest":
            {
              "properties":
                {
                  "name":
                    {
                      "type": "string",
                      "title": "Prompt Name",
                      "description": "Name of the Prompt. This has to be unique within your Organization.",
                    },
                  "directory_id":
                    {
                      "type": "string",
                      "title": "Directory ID",
                      "description": "Unique identifier for the Directory to move Prompt to. Starts with `dir_`.",
                    },
                },
              "type": "object",
              "title": "UpdatePromptRequest",
            },
          "UpdateToolRequest":
            {
              "properties":
                {
                  "name":
                    {
                      "type": "string",
                      "title": "Tool Name",
                      "description": "Name of the Tool. This has to be unique within your Organization.",
                    },
                  "directory_id":
                    {
                      "type": "string",
                      "title": "Directory ID",
                      "description": "Unique identifier for the Directory to move Tool to. Starts with `dir_`.",
                    },
                  "tool_type":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/src__domain__files__tool__ToolType",
                          },
                        ],
                      "title": "Tool Type",
                      "description": "Type of Tool if runnable by Humanloop. Otherwise `null`.",
                    },
                },
              "type": "object",
              "title": "UpdateToolRequest",
            },
          "UserResponse":
            {
              "properties":
                {
                  "id":
                    {
                      "type": "string",
                      "title": "User ID",
                      "description": "Unique identifier for User. Starts with `usr`.",
                    },
                  "email_address":
                    {
                      "type": "string",
                      "title": "Email address",
                      "description": "The User's email address.",
                    },
                  "full_name":
                    {
                      "type": "string",
                      "title": "Full name",
                      "description": "The User's full name.",
                    },
                },
              "type": "object",
              "required": ["id", "email_address"],
              "title": "UserResponse",
            },
          "ValidationError":
            {
              "properties":
                {
                  "loc":
                    {
                      "items":
                        {
                          "anyOf":
                            [{ "type": "string" }, { "type": "integer" }],
                        },
                      "type": "array",
                      "title": "Location",
                    },
                  "msg": { "type": "string", "title": "Message" },
                  "type": { "type": "string", "title": "Error Type" },
                },
              "type": "object",
              "required": ["loc", "msg", "type"],
              "title": "ValidationError",
            },
          "VersionDeploymentResponse":
            {
              "properties":
                {
                  "file":
                    {
                      "anyOf":
                        [
                          { "$ref": "#/components/schemas/PromptResponse" },
                          { "$ref": "#/components/schemas/ToolResponse" },
                          { "$ref": "#/components/schemas/DatasetResponse" },
                          { "$ref": "#/components/schemas/EvaluatorResponse" },
                        ],
                      "title": "File",
                      "description": "The File that the deployed Version belongs to.",
                    },
                  "environment":
                    {
                      "allOf":
                        [
                          {
                            "$ref": "#/components/schemas/EnvironmentResponse",
                          },
                        ],
                      "title": "Environment",
                      "description": "The Environment that the Version is deployed to.",
                    },
                  "type":
                    {
                      "type": "string",
                      "enum": ["environment"],
                      "title": "Type",
                    },
                },
              "type": "object",
              "required": ["file", "environment", "type"],
              "title": "VersionDeploymentResponse",
              "description": "A variable reference to the Version deployed to an Environment",
            },
          "VersionEvaluatorAggregateResponse":
            {
              "properties":
                {
                  "version_id": { "type": "string", "title": "Version Id" },
                  "evaluator_id": { "type": "string", "title": "Evaluator Id" },
                  "evaluator_version_id":
                    { "type": "string", "title": "Evaluator Version Id" },
                  "aggregate_value":
                    { "type": "number", "title": "Aggregate Value" },
                },
              "type": "object",
              "required":
                ["version_id", "evaluator_id", "evaluator_version_id"],
              "title": "VersionEvaluatorAggregateResponse",
            },
          "VersionIdResponse":
            {
              "properties":
                {
                  "version":
                    {
                      "anyOf":
                        [
                          {
                            "$ref": "#/components/schemas/PromptVersionResponse",
                          },
                          {
                            "$ref": "#/components/schemas/ToolVersionResponse",
                          },
                          {
                            "$ref": "#/components/schemas/DatasetVersionResponse",
                          },
                          {
                            "$ref": "#/components/schemas/EvaluatorVersionResponse",
                          },
                        ],
                      "title": "Version",
                      "description": "The specific Version being referenced.",
                    },
                  "type":
                    { "type": "string", "enum": ["version"], "title": "Type" },
                },
              "type": "object",
              "required": ["version", "type"],
              "title": "VersionIdResponse",
              "description": "A reference to a specific Version by its ID",
            },
          "VersionReferenceResponse":
            {
              "oneOf":
                [
                  { "$ref": "#/components/schemas/VersionDeploymentResponse" },
                  { "$ref": "#/components/schemas/VersionIdResponse" },
                ],
              "title": "VersionReferenceResponse",
              "discriminator":
                {
                  "propertyName": "type",
                  "mapping":
                    {
                      "environment": "#/components/schemas/VersionDeploymentResponse",
                      "version": "#/components/schemas/VersionIdResponse",
                    },
                },
            },
          "VersionStatus":
            {
              "type": "string",
              "enum": ["uncommitted", "committed", "deleted"],
              "title": "VersionStatus",
              "description": "An enumeration.",
            },
          "src__domain__chat_types__enums__ToolType":
            {
              "type": "string",
              "enum": ["function"],
              "title": "ToolType",
              "description": "The type of tool to call.",
            },
          "src__domain__files__tool__ToolType":
            {
              "type": "string",
              "enum":
                [
                  "pinecone_search",
                  "google",
                  "mock",
                  "snippet",
                  "json_schema",
                  "get_api_call",
                ],
              "title": "ToolType",
              "description": "Type of tool.",
            },
        },
      "securitySchemes":
        {
          "APIKeyHeader":
            {
              "type": "apiKey",
              "in": "header",
              "name": "X-API-KEY",
              "description": "The Humanloop API uses API keys for authentication. Visit your\n[API Keys](https://app.humanloop.com/account/api-keys) page to retrieve the\nAPI key you'll use in your requests.\n\nThis key allows full access and control over your projects, so keep this secret\nand take care to not expose it in any client-side code.\n\nTo use your API key, include it under the `X-API-KEY` header in your HTTP request.\n\n```bash\ncurl https://api.humanloop.com/v5/projects -H 'X-API-KEY: YOUR_API_KEY'\n```\n\nIf you're using the Python SDK, initialize the client with your API key before\nusing other SDK methods:\n\n```python\nfrom humanloop import Humanloop\nhumanloop = Humanloop(api_key=\"YOUR_API_KEY\")\n```\n\nIf you're using the TypeScript SDK, initialize the client with your API key before\nusing other SDK methods:\n\n```js\nimport { Humanloop } from \"humanloop\";\nconst humanloop = new Humanloop({apiKey: \"YOUR_API_KEY\"});\n```",
            },
        },
    },
  "x-readme": { "samples-languages": ["python", "javascript", "curl"] },
  "tags":
    [
      {
        "name": "Authentication",
        "description": "The Humanloop API uses API keys for authentication. Visit your\n[API Keys](https://app.humanloop.com/account/api-keys) page to retrieve the\nAPI key you'll use in your requests.\n\nThis key allows full access and control over your projects, so keep this secret\nand take care to not expose it in any client-side code.\n\nTo use your API key, include it under the `X-API-KEY` header in your HTTP request.\n\n```bash\ncurl https://api.humanloop.com/v5/projects -H 'X-API-KEY: YOUR_API_KEY'\n```\n\nIf you're using the Python SDK, initialize the client with your API key before\nusing other SDK methods:\n\n```python\nfrom humanloop import Humanloop\nhumanloop = Humanloop(api_key=\"YOUR_API_KEY\")\n```\n\nIf you're using the TypeScript SDK, initialize the client with your API key before\nusing other SDK methods:\n\n```js\nimport { Humanloop } from \"humanloop\";\nconst humanloop = new Humanloop({apiKey: \"YOUR_API_KEY\"});\n```",
      },
    ],
}
