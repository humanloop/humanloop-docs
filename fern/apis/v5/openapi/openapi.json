{
  "openapi": "3.1.0",
  "info": {
    "title": "Humanloop API",
    "description": "The Humanloop API allows you to interact with Humanloop from your product or service.\n\nYou can do this through HTTP requests from any language or via our official Python or TypeScript SDK.\n\nTo install the official [Python SDK](https://pypi.org/project/humanloop/), run the following command:\n\n```bash\npip install humanloop\n```\n\nTo install the official [TypeScript SDK](https://www.npmjs.com/package/humanloop), run the following command:\n\n```bash\nnpm i humanloop\n```\n\n---\n\nGuides and further details about key concepts can be found in [our docs](https://docs.humanloop.com/).",
    "version": "5.0.0"
  },
  "servers": [
    {
      "url": "https://api.humanloop.com/v5",
      "description": "Production server"
    }
  ],
  "paths": {
    "/prompts": {
      "get": {
        "tags": ["Prompts"],
        "summary": "List ",
        "description": "Get a list of Prompts.",
        "operationId": "Prompts_list",
        "parameters": [
          {
            "description": "Page number for pagination.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1.0,
              "title": "Page number",
              "description": "Page number for pagination.",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "description": "Page size for pagination. Number of Prompts to fetch.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0.0,
              "title": "Page size",
              "description": "Page size for pagination. Number of Prompts to fetch.",
              "default": 10
            },
            "name": "size",
            "in": "query"
          },
          {
            "description": "Case-insensitive filter for Prompt name.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Prompt name filter",
              "description": "Case-insensitive filter for Prompt name."
            },
            "name": "name",
            "in": "query"
          },
          {
            "description": "Case-insensitive filter for users in the Prompt. This filter matches against both email address and name of users.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "User filter",
              "description": "Case-insensitive filter for users in the Prompt. This filter matches against both email address and name of users."
            },
            "name": "user_filter",
            "in": "query"
          },
          {
            "description": "Field to sort Prompts by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/ProjectSortBy" }],
              "title": "Sort by",
              "description": "Field to sort Prompts by",
              "default": "created_at"
            },
            "name": "sort_by",
            "in": "query"
          },
          {
            "description": "Direction to sort by.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/SortOrder" }],
              "title": "Sort order",
              "description": "Direction to sort by.",
              "default": "desc"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListPrompts" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      },
      "post": {
        "tags": ["Prompts"],
        "summary": "Create Prompt",
        "description": "Create a Prompt.\n\nWhen you call this endpoint with the same Prompt name but different parameters,\na new version of the Prompt will be created.\n\nIf you provide a commit message, then the new version will be committed;\notherwise it will be uncommitted. If you try to commit an already committed version,\nan exception will be raised.",
        "operationId": "Prompts_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PromptRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PromptResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/prompts/{id}": {
      "get": {
        "tags": ["Prompts"],
        "summary": "Get Prompt",
        "description": "Retrieve the Prompt with the given ID.",
        "operationId": "Prompts_get",
        "parameters": [
          {
            "description": "Unique identifier for Prompt.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt ID",
              "description": "Unique identifier for Prompt."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "A specific Version Id  of the Prompt to retrieve.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version Id",
              "description": "A specific Version Id  of the Prompt to retrieve."
            },
            "name": "version_id",
            "in": "query"
          },
          {
            "description": "An environment tag to retrieve a deployed Version from.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Environment",
              "description": "An environment tag to retrieve a deployed Version from."
            },
            "name": "environment",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PromptResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      },
      "delete": {
        "tags": ["Prompts"],
        "summary": "Delete Prompt",
        "description": "Delete the Prompt with the given ID.",
        "operationId": "Prompts_delete",
        "parameters": [
          {
            "description": "Unique identifier for Prompt.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt ID",
              "description": "Unique identifier for Prompt."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      },
      "patch": {
        "tags": ["Prompts"],
        "summary": "Update Prompt",
        "description": "Update the Prompt with the given ID.",
        "operationId": "Prompts_update",
        "parameters": [
          {
            "description": "Unique identifier for Prompt.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt ID",
              "description": "Unique identifier for Prompt."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdatePromptRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PromptResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/prompts/{id}/versions": {
      "get": {
        "tags": ["Prompts"],
        "summary": "List Versions",
        "description": "Get a list of the Prompt Versions for a Prompt.",
        "operationId": "Prompts_listVersions",
        "parameters": [
          {
            "description": "Unique identifier for the Prompt.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt ID",
              "description": "Unique identifier for the Prompt."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/VersionStatus" }],
              "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned."
            },
            "name": "status",
            "in": "query"
          },
          {
            "description": "Filter versions by environment tag. If no environment is provided, all versions are returned.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Environment",
              "description": "Filter versions by environment tag. If no environment is provided, all versions are returned."
            },
            "name": "environment",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "boolean", "title": "Evaluation Aggregates" },
            "name": "evaluation_aggregates",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListPrompts" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/prompts/{id}/versions/{version_id}/deploy": {
      "post": {
        "tags": ["Prompts"],
        "summary": "Deploy",
        "description": "Deploy Prompt to Environment.\n\nSet the deployed Version for the specified Environment. This Prompt Version\nwill be used for calls made to the Prompt in this Environment.",
        "operationId": "deploy_prompts__id__versions__version_id__deploy_post",
        "parameters": [
          {
            "description": "Unique identifier for Prompt.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt ID",
              "description": "Unique identifier for Prompt."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the specific version of the Prompt.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "Unique identifier for the specific version of the Prompt."
            },
            "name": "version_id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the Environment to deploy the Version to.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Environment ID",
              "description": "Unique identifier for the Environment to deploy the Version to."
            },
            "name": "environment_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PromptResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/prompts/{id}/versions/{version_id}/commit": {
      "post": {
        "tags": ["Prompts"],
        "summary": "Commit",
        "description": "Commit the Prompt Version with the given ID.",
        "operationId": "Prompts_commit",
        "parameters": [
          {
            "description": "Unique identifier for Prompt.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt ID",
              "description": "Unique identifier for Prompt."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the specific version of the Prompt.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "Unique identifier for the specific version of the Prompt."
            },
            "name": "version_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CommitPromptRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PromptResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/prompts/{id}/log": {
      "post": {
        "tags": ["Prompts"],
        "summary": "Log",
        "description": "Log to a Prompt.\n\nYou can use query parameters version_id, or environment, to target\nan existing version of the Prompt. Otherwise the default deployed version will be chosen.\n\nInstead of targeting an existing version explicitly, you can instead pass in\nPrompt details in the request body. In this case, we will check if the details correspond\nto an existing version of the Prompt, if not we will create a new version. This is helpful\nin the case where you are storing or deriving your Prompt details in code.",
        "operationId": "Prompts_log",
        "parameters": [
          {
            "description": "Unique identifier for Prompt.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt ID",
              "description": "Unique identifier for Prompt."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "A specific Version Id  of the Prompt to retrieve.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version Id",
              "description": "A specific Version Id  of the Prompt to retrieve."
            },
            "name": "version_id",
            "in": "query"
          },
          {
            "description": "An environment tag to retrieve a deployed Version from.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Environment",
              "description": "An environment tag to retrieve a deployed Version from."
            },
            "name": "environment",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PromptLogRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptLogResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/prompts/{id}/call": {
      "post": {
        "tags": ["Prompts"],
        "summary": "Call",
        "description": "Call a Prompt.\n\nCalling a Prompt subsequently calls the model provider before logging\nthe data to Humanloop.\n\nYou can use query parameters version_id, or environment, to target\nan existing version of the Prompt. Otherwise the default deployed version will be chosen.\n\nInstead of targeting an existing version explicitly, you can instead pass in\nPrompt details in the request body. In this case, we will check if the details correspond\nto an existing version of the Prompt, if not we will create a new version. This is helpful\nin the case where you are storing or deriving your Prompt details in code.",
        "operationId": "Prompts_call",
        "parameters": [
          {
            "description": "Unique identifier for Prompt.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt ID",
              "description": "Unique identifier for Prompt."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "A specific Version Id  of the Prompt to retrieve.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version Id",
              "description": "A specific Version Id  of the Prompt to retrieve."
            },
            "name": "version_id",
            "in": "query"
          },
          {
            "description": "An environment tag to retrieve a deployed Version from.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Environment",
              "description": "An environment tag to retrieve a deployed Version from."
            },
            "name": "environment",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PromptCallRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PromptResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/prompts/{id}/evaluators": {
      "post": {
        "tags": ["Prompts"],
        "summary": "Change Evaluators",
        "description": "Activate and deactivate Monitoring Evaluators for the Prompt.\n\nAn activated Monitoring Evaluator will automatically be run on all new Logs\nwithin the Prompt.",
        "operationId": "change_evaluators_prompts__id__evaluators_post",
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string", "title": "Id" },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluatorActivationDeactivationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PromptResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/tools/templates": {
      "get": {
        "tags": ["Tools"],
        "summary": "List Tool Templates",
        "operationId": "list_tool_templates_tools_templates_get",
        "parameters": [
          {
            "description": "Type of tool to return the template",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/src__domain__files__tool__ToolType"
                }
              ],
              "title": "Specific tool type template",
              "description": "Type of tool to return the template"
            },
            "name": "tool_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ToolTemplateResponse"
                  },
                  "type": "array",
                  "title": "Response List Tool Templates Tools Templates Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/tools": {
      "post": {
        "tags": ["Tools"],
        "summary": "Create A Tool",
        "description": "Create a Tool in an existing Directory. If no Directory is specified, the\nTool will be created in the Organization's root directory.",
        "operationId": "Tools_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateToolRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/src__external__app__models__v5__tools__tools__ToolResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/tools/{id}": {
      "get": {
        "tags": ["Tools"],
        "summary": "Retrieve A Tool",
        "description": "Retrieve the Tool with the given ID.",
        "operationId": "Tools_get",
        "parameters": [
          {
            "description": "Unique identifier for Tool. Starts with `tl_`.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tool ID",
              "description": "Unique identifier for Tool. Starts with `tl_`."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/src__external__app__models__v5__tools__tools__ToolResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      },
      "delete": {
        "tags": ["Tools"],
        "summary": "Delete A Tool",
        "description": "Delete the Tool with the given ID.",
        "operationId": "Tools_delete",
        "parameters": [
          {
            "description": "Unique identifier for Tool. Starts with `tl_`.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tool ID",
              "description": "Unique identifier for Tool. Starts with `tl_`."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      },
      "patch": {
        "tags": ["Tools"],
        "summary": "Update A Tool",
        "description": "Update the Tool with the given ID.",
        "operationId": "Tools_update",
        "parameters": [
          {
            "description": "Unique identifier for Tool. Starts with `tl_`.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tool ID",
              "description": "Unique identifier for Tool. Starts with `tl_`."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateToolRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/src__external__app__models__v5__tools__tools__ToolResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/tools/{id}/versions": {
      "get": {
        "tags": ["Tools"],
        "summary": "List Tool Versions",
        "description": "Get a list of the Tool Versions for a Tool.",
        "operationId": "Tools_list",
        "parameters": [
          {
            "description": "Unique identifier for Tool. Starts with `tl_`.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tool ID",
              "description": "Unique identifier for Tool. Starts with `tl_`."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Filter versions by status: 'uncommitted', 'committed''",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/VersionStatus" }],
              "description": "Filter versions by status: 'uncommitted', 'committed''",
              "default": "committed"
            },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "boolean", "title": "Evaluation Aggregates" },
            "name": "evaluation_aggregates",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListToolVersionsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/tools/versions": {
      "post": {
        "tags": ["Tools"],
        "summary": "Commit A Tool Version",
        "description": "Commit a new Tool Version for the Tool with the given ID.",
        "operationId": "ToolVersions_commit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateToolVersionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ToolVersionResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/tools/versions/{id}": {
      "get": {
        "tags": ["Tools"],
        "summary": "Retrieve A Tool Version",
        "description": "Retrieve the Tool Version with the given ID.",
        "operationId": "ToolVersions_get",
        "parameters": [
          {
            "description": "Unique identifier for Tool. Starts with `tl_`.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tool ID",
              "description": "Unique identifier for Tool. Starts with `tl_`."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ToolVersionResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/datasets": {
      "get": {
        "tags": ["Datasets"],
        "summary": "List ",
        "description": "Get a list of Datasets.",
        "operationId": "Datasets_list",
        "parameters": [
          {
            "description": "Page offset for pagination.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1.0,
              "title": "Page index",
              "description": "Page offset for pagination.",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "description": "Page size for pagination. Number of Datasets to fetch.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0.0,
              "title": "Page size",
              "description": "Page size for pagination. Number of Datasets to fetch.",
              "default": 10
            },
            "name": "size",
            "in": "query"
          },
          {
            "description": "Case-insensitive filter for Dataset name.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Dataset name filter",
              "description": "Case-insensitive filter for Dataset name."
            },
            "name": "name",
            "in": "query"
          },
          {
            "description": "Case-insensitive filter for users in the Dataset. This filter matches against both email address and name of users.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "User filter",
              "description": "Case-insensitive filter for users in the Dataset. This filter matches against both email address and name of users."
            },
            "name": "user_filter",
            "in": "query"
          },
          {
            "description": "Field to sort Datasets by",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/ProjectSortBy" }],
              "title": "Sort by",
              "description": "Field to sort Datasets by",
              "default": "created_at"
            },
            "name": "sort_by",
            "in": "query"
          },
          {
            "description": "Direction to sort by.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/SortOrder" }],
              "title": "Sort order",
              "description": "Direction to sort by.",
              "default": "desc"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedData_DatasetResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      },
      "post": {
        "tags": ["Datasets"],
        "summary": "Create Dataset",
        "description": "Create a Dataset.\n\nDataset have immutable versions. When you call this endpoint\nwith the same Dataset name but different parameters, a new version of\nthe Dataset will be created.\n\nIf you provide a commit message, then the new version will be committed;\notherwise it will be uncommitted. If you try to commit an already committed version,\nan exception will be raised.\n\nBy default, the new Dataset version will be set to the list of Datapoints provided in\nthe request.\nYou can create a new version by adding or removing Datapoints from an existing version\nby specifying `action` as `add` or `remove` respectively. In this case, you may specify\nthe `version_id` or `environment` query parameters to identify the existing version to base\nthe new version on. If neither is provided, the default deployed version will be used.\n\nHumanloop also deduplicates Datapoints. If you try to add a Datapoint that already\nexists, it will be ignored.",
        "operationId": "Datasets_create",
        "parameters": [
          {
            "description": "ID of the specific Dataset version to base the created Version on. Only used when `action` is `\"add\"` or `\"remove\"`.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "ID of the specific Dataset version to base the created Version on. Only used when `action` is `\"add\"` or `\"remove\"`."
            },
            "name": "version_id",
            "in": "query"
          },
          {
            "description": "An environment tag to identify a deployed Version to base the created Version on. Only used when `action` is `\"add\"` or `\"remove\"`.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Environment",
              "description": "An environment tag to identify a deployed Version to base the created Version on. Only used when `action` is `\"add\"` or `\"remove\"`."
            },
            "name": "environment",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/src__external__app__models__v5__datasets__DatasetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DatasetResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/datasets/{id}": {
      "get": {
        "tags": ["Datasets"],
        "summary": "Get Dataset",
        "description": "Retrieve the Dataset with the given ID.\n\nUnless `include_datapoints` is set to `true`, the response will not include\nthe Datapoints.\nUse the List Datapoints endpoint (`GET /{id}/datapoints`) to efficiently\nretrieve Datapoints for a large Dataset.",
        "operationId": "Datasets_get",
        "parameters": [
          {
            "description": "Unique identifier for Dataset.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset ID",
              "description": "Unique identifier for Dataset."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "A specific Version ID of the Dataset to retrieve.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version Id",
              "description": "A specific Version ID of the Dataset to retrieve."
            },
            "name": "version_id",
            "in": "query"
          },
          {
            "description": "An environment tag to retrieve a deployed Version from.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Environment",
              "description": "An environment tag to retrieve a deployed Version from."
            },
            "name": "environment",
            "in": "query"
          },
          {
            "description": "If set to `true`, include all Datapoints in the response. Defaults to `false`. Consider using the paginated List Datapoints endpoint instead.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Include Datapoints",
              "description": "If set to `true`, include all Datapoints in the response. Defaults to `false`. Consider using the paginated List Datapoints endpoint instead.",
              "default": false
            },
            "name": "include_datapoints",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DatasetResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      },
      "delete": {
        "tags": ["Datasets"],
        "summary": "Delete Dataset",
        "description": "Delete the Dataset with the given ID.",
        "operationId": "Datasets_delete",
        "parameters": [
          {
            "description": "Unique identifier for Dataset.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset ID",
              "description": "Unique identifier for Dataset."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      },
      "patch": {
        "tags": ["Datasets"],
        "summary": "Update Dataset",
        "description": "Update the Dataset with the given ID.",
        "operationId": "Datasets_update",
        "parameters": [
          {
            "description": "Unique identifier for Dataset.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset ID",
              "description": "Unique identifier for Dataset."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateDatasetRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DatasetResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/datasets/{id}/datapoints": {
      "get": {
        "tags": ["Datasets"],
        "summary": "List Datapoints",
        "description": "List all Datapoints for the Dataset with the given ID.",
        "operationId": "Datasets_listDatapoints",
        "parameters": [
          {
            "description": "Unique identifier for Dataset.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset ID",
              "description": "Unique identifier for Dataset."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "A specific Version ID of the Dataset to retrieve.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version Id",
              "description": "A specific Version ID of the Dataset to retrieve."
            },
            "name": "version_id",
            "in": "query"
          },
          {
            "description": "An environment tag to retrieve a deployed Version from.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Environment",
              "description": "An environment tag to retrieve a deployed Version from."
            },
            "name": "environment",
            "in": "query"
          },
          {
            "description": "Page number for pagination.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1.0,
              "title": "Page",
              "description": "Page number for pagination.",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "description": "Page size for pagination. Number of Datapoints to fetch.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0.0,
              "title": "Size",
              "description": "Page size for pagination. Number of Datapoints to fetch.",
              "default": 50
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedData_DatapointResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/datasets/{id}/versions": {
      "get": {
        "tags": ["Datasets"],
        "summary": "List Versions",
        "description": "Get a list of the versions for a Dataset.",
        "operationId": "Datasets_listVersions",
        "parameters": [
          {
            "description": "Unique identifier for the Dataset.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset ID",
              "description": "Unique identifier for the Dataset."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/VersionStatus" }],
              "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned."
            },
            "name": "status",
            "in": "query"
          },
          {
            "description": "Filter versions by environment tag. If no environment is provided, all versions are returned.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Environment",
              "description": "Filter versions by environment tag. If no environment is provided, all versions are returned."
            },
            "name": "environment",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "boolean", "title": "Evaluation Aggregates" },
            "name": "evaluation_aggregates",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ListDatasets" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/datasets/{id}/versions/{version_id}/deploy": {
      "post": {
        "tags": ["Datasets"],
        "summary": "Deploy",
        "description": "Deploy Dataset to Environment.\n\nSet the deployed Version for the specified Environment.",
        "operationId": "deploy_datasets__id__versions__version_id__deploy_post",
        "parameters": [
          {
            "description": "Unique identifier for Dataset.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset ID",
              "description": "Unique identifier for Dataset."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the specific version of the Dataset.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "Unique identifier for the specific version of the Dataset."
            },
            "name": "version_id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the Environment to deploy the Version to.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Environment ID",
              "description": "Unique identifier for the Environment to deploy the Version to."
            },
            "name": "environment_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/DatasetResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/evaluations": {
      "get": {
        "tags": ["Evaluations"],
        "summary": "List Evaluations for File",
        "description": "List Evaluations for the given File.\n\nRetrieve a list of Evaluations that evaluate versions of the specified File.",
        "operationId": "Evaluations_list",
        "parameters": [
          {
            "description": "Filter by File ID. If provided, only Evaluation for the specified File will be returned.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File ID",
              "description": "Filter by File ID. If provided, only Evaluation for the specified File will be returned."
            },
            "name": "file_id",
            "in": "query"
          },
          {
            "description": "Page number for pagination.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1.0,
              "title": "Page number",
              "description": "Page number for pagination.",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "description": "Page size for pagination. Number of Evaluations to fetch.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0.0,
              "title": "Page size",
              "description": "Page size for pagination. Number of Evaluations to fetch.",
              "default": 10
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedData_EvaluationResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      },
      "post": {
        "tags": ["Evaluations"],
        "summary": "Create Evaluation",
        "description": "Create an Evaluation.\n\nCreate a new Evaluation by specifying the Dataset, Evaluatees, and Evaluators.\nHumanloop will automatically start generating Logs and running Evaluators.\n\nTo keep updated on the progress of the Evaluation, you can poll the Evaluation\nand check its status.",
        "operationId": "Evaluations_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEvaluationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EvaluationResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/evaluations/{id}": {
      "get": {
        "tags": ["Evaluations"],
        "summary": "Get Evaluation",
        "description": "Get an Evaluation.\n\nRetrieve the Evaluation with the given ID.",
        "operationId": "Evaluations_get",
        "parameters": [
          {
            "description": "Unique identifier for the Evaluation.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation ID",
              "description": "Unique identifier for the Evaluation."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EvaluationResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      },
      "delete": {
        "tags": ["Evaluations"],
        "summary": "Delete Evaluation",
        "description": "Delete an Evaluation.\n\nRemove an Evaluation from Humanloop. The Logs and Versions used in the Evaluation\nwill not be deleted.",
        "operationId": "Evaluations_delete",
        "parameters": [
          {
            "description": "Unique identifier for the Evaluation.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation ID",
              "description": "Unique identifier for the Evaluation."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      },
      "patch": {
        "tags": ["Evaluations"],
        "summary": "Update Evaluation",
        "description": "Update an Evaluation.\n\nUpdate the setup of an Evaluation by specifying the Dataset, Evaluatees, and Evaluators.",
        "operationId": "Evaluations_update",
        "parameters": [
          {
            "description": "Unique identifier for the Evaluation.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation ID",
              "description": "Unique identifier for the Evaluation."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEvaluationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EvaluationResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/evaluations/{id}/stats": {
      "get": {
        "tags": ["Evaluations"],
        "summary": "Get Evaluation Stats",
        "description": "Get Evaluation Stats.\n\nRetrieve aggregate stats for the specified Evaluation.\nThis includes the number of generated Logs for every evaluatee and Evaluator metrics\n(such as the mean and percentiles for numeric Evaluators for every evaluatee).",
        "operationId": "Evaluations_getStats",
        "parameters": [
          {
            "description": "Unique identifier for the Evaluation.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation ID",
              "description": "Unique identifier for the Evaluation."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EvaluationStats" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/evaluators/default": {
      "get": {
        "tags": ["Evaluators"],
        "summary": "List Default Evaluators",
        "description": "Get a list of default evaluators for the organization.",
        "operationId": "Evaluators_listDefault",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": { "$ref": "#/components/schemas/EvaluatorResponse" },
                  "type": "array",
                  "title": "Response Evaluators Listdefault"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/evaluators": {
      "post": {
        "tags": ["Evaluators"],
        "summary": "Create An Evaluator",
        "description": "Create an Evaluator in an existing Directory. If no Directory is specified, the\nEvaluator will be created in the Organization's root directory.",
        "operationId": "Evaluators_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEvaluatorRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EvaluatorResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/evaluators/{id}": {
      "get": {
        "tags": ["Evaluators"],
        "summary": "Retrieve A Evaluator",
        "operationId": "Evaluators_get",
        "parameters": [
          {
            "description": "Unique identifier for Evaluator. Starts with `ev_`.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluator ID",
              "description": "Unique identifier for Evaluator. Starts with `ev_`."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EvaluatorResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      },
      "delete": {
        "tags": ["Evaluators"],
        "summary": "Delete A Evaluator",
        "description": "Delete the Evaluator with the given ID.",
        "operationId": "Evaluators_delete",
        "parameters": [
          {
            "description": "Unique identifier for Evaluator. Starts with `ev_`.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluator ID",
              "description": "Unique identifier for Evaluator. Starts with `ev_`."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      },
      "patch": {
        "tags": ["Evaluators"],
        "summary": "Update A Evaluator",
        "description": "Update the Evaluator with the given ID.",
        "operationId": "Evaluators_update",
        "parameters": [
          {
            "description": "Unique identifier for Evaluator. Starts with `ev_`.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluator ID",
              "description": "Unique identifier for Evaluator. Starts with `ev_`."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEvaluatorRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EvaluatorResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/evaluators/{id}/versions": {
      "get": {
        "tags": ["Evaluators"],
        "summary": "List Evaluator Versions",
        "description": "Get a list of the Evaluator Versions for a Evaluator.",
        "operationId": "Evaluators_list",
        "parameters": [
          {
            "description": "Unique identifier for Evaluator. Starts with `ev_`.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluator ID",
              "description": "Unique identifier for Evaluator. Starts with `ev_`."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned.",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/VersionStatus" }],
              "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned."
            },
            "name": "status",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "boolean", "title": "Evaluation Aggregates" },
            "name": "evaluation_aggregates",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListEvaluatorVersionsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/evaluators/{id}/deployments": {
      "post": {
        "tags": ["Evaluators"],
        "summary": "Deploy",
        "description": "Deploy Evaluator Version to Environment.\n\nSet the deployed Version for the specified Environment. This Evaluator Version\nwill be used for calls made to the Evaluator in this Environment.",
        "operationId": "deploy_evaluators__id__deployments_post",
        "parameters": [
          {
            "description": "Unique identifier for Evaluator. Starts with `ev_`.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluator ID",
              "description": "Unique identifier for Evaluator. Starts with `ev_`."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EvaluatorResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/evaluators/versions": {
      "post": {
        "tags": ["Evaluators"],
        "summary": "Commit Evaluator Version",
        "description": "Commit a new Evaluator Version for the Evaluator with the given ID.",
        "operationId": "EvaluatorVersions_commit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateLLMEvaluatorVersionRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CreatePythonEvaluatorVersionRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CreateHumanEvaluatorVersionRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CreateExternalEvaluatorVersionRequest"
                  }
                ],
                "title": "Request",
                "discriminator": {
                  "propertyName": "evaluator_type",
                  "mapping": {
                    "llm": "#/components/schemas/CreateLLMEvaluatorVersionRequest",
                    "python": "#/components/schemas/CreatePythonEvaluatorVersionRequest",
                    "human": "#/components/schemas/CreateHumanEvaluatorVersionRequest",
                    "external": "#/components/schemas/CreateExternalEvaluatorVersionRequest"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/evaluators/versions/{id}": {
      "get": {
        "tags": ["Evaluators"],
        "summary": "Retrieve Evaluator Version",
        "description": "Retrieve the Evaluator Version with the given ID.",
        "operationId": "EvaluatorVersions_get",
        "parameters": [
          {
            "description": "Unique identifier for Evaluator. Starts with `ev_`.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluator ID",
              "description": "Unique identifier for Evaluator. Starts with `ev_`."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    }
  },
  "components": {
    "schemas": {
      "BooleanEvaluatorVersionStats": {
        "properties": {
          "evaluator_version_id": {
            "type": "string",
            "title": "Evaluator Version ID",
            "description": "Unique identifier for the Evaluator Version."
          },
          "total_logs": {
            "type": "integer",
            "title": "Total Evaluator Logs",
            "description": "The total number of Logs generated by this Evaluator Version on the Evaluated Version's Logs. This includes Nulls and Errors."
          },
          "num_judgments": {
            "type": "integer",
            "title": "Number of Judgments",
            "description": "The total number of Evaluator judgments for this Evaluator Version. This excludes Nulls and Errors."
          },
          "num_nulls": {
            "type": "integer",
            "title": "Number of Nulls",
            "description": "The total number of null judgments (i.e. abstentions) for this Evaluator Version."
          },
          "num_errors": {
            "type": "integer",
            "title": "Number of Errors",
            "description": "The total number of errored Evaluators for this Evaluator Version."
          },
          "num_true": {
            "type": "integer",
            "title": "Number of True",
            "description": "The total number of `True` judgments for this Evaluator Version."
          },
          "num_false": {
            "type": "integer",
            "title": "Number of False",
            "description": "The total number of `False` judgments for this Evaluator Version."
          }
        },
        "type": "object",
        "required": [
          "evaluator_version_id",
          "total_logs",
          "num_judgments",
          "num_nulls",
          "num_errors",
          "num_true",
          "num_false"
        ],
        "title": "BooleanEvaluatorVersionStats",
        "description": "Base attributes for stats for an Evaluator Version-Evaluated Version pair\nin the Evaluation Report."
      },
      "CategoricalFeedbackLabel": {
        "properties": {
          "value": { "type": "string", "title": "Label value" },
          "sentiment": {
            "allOf": [{ "$ref": "#/components/schemas/LabelSentiment" }],
            "title": "Feedback label sentiment",
            "description": "Whether the feedback sentiment is positive or negative."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/FeedbackLabelStatus" }],
            "title": "Feedback label status",
            "description": "Whether the feedback label is active or inactive."
          }
        },
        "type": "object",
        "required": ["value", "sentiment", "status"],
        "title": "CategoricalFeedbackLabel"
      },
      "ChatMessage": {
        "properties": {
          "content": {
            "anyOf": [
              { "type": "string" },
              {
                "items": {
                  "anyOf": [
                    { "$ref": "#/components/schemas/TextChatContent" },
                    { "$ref": "#/components/schemas/ImageChatContent" }
                  ]
                },
                "type": "array"
              }
            ],
            "title": "Content",
            "description": "The content of the message.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Optional name of the message author.",
            "nullable": true
          },
          "tool_call_id": {
            "type": "string",
            "title": "Tool call id",
            "description": "Tool call that this message is responding to.",
            "nullable": true
          },
          "role": {
            "allOf": [{ "$ref": "#/components/schemas/ChatRole" }],
            "title": "Role",
            "description": "Role of the message author."
          },
          "tool_calls": {
            "items": { "$ref": "#/components/schemas/ToolCall" },
            "type": "array",
            "title": "Tool calls",
            "description": "A list of tool calls requested by the assistant.",
            "nullable": true
          }
        },
        "type": "object",
        "required": ["role"],
        "title": "ChatMessage"
      },
      "ChatRole": {
        "type": "string",
        "enum": ["user", "assistant", "system", "tool"],
        "title": "ChatRole",
        "description": "An enumeration."
      },
      "CommitPromptRequest": {
        "properties": {
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made."
          }
        },
        "type": "object",
        "required": ["commit_message"],
        "title": "CommitPromptRequest"
      },
      "CreateDatapointRequest": {
        "properties": {
          "inputs": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Inputs",
            "description": "The inputs to the prompt template.",
            "default": {}
          },
          "messages": {
            "items": { "$ref": "#/components/schemas/ChatMessage" },
            "type": "array",
            "title": "Chat messages",
            "description": "List of chat messages to provide to the model."
          },
          "target": {
            "additionalProperties": {
              "anyOf": [
                { "type": "string" },
                { "type": "integer" },
                { "type": "number" },
                { "type": "boolean" },
                { "type": "object" },
                { "items": {}, "type": "array" }
              ]
            },
            "type": "object",
            "title": "Target",
            "description": "Object with criteria necessary to evaluate generations with this Datapoint. This is passed in as an argument to Evaluators when used in an Evaluation."
          }
        },
        "type": "object",
        "title": "CreateDatapointRequest"
      },
      "CreateEvaluationRequest": {
        "properties": {
          "dataset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__external__app__models__v5__evaluations__DatasetRequest"
              }
            ],
            "title": "Dataset",
            "description": "The Dataset Version to use in this Evaluation."
          },
          "evaluatees": {
            "items": { "$ref": "#/components/schemas/EvaluateeRequest" },
            "type": "array",
            "minItems": 1,
            "title": "Evaluated Version IDs",
            "description": "Unique identifiers for the Prompt/Tool Versions to include in the Evaluation Report."
          },
          "evaluators": {
            "items": { "$ref": "#/components/schemas/EvaluatorRequest" },
            "type": "array",
            "title": "Evaluators",
            "description": "The Evaluators used to evaluate."
          }
        },
        "type": "object",
        "required": ["dataset", "evaluatees", "evaluators"],
        "title": "CreateEvaluationRequest",
        "description": "Request model for creating an Evaluation.\n\nEvaluation benchmark your Prompt/Tool Versions. With the Datapoints in a Dataset Version,\nLogs corresponding to the Datapoint and each Evaluated Version are evaluated by the specified Evaluator Versions.\nAggregated statistics are then calculated and presented in the Evaluation."
      },
      "CreateEvaluatorRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Evaluator Name",
            "description": "Name of the Evaluator. This has to be unique within your Organization."
          },
          "directory_id": {
            "type": "string",
            "title": "Directory ID",
            "description": "Unique identifier for the Directory to create Evaluator in. Starts with `dir_`. If not provided, the Evaluator will be created in your Organization's root directory."
          },
          "evaluator_type": {
            "allOf": [{ "$ref": "#/components/schemas/EvaluatorType" }],
            "title": "Evaluator Type",
            "description": "Type of Evaluator, one of python, llm, human, external."
          }
        },
        "type": "object",
        "required": ["evaluator_type"],
        "title": "CreateEvaluatorRequest"
      },
      "CreateExternalEvaluatorVersionRequest": {
        "properties": {
          "evaluator_id": {
            "type": "string",
            "title": "Evaluator ID",
            "description": "Unique identifier for the Evaluator to create a new Evaluator Version for. Starts with `ev_`."
          },
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made."
          },
          "evaluator_type": {
            "type": "string",
            "enum": ["external"],
            "title": "Evaluator type",
            "description": "The type of the evaluator.",
            "default": "external"
          },
          "arguments_type": {
            "allOf": [
              { "$ref": "#/components/schemas/EvaluatorArgumentsType" }
            ],
            "title": "Arguments type",
            "description": "Whether this evaluator is target-free or target-required."
          },
          "return_type": {
            "allOf": [
              { "$ref": "#/components/schemas/EvaluatorReturnTypeEnum" }
            ],
            "title": "Return type",
            "description": "The type of the return value of the evaluator."
          }
        },
        "type": "object",
        "required": ["evaluator_id", "arguments_type", "return_type"],
        "title": "CreateExternalEvaluatorVersionRequest"
      },
      "CreateHumanEvaluatorVersionRequest": {
        "properties": {
          "evaluator_id": {
            "type": "string",
            "title": "Evaluator ID",
            "description": "Unique identifier for the Evaluator to create a new Evaluator Version for. Starts with `ev_`."
          },
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made."
          },
          "evaluator_type": {
            "type": "string",
            "enum": ["human"],
            "title": "Evaluator type",
            "description": "The type of the evaluator.",
            "default": "human"
          },
          "arguments_type": {
            "allOf": [
              { "$ref": "#/components/schemas/EvaluatorArgumentsType" }
            ],
            "title": "Arguments type",
            "description": "Whether this evaluator is target-free or target-required."
          },
          "return_type": {
            "allOf": [
              { "$ref": "#/components/schemas/EvaluatorReturnTypeEnum" }
            ],
            "title": "Return type",
            "description": "The type of the return value of the evaluator."
          }
        },
        "type": "object",
        "required": ["evaluator_id", "arguments_type", "return_type"],
        "title": "CreateHumanEvaluatorVersionRequest"
      },
      "CreateLLMEvaluatorVersionRequest": {
        "properties": {
          "evaluator_id": {
            "type": "string",
            "title": "Evaluator ID",
            "description": "Unique identifier for the Evaluator to create a new Evaluator Version for. Starts with `ev_`."
          },
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made."
          },
          "evaluator_type": {
            "type": "string",
            "enum": ["llm"],
            "title": "Evaluator type",
            "description": "The type of the evaluator.",
            "default": "llm"
          },
          "prompt": {
            "allOf": [{ "$ref": "#/components/schemas/PromptVersionRequest" }],
            "title": "Prompt parameters",
            "description": "The prompt parameters used to generate."
          },
          "arguments_type": {
            "allOf": [
              { "$ref": "#/components/schemas/EvaluatorArgumentsType" }
            ],
            "title": "Arguments type",
            "description": "Whether this evaluator is target-free or target-required."
          },
          "return_type": {
            "allOf": [
              { "$ref": "#/components/schemas/EvaluatorReturnTypeEnum" }
            ],
            "title": "Return type",
            "description": "The type of the return value of the evaluator."
          }
        },
        "type": "object",
        "required": ["evaluator_id", "arguments_type", "return_type"],
        "title": "CreateLLMEvaluatorVersionRequest"
      },
      "CreatePromptLogResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Log ID",
            "description": "String ID of log."
          },
          "prompt_id": {
            "type": "string",
            "title": "Prompt ID",
            "description": "ID of the Prompt the log belongs to."
          },
          "version_id": {
            "type": "string",
            "title": "Prompt Version ID",
            "description": "ID of the specific version of the Prompt."
          },
          "session_id": {
            "type": "string",
            "title": "Session ID",
            "description": "String ID of session the log belongs to."
          }
        },
        "type": "object",
        "required": ["id", "prompt_id", "version_id"],
        "title": "CreatePromptLogResponse"
      },
      "CreatePythonEvaluatorVersionRequest": {
        "properties": {
          "evaluator_id": {
            "type": "string",
            "title": "Evaluator ID",
            "description": "Unique identifier for the Evaluator to create a new Evaluator Version for. Starts with `ev_`."
          },
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made."
          },
          "evaluator_type": {
            "type": "string",
            "enum": ["python"],
            "title": "Evaluator type",
            "description": "The type of the evaluator.",
            "default": "python"
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "The code for the evaluator. This code will be executed in a sandboxed environment."
          },
          "arguments_type": {
            "allOf": [
              { "$ref": "#/components/schemas/EvaluatorArgumentsType" }
            ],
            "title": "Arguments type",
            "description": "Whether this evaluator is target-free or target-required."
          },
          "return_type": {
            "allOf": [
              { "$ref": "#/components/schemas/EvaluatorReturnTypeEnum" }
            ],
            "title": "Return type",
            "description": "The type of the return value of the evaluator."
          }
        },
        "type": "object",
        "required": ["evaluator_id", "arguments_type", "return_type"],
        "title": "CreatePythonEvaluatorVersionRequest"
      },
      "CreateToolRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Tool Name",
            "description": "Name of the Tool. This has to be unique within your Organization."
          },
          "directory_id": {
            "type": "string",
            "title": "Directory ID",
            "description": "Unique identifier for the Directory to create Tool in. Starts with `dir_`. If not provided, the Tool will be created in your Organization's root directory."
          },
          "tool_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__domain__files__tool__ToolType"
              }
            ],
            "title": "Tool Type",
            "description": "Type of Tool if runnable by Humanloop. Otherwise `null`."
          }
        },
        "type": "object",
        "title": "CreateToolRequest"
      },
      "CreateToolVersionRequest": {
        "properties": {
          "tool_id": {
            "type": "string",
            "title": "Tool ID",
            "description": "Unique identifier for the Tool to create a new Tool Version for. Starts with `tl_`."
          },
          "commit_message": {
            "type": "string",
            "minLength": 1,
            "title": "Commit message",
            "description": "Message describing the changes made."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name for the Tool referenced by the model."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the Tool referenced by the model"
          },
          "parameters": {
            "type": "object",
            "title": "Tool parameters",
            "description": "Parameters needed to run the Tool, defined in JSON Schema format: https://json-schema.org/"
          },
          "source_code": {
            "type": "string",
            "title": "Source Code",
            "description": "Code source of the Tool."
          },
          "setup_values": {
            "type": "object",
            "title": "Setup values",
            "description": "Values needed to setup the Tool, defined in JSON Schema format: https://json-schema.org/"
          }
        },
        "type": "object",
        "required": ["tool_id", "commit_message", "name"],
        "title": "CreateToolVersionRequest"
      },
      "DashboardConfiguration": {
        "properties": {
          "time_unit": { "$ref": "#/components/schemas/TimeUnit" },
          "time_range_days": { "type": "integer", "title": "Time Range Days" },
          "model_config_ids": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Model Config Ids"
          }
        },
        "type": "object",
        "required": ["time_unit", "time_range_days", "model_config_ids"],
        "title": "DashboardConfiguration"
      },
      "DatapointResponse": {
        "properties": {
          "inputs": {
            "additionalProperties": { "type": "string" },
            "type": "object",
            "title": "Inputs",
            "description": "The inputs to the prompt template.",
            "default": {}
          },
          "messages": {
            "items": { "$ref": "#/components/schemas/ChatMessage" },
            "type": "array",
            "title": "Chat messages",
            "description": "List of chat messages to provide to the model."
          },
          "target": {
            "additionalProperties": {
              "anyOf": [
                { "type": "string" },
                { "type": "integer" },
                { "type": "number" },
                { "type": "boolean" },
                { "type": "object" },
                { "items": {}, "type": "array" }
              ]
            },
            "type": "object",
            "title": "Target",
            "description": "Object with criteria necessary to evaluate generations with this Datapoint. This is passed in as an argument to Evaluators when used in an Evaluation."
          },
          "id": {
            "type": "string",
            "title": "Datapoint ID",
            "description": "Unique identifier for the Datapoint. Starts with `dp_`."
          }
        },
        "type": "object",
        "required": ["id"],
        "title": "DatapointResponse"
      },
      "DatasetResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Dataset ID",
            "description": "Unique identifier for the Dataset. Starts with `ds_`."
          },
          "name": {
            "type": "string",
            "title": "Dataset name",
            "description": "Name of the Dataset, which is used as a unique identifier."
          },
          "version_id": {
            "type": "string",
            "title": "Version ID",
            "description": "Unique identifier for the specific Dataset Version. If no query params provided, the default deployed Dataset Version is returned. Starts with `dsv_`."
          },
          "environments": {
            "items": { "$ref": "#/components/schemas/EnvironmentResponse" },
            "type": "array",
            "title": "Environments",
            "description": "The list of environments the Dataset Version is deployed to."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "created_by": {
            "allOf": [{ "$ref": "#/components/schemas/UserResponse" }],
            "title": "Created by",
            "description": "The user who created the Dataset."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/VersionStatus" }],
            "title": "Status",
            "description": "The status of the Dataset Version."
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Used At"
          },
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made. If provided, a committed version of the Dataset is created. Otherwise, an uncommitted version is created."
          },
          "datapoints_count": {
            "type": "integer",
            "title": "Datapoints count",
            "description": "The number of Datapoints in this Dataset version."
          },
          "datapoints": {
            "items": { "$ref": "#/components/schemas/DatapointResponse" },
            "type": "array",
            "title": "Datapoints",
            "description": "The list of Datapoints in this Dataset version. Only provided if explicitly requested."
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "version_id",
          "created_at",
          "updated_at",
          "status",
          "last_used_at",
          "datapoints_count"
        ],
        "title": "DatasetResponse",
        "description": "Base type that all File Responses should inherit from.\n\nAttributes defined here are common to all File Responses and should be overridden\nin the inheriting classes with documentation and appropriate Field definitions."
      },
      "EnvironmentResponse": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "name": { "type": "string", "title": "Name" },
          "tag": { "$ref": "#/components/schemas/EnvironmentTag" }
        },
        "type": "object",
        "required": ["id", "created_at", "name", "tag"],
        "title": "EnvironmentResponse"
      },
      "EnvironmentTag": {
        "type": "string",
        "enum": ["default", "other"],
        "title": "EnvironmentTag",
        "description": "An enumeration."
      },
      "EvaluatedVersionResponse": {
        "anyOf": [
          { "$ref": "#/components/schemas/PromptResponse" },
          { "$ref": "#/components/schemas/ToolVersionResponse" }
        ],
        "title": "EvaluatedVersionResponse"
      },
      "EvaluateeRequest": {
        "properties": {
          "version_id": {
            "type": "string",
            "title": "Prompt/Tool Version ID",
            "description": "Unique identifier for the Prompt/Tool Version to include in the Evaluation Report. Starts with `pv_` for Prompts and `tv_` for Tools."
          },
          "batch_id": {
            "type": "string",
            "title": "Batch ID",
            "description": "Unique identifier for the batch of Logs to include in the Evaluation Report."
          },
          "orchestrated": {
            "type": "boolean",
            "title": "Humanloop Orchestrated",
            "description": "Whether the Prompt/Tool is orchestrated by Humanloop. Default is `True`. If `False`, a log for the Prompt/Tool should be submitted by the user via the API.",
            "default": true
          }
        },
        "type": "object",
        "required": ["version_id"],
        "title": "EvaluateeRequest"
      },
      "EvaluateeResponse": {
        "properties": {
          "version": {
            "$ref": "#/components/schemas/EvaluatedVersionResponse"
          },
          "batch_id": {
            "type": "string",
            "title": "Batch ID",
            "description": "Unique identifier for the batch of Logs to include in the Evaluation Report. "
          },
          "orchestrated": {
            "type": "boolean",
            "title": "Humanloop Orchestrated",
            "description": "Whether the Prompt/Tool is orchestrated by Humanloop. Default is `True`. If `False`, a log for the Prompt/Tool should be submitted by the user via the API."
          }
        },
        "type": "object",
        "required": ["version", "orchestrated"],
        "title": "EvaluateeResponse"
      },
      "EvaluationEvaluatorResponse": {
        "properties": {
          "version": {
            "$ref": "#/components/schemas/EvaluatorVersionResponse"
          },
          "orchestrated": {
            "type": "boolean",
            "title": "Humanloop Orchestrated",
            "description": "Whether the Evaluator is orchestrated by Humanloop. Default is `True`. If `False`, a log for the Evaluator should be submitted by the user via the API."
          }
        },
        "type": "object",
        "required": ["version", "orchestrated"],
        "title": "EvaluationEvaluatorResponse"
      },
      "EvaluationResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Evaluation ID",
            "description": "Unique identifier for the Evaluation. Starts with `evr`."
          },
          "dataset": {
            "allOf": [{ "$ref": "#/components/schemas/DatasetResponse" }],
            "title": "Dataset",
            "description": "The Dataset Version used in the Evaluation."
          },
          "evaluatees": {
            "items": { "$ref": "#/components/schemas/EvaluateeResponse" },
            "type": "array",
            "title": "Evaluated Versions",
            "description": "The Prompt/Tool Versions included in the Evaluation."
          },
          "evaluators": {
            "items": {
              "$ref": "#/components/schemas/EvaluationEvaluatorResponse"
            },
            "type": "array",
            "title": "Evaluator",
            "description": "The Evaluator Versions used to evaluate."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/EvaluationStatus" }],
            "title": "Status",
            "description": "The current status of the Evaluation.\n\n- `\"pending\"`: The Evaluation has been created but is not actively being worked on by Humanloop.\n- `\"running\"`: Humanloop is checking for any missing Logs and Evaluator Logs, and will generate them where appropriate.\n- `\"completed\"`: All Logs an Evaluator Logs have been generated.\n- `\"cancelled\"`: The Evaluation has been cancelled by the user. Humanloop will stop generating Logs and Evaluator Logs.\n"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "created_by": { "$ref": "#/components/schemas/UserResponse" },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "dataset",
          "evaluatees",
          "evaluators",
          "status",
          "created_at",
          "updated_at"
        ],
        "title": "EvaluationResponse"
      },
      "EvaluationStats": {
        "properties": {
          "overall_stats": {
            "allOf": [{ "$ref": "#/components/schemas/OverallStats" }],
            "title": "Overall Stats",
            "description": "Stats for the Evaluation Report as a whole."
          },
          "version_stats": {
            "items": { "$ref": "#/components/schemas/VersionStats" },
            "type": "array",
            "title": "Version Stats",
            "description": "Stats for each Evaluated Version in the Evaluation Report."
          }
        },
        "type": "object",
        "required": ["overall_stats", "version_stats"],
        "title": "EvaluationStats"
      },
      "EvaluationStatus": {
        "type": "string",
        "enum": ["pending", "running", "completed", "cancelled"],
        "title": "EvaluationStatus",
        "description": "Status of an evaluation."
      },
      "EvaluatorActivationDeactivationRequest": {
        "properties": {
          "evaluators_to_activate": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MonitoringEvaluatorVersionRequest"
                },
                {
                  "$ref": "#/components/schemas/MonitoringEvaluatorEnvironmentRequest"
                }
              ]
            },
            "type": "array",
            "title": "Evaluators to activate",
            "description": "Monitoring Evaluators to activate. These will be automatically run on new Logs."
          },
          "evaluators_to_deactivate": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MonitoringEvaluatorVersionRequest"
                },
                {
                  "$ref": "#/components/schemas/MonitoringEvaluatorEnvironmentRequest"
                }
              ]
            },
            "type": "array",
            "title": "Evaluators to deactivate",
            "description": "Evaluators to deactivate. These will not be run on new Logs."
          }
        },
        "type": "object",
        "title": "EvaluatorActivationDeactivationRequest"
      },
      "EvaluatorArgumentsType": {
        "type": "string",
        "enum": ["target_free", "target_required"],
        "title": "EvaluatorArgumentsType",
        "description": "Enum representing the possible argument types of an evaluator."
      },
      "EvaluatorInputResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Input name",
            "description": "Type of input."
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "EvaluatorInputResponse"
      },
      "EvaluatorRequest": {
        "properties": {
          "version_id": {
            "type": "string",
            "title": "Evaluator Version ID",
            "description": "Unique identifier for the Evaluator Version to use in this evaluation. Starts with `evv_`."
          },
          "orchestrated": {
            "type": "boolean",
            "title": "Humanloop Orchestrated",
            "description": "Whether the Evaluator is orchestrated by Humanloop. Default is `True`. If `False`, a log for the Evaluator should be submitted by the user via the API.",
            "default": true
          }
        },
        "type": "object",
        "required": ["version_id"],
        "title": "EvaluatorRequest"
      },
      "EvaluatorResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Evaluator ID",
            "description": "Unique identifier for Evaluator. Starts with `ev_`."
          },
          "name": {
            "type": "string",
            "title": "Evaluator Name",
            "description": "Name of the Evaluator."
          },
          "version_id": { "type": "string", "title": "Version Id" },
          "directory_id": {
            "type": "string",
            "title": "Directory ID",
            "description": "Unique identifier for the Directory the Evaluator belongs to. Starts with `dir_`."
          },
          "environments": {
            "items": { "$ref": "#/components/schemas/EnvironmentResponse" },
            "type": "array",
            "title": "Environments"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "created_by": { "$ref": "#/components/schemas/UserResponse" },
          "status": { "$ref": "#/components/schemas/VersionStatus" },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Used At"
          },
          "evaluator_type": {
            "allOf": [{ "$ref": "#/components/schemas/EvaluatorType" }],
            "title": "Evaluator Type",
            "description": "The type of the evaluator."
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "version_id",
          "created_at",
          "updated_at",
          "status",
          "last_used_at"
        ],
        "title": "EvaluatorResponse",
        "description": "Base type that all File Responses should inherit from.\n\nAttributes defined here are common to all File Responses and should be overridden\nin the inheriting classes with documentation and appropriate Field definitions."
      },
      "EvaluatorReturnTypeEnum": {
        "type": "string",
        "enum": ["boolean", "number"],
        "title": "EvaluatorReturnTypeEnum",
        "description": "Enum representing the possible return types of an evaluator."
      },
      "EvaluatorType": {
        "type": "string",
        "enum": ["python", "llm", "human", "external"],
        "title": "EvaluatorType",
        "description": "An enumeration."
      },
      "EvaluatorVersionEvaluatorResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Evaluator ID",
            "description": "Unique identifier for Evaluator. Starts with `ev_`."
          },
          "name": {
            "type": "string",
            "title": "Evaluator Name",
            "description": "Name of the Evaluator."
          },
          "version_id": { "type": "string", "title": "Version Id" },
          "directory_id": {
            "type": "string",
            "title": "Directory ID",
            "description": "Unique identifier for the Directory the Evaluator belongs to. Starts with `dir_`."
          },
          "environments": {
            "items": { "$ref": "#/components/schemas/EnvironmentResponse" },
            "type": "array",
            "title": "Environments"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "created_by": { "$ref": "#/components/schemas/UserResponse" },
          "status": { "$ref": "#/components/schemas/VersionStatus" },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Used At"
          },
          "evaluator_type": {
            "allOf": [{ "$ref": "#/components/schemas/EvaluatorType" }],
            "title": "Evaluator Type",
            "description": "The type of the evaluator."
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "version_id",
          "created_at",
          "updated_at",
          "status",
          "last_used_at"
        ],
        "title": "EvaluatorVersionEvaluatorResponse"
      },
      "EvaluatorVersionResponse": {
        "oneOf": [
          { "$ref": "#/components/schemas/LLMEvaluatorVersionResponse" },
          { "$ref": "#/components/schemas/PythonEvaluatorVersionResponse" },
          { "$ref": "#/components/schemas/HumanEvaluatorVersionResponse" },
          { "$ref": "#/components/schemas/ExternalEvaluatorVersionResponse" }
        ],
        "title": "EvaluatorVersionResponse",
        "discriminator": {
          "propertyName": "evaluator_type",
          "mapping": {
            "llm": "#/components/schemas/LLMEvaluatorVersionResponse",
            "python": "#/components/schemas/PythonEvaluatorVersionResponse",
            "human": "#/components/schemas/HumanEvaluatorVersionResponse",
            "external": "#/components/schemas/ExternalEvaluatorVersionResponse"
          }
        }
      },
      "ExternalEvaluatorVersionResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Evaluator Version ID",
            "description": "Unique identifier for the Evaluator Version. Starts with `evv_`."
          },
          "evaluator_id": {
            "type": "string",
            "title": "Evaluator ID",
            "description": "Unique identifier for the Evaluator that this Evaluator Version belongs to. Starts with `ev_`."
          },
          "evaluator": {
            "$ref": "#/components/schemas/EvaluatorVersionEvaluatorResponse"
          },
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/VersionStatus" }],
            "title": "Status",
            "description": "The status of the Evaluator Version."
          },
          "type": {
            "type": "string",
            "enum": ["evaluator"],
            "title": "Type",
            "default": "evaluator"
          },
          "created_by": { "$ref": "#/components/schemas/UserResponse" },
          "num_logs": { "type": "integer", "title": "Num Logs" },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Used At"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "evaluator_type": {
            "type": "string",
            "enum": ["external"],
            "title": "Evaluator type",
            "description": "The type of the evaluator.",
            "default": "external"
          },
          "arguments_type": {
            "allOf": [
              { "$ref": "#/components/schemas/EvaluatorArgumentsType" }
            ],
            "title": "Arguments type",
            "description": "Whether this evaluator is target-free or target-required."
          },
          "return_type": {
            "allOf": [
              { "$ref": "#/components/schemas/EvaluatorReturnTypeEnum" }
            ],
            "title": "Return type",
            "description": "The type of the return value of the evaluator."
          }
        },
        "type": "object",
        "required": [
          "id",
          "evaluator_id",
          "evaluator",
          "status",
          "num_logs",
          "last_used_at",
          "created_at",
          "updated_at",
          "arguments_type",
          "return_type"
        ],
        "title": "ExternalEvaluatorVersionResponse",
        "description": "Base type that all Version Responses should inherit from."
      },
      "FeedbackClass": {
        "type": "string",
        "enum": ["select", "multi_select", "text", "number"],
        "title": "FeedbackClass",
        "description": "An enumeration."
      },
      "FeedbackLabelStatus": {
        "type": "string",
        "enum": ["unset", "active", "inactive"],
        "title": "FeedbackLabelStatus",
        "description": "Controls whether the label is displayed in the UI."
      },
      "FeedbackType": {
        "type": "string",
        "enum": ["rating", "action", "issue", "correction", "comment"],
        "title": "FeedbackType",
        "description": "An enumeration."
      },
      "FeedbackTypeModel": {
        "properties": {
          "type": {
            "anyOf": [
              { "$ref": "#/components/schemas/FeedbackType" },
              { "type": "string" }
            ],
            "title": "Feedback type",
            "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'."
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/CategoricalFeedbackLabel"
            },
            "type": "array",
            "title": "Allowed values for categorical feedback types",
            "description": "The allowed values for categorical feedback types. Not populated for `correction` and `comment`."
          }
        },
        "type": "object",
        "required": ["type"],
        "title": "FeedbackTypeModel"
      },
      "FeedbackTypes": {
        "items": { "$ref": "#/components/schemas/FeedbackTypeModel" },
        "type": "array",
        "title": "FeedbackTypes"
      },
      "FunctionTool": {
        "properties": {
          "name": { "type": "string", "title": "Name" },
          "arguments": { "type": "string", "title": "Arguments" }
        },
        "type": "object",
        "required": ["name"],
        "title": "FunctionTool",
        "description": "A function tool to be called by the model where user owns runtime."
      },
      "FunctionToolChoice": {
        "properties": { "name": { "type": "string", "title": "Name" } },
        "type": "object",
        "required": ["name"],
        "title": "FunctionToolChoice",
        "description": "A function tool to be called by the model where user owns runtime."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HumanEvaluatorVersionResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Evaluator Version ID",
            "description": "Unique identifier for the Evaluator Version. Starts with `evv_`."
          },
          "evaluator_id": {
            "type": "string",
            "title": "Evaluator ID",
            "description": "Unique identifier for the Evaluator that this Evaluator Version belongs to. Starts with `ev_`."
          },
          "evaluator": {
            "$ref": "#/components/schemas/EvaluatorVersionEvaluatorResponse"
          },
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/VersionStatus" }],
            "title": "Status",
            "description": "The status of the Evaluator Version."
          },
          "type": {
            "type": "string",
            "enum": ["evaluator"],
            "title": "Type",
            "default": "evaluator"
          },
          "created_by": { "$ref": "#/components/schemas/UserResponse" },
          "num_logs": { "type": "integer", "title": "Num Logs" },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Used At"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "evaluator_type": {
            "type": "string",
            "enum": ["human"],
            "title": "Evaluator type",
            "description": "The type of the evaluator.",
            "default": "human"
          },
          "arguments_type": {
            "allOf": [
              { "$ref": "#/components/schemas/EvaluatorArgumentsType" }
            ],
            "title": "Arguments type",
            "description": "Whether this evaluator is target-free or target-required."
          },
          "return_type": {
            "allOf": [
              { "$ref": "#/components/schemas/EvaluatorReturnTypeEnum" }
            ],
            "title": "Return type",
            "description": "The type of the return value of the evaluator."
          }
        },
        "type": "object",
        "required": [
          "id",
          "evaluator_id",
          "evaluator",
          "status",
          "num_logs",
          "last_used_at",
          "created_at",
          "updated_at",
          "arguments_type",
          "return_type"
        ],
        "title": "HumanEvaluatorVersionResponse",
        "description": "Base type that all Version Responses should inherit from."
      },
      "ImageChatContent": {
        "properties": {
          "type": { "type": "string", "enum": ["image_url"], "title": "Type" },
          "image_url": {
            "allOf": [{ "$ref": "#/components/schemas/ImageUrl" }],
            "title": "Image URL",
            "description": "The message's image content."
          }
        },
        "type": "object",
        "required": ["type", "image_url"],
        "title": "ImageChatContent"
      },
      "ImageUrl": {
        "properties": {
          "url": {
            "type": "string",
            "title": "URL",
            "description": "Either a URL of the image or the base64 encoded image data."
          },
          "detail": {
            "type": "string",
            "enum": ["high", "low", "auto"],
            "title": "Image detail level",
            "description": "Specify the detail level of the image provided to the model. For more details see: https://platform.openai.com/docs/guides/vision/low-or-high-fidelity-image-understanding"
          }
        },
        "type": "object",
        "required": ["url"],
        "title": "ImageUrl"
      },
      "LLMEvaluatorVersionResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Evaluator Version ID",
            "description": "Unique identifier for the Evaluator Version. Starts with `evv_`."
          },
          "evaluator_id": {
            "type": "string",
            "title": "Evaluator ID",
            "description": "Unique identifier for the Evaluator that this Evaluator Version belongs to. Starts with `ev_`."
          },
          "evaluator": {
            "$ref": "#/components/schemas/EvaluatorVersionEvaluatorResponse"
          },
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/VersionStatus" }],
            "title": "Status",
            "description": "The status of the Evaluator Version."
          },
          "type": {
            "type": "string",
            "enum": ["evaluator"],
            "title": "Type",
            "default": "evaluator"
          },
          "created_by": { "$ref": "#/components/schemas/UserResponse" },
          "num_logs": { "type": "integer", "title": "Num Logs" },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Used At"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "evaluator_type": {
            "type": "string",
            "enum": ["llm"],
            "title": "Evaluator type",
            "description": "The type of the evaluator.",
            "default": "llm"
          },
          "prompt": {
            "allOf": [{ "$ref": "#/components/schemas/PromptVersionRequest" }],
            "title": "Prompt parameters",
            "description": "The prompt parameters used to generate."
          },
          "arguments_type": {
            "allOf": [
              { "$ref": "#/components/schemas/EvaluatorArgumentsType" }
            ],
            "title": "Arguments type",
            "description": "Whether this evaluator is target-free or target-required."
          },
          "return_type": {
            "allOf": [
              { "$ref": "#/components/schemas/EvaluatorReturnTypeEnum" }
            ],
            "title": "Return type",
            "description": "The type of the return value of the evaluator."
          }
        },
        "type": "object",
        "required": [
          "id",
          "evaluator_id",
          "evaluator",
          "status",
          "num_logs",
          "last_used_at",
          "created_at",
          "updated_at",
          "arguments_type",
          "return_type"
        ],
        "title": "LLMEvaluatorVersionResponse",
        "description": "Base type that all Version Responses should inherit from."
      },
      "LabelSentiment": {
        "type": "string",
        "enum": ["positive", "negative", "neutral", "unset"],
        "title": "LabelSentiment",
        "description": "How a label should be treated in calculating Version performance.\n\nUsed by a File's PAPV (Positive Action Per View) metric."
      },
      "ListDatasets": {
        "properties": {
          "records": {
            "items": { "$ref": "#/components/schemas/DatasetResponse" },
            "type": "array",
            "title": "Records",
            "description": "The list of Datasets."
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "ListDatasets"
      },
      "ListEvaluatorVersionsResponse": {
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/EvaluatorVersionResponse"
            },
            "type": "array",
            "title": "Records",
            "description": "The list of Evaluator Versions associated to the Evaluator."
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "ListEvaluatorVersionsResponse"
      },
      "ListPrompts": {
        "properties": {
          "records": {
            "items": { "$ref": "#/components/schemas/PromptResponse" },
            "type": "array",
            "title": "Records",
            "description": "The list of Prompts."
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "ListPrompts"
      },
      "ListToolVersionsResponse": {
        "properties": {
          "records": {
            "items": { "$ref": "#/components/schemas/ToolVersionResponse" },
            "type": "array",
            "title": "Records",
            "description": "The list of Tool Versions associated to the Tool."
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "ListToolVersionsResponse"
      },
      "ModelEndpoints": {
        "type": "string",
        "enum": ["complete", "chat", "edit"],
        "title": "ModelEndpoints",
        "description": "Supported model provider endpoints."
      },
      "ModelProviders": {
        "type": "string",
        "enum": [
          "openai",
          "openai_azure",
          "ai21",
          "mock",
          "anthropic",
          "langchain",
          "cohere",
          "replicate",
          "google",
          "groq"
        ],
        "title": "ModelProviders",
        "description": "Supported model providers."
      },
      "MonitoringEvaluatorEnvironmentRequest": {
        "properties": {
          "evaluator_id": {
            "type": "string",
            "title": "Evaluator ID",
            "description": "Unique identifier for the Evaluator to be used for monitoring."
          },
          "environment_id": {
            "type": "string",
            "title": "Environment ID",
            "description": "Unique identifier for the Environment. The Evaluator Version deployed to this Environment will be used for monitoring."
          }
        },
        "type": "object",
        "required": ["evaluator_id", "environment_id"],
        "title": "MonitoringEvaluatorEnvironmentRequest"
      },
      "MonitoringEvaluatorResponse": {
        "properties": {
          "version_reference": {
            "allOf": [
              { "$ref": "#/components/schemas/VersionReferenceResponse" }
            ],
            "title": "Version reference",
            "description": "The Evaluator Version used for monitoring. This can be a specific Version by ID, or a Version deployed to an Environment."
          },
          "version": {
            "allOf": [
              { "$ref": "#/components/schemas/EvaluatorVersionResponse" }
            ],
            "title": "Version",
            "description": "The deployed Version."
          },
          "state": {
            "allOf": [
              { "$ref": "#/components/schemas/MonitoringEvaluatorState" }
            ],
            "title": "State",
            "description": "The state of the Monitoring Evaluator. Either `active` or `inactive`"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["version_reference", "state", "created_at", "updated_at"],
        "title": "MonitoringEvaluatorResponse"
      },
      "MonitoringEvaluatorState": {
        "type": "string",
        "enum": ["active", "inactive"],
        "title": "MonitoringEvaluatorState",
        "description": "State of an evaluator connected to a file"
      },
      "MonitoringEvaluatorVersionRequest": {
        "properties": {
          "evaluator_version_id": {
            "type": "string",
            "title": "Evaluator Version ID",
            "description": "Unique identifier for the Evaluator Version to be used for monitoring."
          }
        },
        "type": "object",
        "required": ["evaluator_version_id"],
        "title": "MonitoringEvaluatorVersionRequest"
      },
      "NumericEvaluatorVersionStats": {
        "properties": {
          "evaluator_version_id": {
            "type": "string",
            "title": "Evaluator Version ID",
            "description": "Unique identifier for the Evaluator Version."
          },
          "total_logs": {
            "type": "integer",
            "title": "Total Evaluator Logs",
            "description": "The total number of Logs generated by this Evaluator Version on the Evaluated Version's Logs. This includes Nulls and Errors."
          },
          "num_judgments": {
            "type": "integer",
            "title": "Number of Judgments",
            "description": "The total number of Evaluator judgments for this Evaluator Version. This excludes Nulls and Errors."
          },
          "num_nulls": {
            "type": "integer",
            "title": "Number of Nulls",
            "description": "The total number of null judgments (i.e. abstentions) for this Evaluator Version."
          },
          "num_errors": {
            "type": "integer",
            "title": "Number of Errors",
            "description": "The total number of errored Evaluators for this Evaluator Version."
          },
          "mean": { "type": "number", "title": "Mean" },
          "std": { "type": "number", "title": "Std" },
          "percentiles": {
            "additionalProperties": { "type": "number" },
            "type": "object",
            "title": "Percentiles"
          }
        },
        "type": "object",
        "required": [
          "evaluator_version_id",
          "total_logs",
          "num_judgments",
          "num_nulls",
          "num_errors",
          "percentiles"
        ],
        "title": "NumericEvaluatorVersionStats",
        "description": "Base attributes for stats for an Evaluator Version-Evaluated Version pair\nin the Evaluation Report.",
        "example": {
          "mean": 0.0,
          "std": 1.0,
          "percentiles": {
            "0": -2.5,
            "25": -0.6745,
            "50": 0,
            "75": 0.6745,
            "100": 2.5
          }
        }
      },
      "OverallStats": {
        "properties": {
          "num_datapoints": {
            "type": "integer",
            "title": "Number of Datapoints",
            "description": "The total number of Datapoints in the Evaluation Report's Dataset Version."
          },
          "total_logs": {
            "type": "integer",
            "title": "Total Logs",
            "description": "The total number of Logs in the Evaluation Report."
          },
          "total_evaluator_logs": {
            "type": "integer",
            "title": "Total Evaluator Logs",
            "description": "The total number of Evaluator Logs in the Evaluation Report."
          }
        },
        "type": "object",
        "required": ["num_datapoints", "total_logs", "total_evaluator_logs"],
        "title": "OverallStats"
      },
      "PaginatedData_DatapointResponse_": {
        "properties": {
          "records": {
            "items": { "$ref": "#/components/schemas/DatapointResponse" },
            "type": "array",
            "title": "Records"
          },
          "page": { "type": "integer", "title": "Page" },
          "size": { "type": "integer", "title": "Size" },
          "total": { "type": "integer", "title": "Total" }
        },
        "type": "object",
        "required": ["records", "page", "size", "total"],
        "title": "PaginatedData[DatapointResponse]"
      },
      "PaginatedData_DatasetResponse_": {
        "properties": {
          "records": {
            "items": { "$ref": "#/components/schemas/DatasetResponse" },
            "type": "array",
            "title": "Records"
          },
          "page": { "type": "integer", "title": "Page" },
          "size": { "type": "integer", "title": "Size" },
          "total": { "type": "integer", "title": "Total" }
        },
        "type": "object",
        "required": ["records", "page", "size", "total"],
        "title": "PaginatedData[DatasetResponse]"
      },
      "PaginatedData_EvaluationResponse_": {
        "properties": {
          "records": {
            "items": { "$ref": "#/components/schemas/EvaluationResponse" },
            "type": "array",
            "title": "Records"
          },
          "page": { "type": "integer", "title": "Page" },
          "size": { "type": "integer", "title": "Size" },
          "total": { "type": "integer", "title": "Total" }
        },
        "type": "object",
        "required": ["records", "page", "size", "total"],
        "title": "PaginatedData[EvaluationResponse]"
      },
      "PlatformAccessEnum": {
        "type": "string",
        "enum": ["superadmin", "supportadmin", "user"],
        "title": "PlatformAccessEnum",
        "description": "An enumeration."
      },
      "ProjectSortBy": {
        "type": "string",
        "enum": ["created_at", "updated_at", "name"],
        "title": "ProjectSortBy",
        "description": "An enumeration."
      },
      "PromptCallRequest": {
        "properties": {
          "prompt": {
            "allOf": [{ "$ref": "#/components/schemas/PromptVersionRequest" }],
            "title": "Prompt",
            "description": "Details of your Prompt. A new Prompt version will be created if the provided details are new."
          },
          "messages": {
            "items": { "$ref": "#/components/schemas/ChatMessage" },
            "type": "array",
            "title": "Messages",
            "description": "The messages passed to the to provider chat endpoint."
          },
          "tool_choice": {
            "anyOf": [
              { "type": "string", "enum": ["none"] },
              { "type": "string", "enum": ["auto"] },
              { "type": "string", "enum": ["required"] },
              { "$ref": "#/components/schemas/ToolChoice" }
            ],
            "title": "Tool choice",
            "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function."
          },
          "session_id": {
            "type": "string",
            "title": "Session ID",
            "description": "ID of the session to associate the log.Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_id` in subsequent log requests. "
          },
          "parent_id": {
            "type": "string",
            "title": "Parent ID",
            "description": "ID associated to the parent log in a session."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "save": {
            "type": "boolean",
            "title": "Save",
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "default": true
          },
          "source_datapoint_id": {
            "type": "string",
            "title": "Source datapoint ID",
            "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
          },
          "batches": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Batch IDs",
            "description": "Array of batch Ids that this log is part of. Batches are used to group logs together for offline Evaluations"
          },
          "user": {
            "type": "string",
            "title": "End-user identifier",
            "description": "End-user ID related that caused the log."
          },
          "environment": {
            "type": "string",
            "title": "Environment name",
            "description": "The environment name used to create the log."
          },
          "provider_api_keys": {
            "allOf": [{ "$ref": "#/components/schemas/ProviderApiKeys" }],
            "title": "Provider API Keys",
            "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
          },
          "num_samples": {
            "type": "integer",
            "title": "Number of samples",
            "description": "The number of generations.",
            "default": 1
          },
          "stream": {
            "type": "boolean",
            "title": "Whether to stream partial results",
            "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.",
            "default": false
          },
          "return_inputs": {
            "type": "boolean",
            "title": "Return inputs",
            "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true.",
            "default": true
          },
          "logprobs": {
            "type": "integer",
            "title": "Log probabilities of most likely n tokens",
            "description": "Include the log probabilities of the top n tokens in the provider_response"
          },
          "suffix": {
            "type": "string",
            "title": "Completion suffix",
            "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PromptCallRequest",
        "description": "Base request for any generations/logs."
      },
      "PromptInputResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Input name",
            "description": "Type of input."
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "PromptInputResponse"
      },
      "PromptLogRequest": {
        "properties": {
          "output_message": {
            "allOf": [{ "$ref": "#/components/schemas/ChatMessage" }],
            "title": "Output message",
            "description": "The message returned by the provider."
          },
          "prompt_tokens": {
            "type": "integer",
            "title": "Prompt tokens",
            "description": "Number of tokens in the prompt used to generate the output."
          },
          "output_tokens": {
            "type": "integer",
            "title": "Output tokens",
            "description": "Number of tokens in the output generated by the model."
          },
          "prompt_cost": {
            "type": "number",
            "title": "Prompt cost",
            "description": "Cost in dollars associated to the tokens in the prompt."
          },
          "output_cost": {
            "type": "number",
            "title": "Output tokens",
            "description": "Cost in dollars associated to the tokens in the output."
          },
          "finish_reason": {
            "type": "string",
            "title": "Finish reason",
            "description": "Reason the generation finished."
          },
          "prompt": {
            "allOf": [{ "$ref": "#/components/schemas/PromptVersionRequest" }],
            "title": "Prompt",
            "description": "Details of your Prompt. A new Prompt version will be created if the provided details are new."
          },
          "messages": {
            "items": { "$ref": "#/components/schemas/ChatMessage" },
            "type": "array",
            "title": "Messages",
            "description": "The messages passed to the to provider chat endpoint."
          },
          "tool_choice": {
            "anyOf": [
              { "type": "string", "enum": ["none"] },
              { "type": "string", "enum": ["auto"] },
              { "type": "string", "enum": ["required"] },
              { "$ref": "#/components/schemas/ToolChoice" }
            ],
            "title": "Tool choice",
            "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function."
          },
          "output": {
            "type": "string",
            "title": "Model output",
            "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if logging a parent datapoint with the intention to populate it later"
          },
          "raw_output": {
            "type": "string",
            "title": "Raw output",
            "description": "Raw output from the provider."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created at",
            "description": "User defined timestamp for when the log was created. "
          },
          "error": {
            "type": "string",
            "title": "Error",
            "description": "Error message if the log is an error."
          },
          "provider_latency": {
            "type": "number",
            "title": "Log latency",
            "description": "Duration of the logged event in seconds."
          },
          "reference_id": {
            "type": "string",
            "title": "Reference ID",
            "description": "A unique string to reference the datapoint. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a subsequent log request."
          },
          "provider_request": {
            "type": "object",
            "title": "Provider request",
            "description": "Raw request sent to provider."
          },
          "provider_response": {
            "type": "object",
            "title": "Provider response",
            "description": "Raw response received the provider."
          },
          "session_id": {
            "type": "string",
            "title": "Session ID",
            "description": "ID of the session to associate the log.Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_id` in subsequent log requests. "
          },
          "parent_id": {
            "type": "string",
            "title": "Parent ID",
            "description": "ID associated to the parent log in a session."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "save": {
            "type": "boolean",
            "title": "Save",
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "default": true
          },
          "source_datapoint_id": {
            "type": "string",
            "title": "Source datapoint ID",
            "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
          },
          "batches": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Batch IDs",
            "description": "Array of batch Ids that this log is part of. Batches are used to group logs together for offline Evaluations"
          },
          "user": {
            "type": "string",
            "title": "End-user identifier",
            "description": "End-user ID related that caused the log."
          },
          "environment": {
            "type": "string",
            "title": "Environment name",
            "description": "The environment name used to create the log."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PromptLogRequest",
        "description": "Request for creating a Prompt log."
      },
      "PromptRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Prompt name",
            "description": "Name of the Prompt, which is used as a unique identifier."
          },
          "model": {
            "type": "string",
            "title": "Model instance used",
            "description": "The model instance used. E.g. gpt-4."
          },
          "endpoint": {
            "allOf": [{ "$ref": "#/components/schemas/ModelEndpoints" }],
            "title": "Provider endpoint",
            "description": "The provider model endpoint used.",
            "default": "chat"
          },
          "template": {
            "anyOf": [
              { "type": "string" },
              {
                "items": { "$ref": "#/components/schemas/ChatMessage" },
                "type": "array"
              }
            ],
            "title": "Template",
            "description": "For chat endpoint, provide a Chat template. For completion endpoint, provide a Prompt template. Input variables within the template should be specified with double curly bracket syntax: {{INPUT_NAME}}."
          },
          "provider": {
            "allOf": [{ "$ref": "#/components/schemas/ModelProviders" }],
            "title": "Model provider",
            "description": "The company providing the underlying model service.",
            "default": "openai"
          },
          "max_tokens": {
            "type": "integer",
            "title": "Maximum tokens",
            "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt",
            "default": -1
          },
          "temperature": {
            "type": "number",
            "title": "Sampling temperature",
            "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
            "default": 1
          },
          "top_p": {
            "type": "number",
            "title": "Top p probability mass",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
            "default": 1
          },
          "stop": {
            "anyOf": [
              { "type": "string" },
              { "items": { "type": "string" }, "type": "array" }
            ],
            "title": "Stop sequence(s)",
            "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence."
          },
          "presence_penalty": {
            "type": "number",
            "title": "Presence penalty",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
            "default": 0
          },
          "frequency_penalty": {
            "type": "number",
            "title": "Frequency penalty",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
            "default": 0
          },
          "other": {
            "type": "object",
            "title": "Other provider parameters",
            "description": "Other parameter values to be passed to the provider call.",
            "default": {}
          },
          "seed": {
            "type": "integer",
            "title": "Seed",
            "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed."
          },
          "response_format": {
            "allOf": [{ "$ref": "#/components/schemas/ResponseFormat" }],
            "title": "Response format",
            "description": "The format of the response. Only `{\"type\": \"json_object\"}` is currently supported for chat."
          },
          "tools": {
            "items": { "$ref": "#/components/schemas/ToolRequest" },
            "type": "array",
            "title": "Tools",
            "description": "The tool definitions that the model can choose to call if tool calling is supported."
          },
          "linked_tools": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Linked tools",
            "description": "The IDs of the tools that the model can choose to call if tool calling is supported. The default deployed version of that tool is called."
          },
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made."
          }
        },
        "type": "object",
        "required": ["model"],
        "title": "PromptRequest",
        "description": "Request model for creating a new Prompt"
      },
      "PromptResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Prompt ID",
            "description": "Unique identifier for the Prompt. Starts with `pr_`."
          },
          "name": {
            "type": "string",
            "title": "Prompt name",
            "description": "Name of the Prompt, which is used as a unique identifier."
          },
          "version_id": {
            "type": "string",
            "title": "Version ID",
            "description": "Unique identifier for the specific Prompt Version. If no query params provided, the default deployed Prompt Version is returned. Starts with `prv_`."
          },
          "environments": {
            "items": { "$ref": "#/components/schemas/EnvironmentResponse" },
            "type": "array",
            "title": "Environments",
            "description": "The list of environments the Prompt Version is deployed to."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "created_by": {
            "allOf": [{ "$ref": "#/components/schemas/UserResponse" }],
            "title": "Created by",
            "description": "The user who created the Prompt."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/VersionStatus" }],
            "title": "Status",
            "description": "The status of the Prompt Version."
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Used At"
          },
          "model": {
            "type": "string",
            "title": "Model instance used",
            "description": "The model instance used. E.g. gpt-4."
          },
          "endpoint": {
            "allOf": [{ "$ref": "#/components/schemas/ModelEndpoints" }],
            "title": "Provider endpoint",
            "description": "The provider model endpoint used.",
            "default": "chat"
          },
          "template": {
            "anyOf": [
              { "type": "string" },
              {
                "items": { "$ref": "#/components/schemas/ChatMessage" },
                "type": "array"
              }
            ],
            "title": "Template",
            "description": "For chat endpoint, provide a Chat template. For completion endpoint, provide a Prompt template. Input variables within the template should be specified with double curly bracket syntax: {{INPUT_NAME}}."
          },
          "provider": {
            "allOf": [{ "$ref": "#/components/schemas/ModelProviders" }],
            "title": "Model provider",
            "description": "The company providing the underlying model service.",
            "default": "openai"
          },
          "max_tokens": {
            "type": "integer",
            "title": "Maximum tokens",
            "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt",
            "default": -1
          },
          "temperature": {
            "type": "number",
            "title": "Sampling temperature",
            "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
            "default": 1
          },
          "top_p": {
            "type": "number",
            "title": "Top p probability mass",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
            "default": 1
          },
          "stop": {
            "anyOf": [
              { "type": "string" },
              { "items": { "type": "string" }, "type": "array" }
            ],
            "title": "Stop sequence(s)",
            "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence."
          },
          "presence_penalty": {
            "type": "number",
            "title": "Presence penalty",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
            "default": 0
          },
          "frequency_penalty": {
            "type": "number",
            "title": "Frequency penalty",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
            "default": 0
          },
          "other": {
            "type": "object",
            "title": "Other provider parameters",
            "description": "Other parameter values to be passed to the provider call.",
            "default": {}
          },
          "seed": {
            "type": "integer",
            "title": "Seed",
            "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed."
          },
          "response_format": {
            "allOf": [{ "$ref": "#/components/schemas/ResponseFormat" }],
            "title": "Response format",
            "description": "The format of the response. Only `{\"type\": \"json_object\"}` is currently supported for chat."
          },
          "tools": {
            "items": {
              "$ref": "#/components/schemas/src__external__app__models__v5__prompts__ToolResponse"
            },
            "type": "array",
            "title": "Tools",
            "description": "The tool definitions that the model can choose to call if tool calling is supported."
          },
          "linked_tools": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Linked tools",
            "description": "The IDs of the tools that the model can choose to call if tool calling is supported. The default deployed version of that tool is called."
          },
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made."
          },
          "version_logs_count": {
            "type": "integer",
            "title": "Number of logs for this version",
            "description": "The number of logs that have been generated for this Prompt Version"
          },
          "total_logs_count": {
            "type": "integer",
            "title": "Total number of logs across all versions",
            "description": "The number of logs that have been generated across all Prompt Versions"
          },
          "inputs": {
            "items": { "$ref": "#/components/schemas/PromptInputResponse" },
            "type": "array",
            "title": "Prompt inputs",
            "description": "Inputs associated to the Prompt. Inputs correspond to any of the variables used within the Prompt template."
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "version_id",
          "created_at",
          "updated_at",
          "status",
          "last_used_at",
          "model",
          "version_logs_count",
          "total_logs_count",
          "inputs"
        ],
        "title": "PromptResponse",
        "description": "Request model for creating a new Prompt"
      },
      "PromptVersionRequest": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model instance used",
            "description": "The model instance used. E.g. gpt-4."
          },
          "endpoint": {
            "allOf": [{ "$ref": "#/components/schemas/ModelEndpoints" }],
            "title": "Provider endpoint",
            "description": "The provider model endpoint used.",
            "default": "chat"
          },
          "template": {
            "anyOf": [
              { "type": "string" },
              {
                "items": { "$ref": "#/components/schemas/ChatMessage" },
                "type": "array"
              }
            ],
            "title": "Template",
            "description": "For chat endpoint, provide a Chat template. For completion endpoint, provide a Prompt template. Input variables within the template should be specified with double curly bracket syntax: {{INPUT_NAME}}."
          },
          "provider": {
            "allOf": [{ "$ref": "#/components/schemas/ModelProviders" }],
            "title": "Model provider",
            "description": "The company providing the underlying model service.",
            "default": "openai"
          },
          "max_tokens": {
            "type": "integer",
            "title": "Maximum tokens",
            "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt",
            "default": -1
          },
          "temperature": {
            "type": "number",
            "title": "Sampling temperature",
            "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
            "default": 1
          },
          "top_p": {
            "type": "number",
            "title": "Top p probability mass",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
            "default": 1
          },
          "stop": {
            "anyOf": [
              { "type": "string" },
              { "items": { "type": "string" }, "type": "array" }
            ],
            "title": "Stop sequence(s)",
            "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence."
          },
          "presence_penalty": {
            "type": "number",
            "title": "Presence penalty",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
            "default": 0
          },
          "frequency_penalty": {
            "type": "number",
            "title": "Frequency penalty",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
            "default": 0
          },
          "other": {
            "type": "object",
            "title": "Other provider parameters",
            "description": "Other parameter values to be passed to the provider call.",
            "default": {}
          },
          "seed": {
            "type": "integer",
            "title": "Seed",
            "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed."
          },
          "response_format": {
            "allOf": [{ "$ref": "#/components/schemas/ResponseFormat" }],
            "title": "Response format",
            "description": "The format of the response. Only `{\"type\": \"json_object\"}` is currently supported for chat."
          },
          "tools": {
            "items": { "$ref": "#/components/schemas/ToolRequest" },
            "type": "array",
            "title": "Tools",
            "description": "The tool definitions that the model can choose to call if tool calling is supported."
          },
          "linked_tools": {
            "items": { "type": "string" },
            "type": "array",
            "title": "Linked tools",
            "description": "The IDs of the tools that the model can choose to call if tool calling is supported. The default deployed version of that tool is called."
          }
        },
        "type": "object",
        "required": ["model"],
        "title": "PromptVersionRequest"
      },
      "ProviderApiKeys": {
        "properties": {
          "openai": { "type": "string", "title": "Openai" },
          "ai21": { "type": "string", "title": "Ai21" },
          "mock": { "type": "string", "title": "Mock" },
          "anthropic": { "type": "string", "title": "Anthropic" },
          "cohere": { "type": "string", "title": "Cohere" },
          "openai_azure": { "type": "string", "title": "Openai Azure" },
          "openai_azure_endpoint": {
            "type": "string",
            "title": "Openai Azure Endpoint"
          }
        },
        "type": "object",
        "title": "ProviderApiKeys"
      },
      "PythonEvaluatorVersionResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Evaluator Version ID",
            "description": "Unique identifier for the Evaluator Version. Starts with `evv_`."
          },
          "evaluator_id": {
            "type": "string",
            "title": "Evaluator ID",
            "description": "Unique identifier for the Evaluator that this Evaluator Version belongs to. Starts with `ev_`."
          },
          "evaluator": {
            "$ref": "#/components/schemas/EvaluatorVersionEvaluatorResponse"
          },
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/VersionStatus" }],
            "title": "Status",
            "description": "The status of the Evaluator Version."
          },
          "type": {
            "type": "string",
            "enum": ["evaluator"],
            "title": "Type",
            "default": "evaluator"
          },
          "created_by": { "$ref": "#/components/schemas/UserResponse" },
          "num_logs": { "type": "integer", "title": "Num Logs" },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Used At"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "evaluator_type": {
            "type": "string",
            "enum": ["python"],
            "title": "Evaluator type",
            "description": "The type of the evaluator.",
            "default": "python"
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "The code for the evaluator. This code will be executed in a sandboxed environment."
          },
          "arguments_type": {
            "allOf": [
              { "$ref": "#/components/schemas/EvaluatorArgumentsType" }
            ],
            "title": "Arguments type",
            "description": "Whether this evaluator is target-free or target-required."
          },
          "return_type": {
            "allOf": [
              { "$ref": "#/components/schemas/EvaluatorReturnTypeEnum" }
            ],
            "title": "Return type",
            "description": "The type of the return value of the evaluator."
          }
        },
        "type": "object",
        "required": [
          "id",
          "evaluator_id",
          "evaluator",
          "status",
          "num_logs",
          "last_used_at",
          "created_at",
          "updated_at",
          "arguments_type",
          "return_type"
        ],
        "title": "PythonEvaluatorVersionResponse",
        "description": "Base type that all Version Responses should inherit from."
      },
      "ResponseFormat": {
        "properties": {
          "type": { "type": "string", "enum": ["json_object"], "title": "Type" }
        },
        "type": "object",
        "required": ["type"],
        "title": "ResponseFormat",
        "description": "Response format of the model."
      },
      "SortOrder": {
        "type": "string",
        "enum": ["asc", "desc"],
        "title": "SortOrder",
        "description": "An enumeration."
      },
      "TextChatContent": {
        "properties": {
          "type": { "type": "string", "enum": ["text"], "title": "Type" },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "The message's text content."
          }
        },
        "type": "object",
        "required": ["type", "text"],
        "title": "TextChatContent"
      },
      "TimeUnit": {
        "type": "string",
        "enum": ["day", "week", "month"],
        "title": "TimeUnit",
        "description": "An enumeration."
      },
      "ToolCall": {
        "properties": {
          "id": { "type": "string", "title": "Id" },
          "type": {
            "$ref": "#/components/schemas/src__domain__chat_types__enums__ToolType"
          },
          "function": { "$ref": "#/components/schemas/FunctionTool" }
        },
        "type": "object",
        "required": ["id", "type", "function"],
        "title": "ToolCall",
        "description": "A tool call to be made."
      },
      "ToolChoice": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/src__domain__chat_types__enums__ToolType"
          },
          "function": { "$ref": "#/components/schemas/FunctionToolChoice" }
        },
        "type": "object",
        "required": ["type", "function"],
        "title": "ToolChoice",
        "description": "Tool choice to force the model to use a tool."
      },
      "ToolInputResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Input name",
            "description": "Type of input."
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "ToolInputResponse"
      },
      "ToolRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name for the tool referenced by the model."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the tool referenced by the model"
          },
          "parameters": {
            "type": "object",
            "title": "Run arguments schema.",
            "description": "Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/"
          },
          "source": {
            "type": "string",
            "title": "Origin",
            "description": "The origin of the tool"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "ToolRequest"
      },
      "ToolTemplateResponse": {
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__domain__files__tool__ToolType"
              }
            ],
            "title": "Name",
            "description": "Name of Tool if runnable by Humanloop."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the Tool."
          },
          "signature": {
            "type": "string",
            "title": "Signature",
            "description": "Signature of the Tool."
          }
        },
        "type": "object",
        "required": ["name", "description"],
        "title": "ToolTemplateResponse"
      },
      "ToolVersionResponse": {
        "properties": {
          "tool_id": {
            "type": "string",
            "title": "Tool ID",
            "description": "Unique identifier for the Tool that this Tool Version belongs to. Starts with `tl_`."
          },
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name for the Tool referenced by the model."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the Tool referenced by the model"
          },
          "parameters": {
            "type": "object",
            "title": "Tool parameters",
            "description": "Parameters needed to run the Tool, defined in JSON Schema format: https://json-schema.org/"
          },
          "source_code": {
            "type": "string",
            "title": "Source Code",
            "description": "Code source of the Tool."
          },
          "setup_values": {
            "type": "object",
            "title": "Setup values",
            "description": "Values needed to setup the Tool, defined in JSON Schema format: https://json-schema.org/"
          },
          "id": {
            "type": "string",
            "title": "Tool Version ID",
            "description": "Unique identifier for the Tool Version. Starts with `tlv_`."
          },
          "tool": { "$ref": "#/components/schemas/ToolVersionToolResponse" },
          "signature": {
            "type": "string",
            "title": "Signature",
            "description": "The function signature of the tool when being called."
          },
          "status": {
            "allOf": [{ "$ref": "#/components/schemas/VersionStatus" }],
            "title": "Status",
            "description": "The status of the Tool Version."
          },
          "type": {
            "type": "string",
            "enum": ["tool"],
            "title": "Type",
            "default": "tool"
          },
          "created_by": { "$ref": "#/components/schemas/UserResponse" },
          "num_logs": { "type": "integer", "title": "Num Logs" },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Used At"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "tool_id",
          "name",
          "id",
          "tool",
          "status",
          "num_logs",
          "last_used_at",
          "created_at",
          "updated_at"
        ],
        "title": "ToolVersionResponse",
        "description": "Base type that all Version Responses should inherit from."
      },
      "ToolVersionToolResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Tool ID",
            "description": "Unique identifier for Tool. Starts with `tl_`."
          },
          "name": {
            "type": "string",
            "title": "Tool Name",
            "description": "Name of the tool."
          },
          "version_id": { "type": "string", "title": "Version Id" },
          "directory_id": {
            "type": "string",
            "title": "Directory ID",
            "description": "Unique identifier for the Directory the Tool belongs to. Starts with `dir_`."
          },
          "environments": {
            "items": { "$ref": "#/components/schemas/EnvironmentResponse" },
            "type": "array",
            "title": "Environments"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "created_by": { "$ref": "#/components/schemas/UserResponse" },
          "status": { "$ref": "#/components/schemas/VersionStatus" },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Used At"
          },
          "tool_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__domain__files__tool__ToolType"
              }
            ],
            "title": "Tool Type",
            "description": "Type of Tool if runnable by Humanloop. Otherwise `null`."
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "version_id",
          "created_at",
          "updated_at",
          "status",
          "last_used_at"
        ],
        "title": "ToolVersionToolResponse"
      },
      "UpdateDatasetRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Dataset name",
            "description": "Name of the Dataset, which is used as a unique identifier."
          }
        },
        "type": "object",
        "title": "UpdateDatasetRequest"
      },
      "UpdateDatesetAction": {
        "type": "string",
        "enum": ["set", "add", "remove"],
        "title": "UpdateDatesetAction",
        "description": "An enumeration."
      },
      "UpdateEvaluatorRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Evaluator Name",
            "description": "Name of the Evaluator. This has to be unique within your Organization."
          },
          "directory_id": {
            "type": "string",
            "title": "Directory ID",
            "description": "Unique identifier for the Directory to move Evaluator to. Starts with `dir_`."
          }
        },
        "type": "object",
        "title": "UpdateEvaluatorRequest"
      },
      "UpdatePromptRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Prompt name",
            "description": "Name of the Prompt, which is used as a unique identifier."
          }
        },
        "type": "object",
        "title": "UpdatePromptRequest"
      },
      "UpdateToolRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Tool Name",
            "description": "Name of the Tool. This has to be unique within your Organization."
          },
          "directory_id": {
            "type": "string",
            "title": "Directory ID",
            "description": "Unique identifier for the Directory to move Tool to. Starts with `dir_`."
          },
          "tool_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__domain__files__tool__ToolType"
              }
            ],
            "title": "Tool Type",
            "description": "Type of Tool if runnable by Humanloop. Otherwise `null`."
          }
        },
        "type": "object",
        "title": "UpdateToolRequest"
      },
      "UserResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "User ID",
            "description": "Unique identifier for User. Starts with `usr`."
          },
          "email_address": {
            "type": "string",
            "title": "Email address",
            "description": "The User's email address."
          },
          "full_name": {
            "type": "string",
            "title": "Full name",
            "description": "The User's full name."
          }
        },
        "type": "object",
        "required": ["id", "email_address"],
        "title": "UserResponse"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      },
      "VersionDeploymentResponse": {
        "properties": {
          "file": {
            "anyOf": [
              { "$ref": "#/components/schemas/PromptResponse" },
              {
                "$ref": "#/components/schemas/src__external__app__models__v5__tools__tools__ToolResponse"
              },
              { "$ref": "#/components/schemas/DatasetResponse" },
              { "$ref": "#/components/schemas/EvaluatorResponse" }
            ],
            "title": "File",
            "description": "The File that the deployed Version belongs to."
          },
          "environment": {
            "allOf": [{ "$ref": "#/components/schemas/EnvironmentResponse" }],
            "title": "Environment",
            "description": "The Environment that the Version is deployed to."
          },
          "type": { "type": "string", "enum": ["environment"], "title": "Type" }
        },
        "type": "object",
        "required": ["file", "environment", "type"],
        "title": "VersionDeploymentResponse",
        "description": "A variable reference to the Version deployed to an Environment"
      },
      "VersionEvaluatorAggregateResponse": {
        "properties": {
          "version_id": { "type": "string", "title": "Version Id" },
          "evaluator_id": { "type": "string", "title": "Evaluator Id" },
          "evaluator_version_id": {
            "type": "string",
            "title": "Evaluator Version Id"
          },
          "aggregate_value": { "type": "number", "title": "Aggregate Value" }
        },
        "type": "object",
        "required": ["version_id", "evaluator_id", "evaluator_version_id"],
        "title": "VersionEvaluatorAggregateResponse"
      },
      "VersionIdResponse": {
        "properties": {
          "version": {
            "anyOf": [
              { "$ref": "#/components/schemas/ToolVersionResponse" },
              { "$ref": "#/components/schemas/EvaluatorVersionResponse" }
            ],
            "title": "Version",
            "description": "The specific Version being referenced."
          },
          "type": { "type": "string", "enum": ["version"], "title": "Type" }
        },
        "type": "object",
        "required": ["version", "type"],
        "title": "VersionIdResponse",
        "description": "A reference to a specific Version by its ID"
      },
      "VersionReferenceResponse": {
        "oneOf": [
          { "$ref": "#/components/schemas/VersionDeploymentResponse" },
          { "$ref": "#/components/schemas/VersionIdResponse" }
        ],
        "title": "VersionReferenceResponse",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "environment": "#/components/schemas/VersionDeploymentResponse",
            "version": "#/components/schemas/VersionIdResponse"
          }
        }
      },
      "VersionStats": {
        "properties": {
          "version_id": {
            "type": "string",
            "title": "Version ID",
            "description": "Unique identifier for the Evaluated Version."
          },
          "num_logs": {
            "type": "integer",
            "title": "Number of Logs",
            "description": "The total number of existing Logs for this Evaluated Version within the Evaluation Report. These are Logs that have been generated by this Evaluated Version on a Datapoint belonging to the Evaluation Report's Dataset Version."
          },
          "evaluator_version_stats": {
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/NumericEvaluatorVersionStats" },
                { "$ref": "#/components/schemas/BooleanEvaluatorVersionStats" }
              ]
            },
            "type": "array",
            "title": "Evaluator Version Stats",
            "description": "Stats for each Evaluator Version used to evaluate this Evaluated Version."
          }
        },
        "type": "object",
        "required": ["version_id", "num_logs", "evaluator_version_stats"],
        "title": "VersionStats",
        "description": "Stats for an Evaluated Version in the Evaluation Report."
      },
      "VersionStatus": {
        "type": "string",
        "enum": ["uncommitted", "committed", "deleted"],
        "title": "VersionStatus",
        "description": "An enumeration."
      },
      "src__domain__chat_types__enums__ToolType": {
        "type": "string",
        "enum": ["function"],
        "title": "ToolType",
        "description": "The type of tool to call."
      },
      "src__domain__files__tool__ToolType": {
        "type": "string",
        "enum": [
          "pinecone_search",
          "google",
          "mock",
          "snippet",
          "json_schema",
          "get_api_call"
        ],
        "title": "ToolType",
        "description": "Type of tool."
      },
      "src__external__app__models__v5__datasets__DatasetRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Dataset name",
            "description": "Name of the Dataset, which is used as a unique identifier."
          },
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made. If provided, a committed version of the Dataset is created. Otherwise, an uncommitted version is created."
          },
          "datapoints": {
            "items": { "$ref": "#/components/schemas/CreateDatapointRequest" },
            "type": "array",
            "title": "Datapoints",
            "description": "The Datapoints to create this Dataset version with. Modify the `action` field to determine how these Datapoints are used."
          },
          "action": {
            "allOf": [{ "$ref": "#/components/schemas/UpdateDatesetAction" }],
            "title": "Action",
            "description": "The action to take with the provided Datapoints.\n\n - If `\"set\"`, the created version will only contain the Datapoints provided in this request. \n - If `\"add\"`, the created version will contain the Datapoints provided in this request in addition to the Datapoints in the target version. \n - If `\"remove\"`, the created version will contain the Datapoints in the target version except for the Datapoints provided in this request. \n\nIf `\"add\"` or `\"remove\"`, one of the `version_id` or `environment` query parameters may be provided.",
            "default": "set"
          }
        },
        "type": "object",
        "required": ["datapoints"],
        "title": "DatasetRequest"
      },
      "src__external__app__models__v5__evaluations__DatasetRequest": {
        "properties": {
          "version_id": {
            "type": "string",
            "title": "Dataset Version ID",
            "description": "Unique identifier for the Dataset Version to use in this evaluation. Starts with `dsv_`."
          }
        },
        "type": "object",
        "required": ["version_id"],
        "title": "DatasetRequest"
      },
      "src__external__app__models__v5__prompts__ToolResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name for the tool referenced by the model."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the tool referenced by the model"
          },
          "parameters": {
            "type": "object",
            "title": "Run arguments schema.",
            "description": "Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/"
          },
          "source": {
            "type": "string",
            "title": "Origin",
            "description": "The origin of the tool"
          },
          "id": {
            "type": "string",
            "title": "Tool ID",
            "description": "Unique identifier for the Tool version."
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "ToolResponse"
      },
      "src__external__app__models__v5__tools__tools__ToolResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Tool ID",
            "description": "Unique identifier for Tool. Starts with `tl_`."
          },
          "name": {
            "type": "string",
            "title": "Tool Name",
            "description": "Name of the tool."
          },
          "version_id": { "type": "string", "title": "Version Id" },
          "directory_id": {
            "type": "string",
            "title": "Directory ID",
            "description": "Unique identifier for the Directory the Tool belongs to. Starts with `dir_`."
          },
          "environments": {
            "items": { "$ref": "#/components/schemas/EnvironmentResponse" },
            "type": "array",
            "title": "Environments"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "created_by": { "$ref": "#/components/schemas/UserResponse" },
          "status": { "$ref": "#/components/schemas/VersionStatus" },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Used At"
          },
          "tool_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__domain__files__tool__ToolType"
              }
            ],
            "title": "Tool Type",
            "description": "Type of Tool if runnable by Humanloop. Otherwise `null`."
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "version_id",
          "created_at",
          "updated_at",
          "status",
          "last_used_at"
        ],
        "title": "ToolResponse",
        "description": "Base type that all File Responses should inherit from.\n\nAttributes defined here are common to all File Responses and should be overridden\nin the inheriting classes with documentation and appropriate Field definitions."
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-KEY",
        "description": "The Humanloop API uses API keys for authentication. Visit your\n[API Keys](https://app.humanloop.com/account/api-keys) page to retrieve the\nAPI key you'll use in your requests.\n\nThis key allows full access and control over your projects, so keep this secret\nand take care to not expose it in any client-side code.\n\nTo use your API key, include it under the `X-API-KEY` header in your HTTP request.\n\n```bash\ncurl https://api.humanloop.com/v5/projects -H 'X-API-KEY: YOUR_API_KEY'\n```\n\nIf you're using the Python SDK, initialize the client with your API key before\nusing other SDK methods:\n\n```python\nfrom humanloop import Humanloop\nhumanloop = Humanloop(api_key=\"YOUR_API_KEY\")\n```\n\nIf you're using the TypeScript SDK, initialize the client with your API key before\nusing other SDK methods:\n\n```js\nimport { Humanloop } from \"humanloop\";\nconst humanloop = new Humanloop({apiKey: \"YOUR_API_KEY\"});\n```"
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "The Humanloop API uses API keys for authentication. Visit your\n[API Keys](https://app.humanloop.com/account/api-keys) page to retrieve the\nAPI key you'll use in your requests.\n\nThis key allows full access and control over your projects, so keep this secret\nand take care to not expose it in any client-side code.\n\nTo use your API key, include it under the `X-API-KEY` header in your HTTP request.\n\n```bash\ncurl https://api.humanloop.com/v5/projects -H 'X-API-KEY: YOUR_API_KEY'\n```\n\nIf you're using the Python SDK, initialize the client with your API key before\nusing other SDK methods:\n\n```python\nfrom humanloop import Humanloop\nhumanloop = Humanloop(api_key=\"YOUR_API_KEY\")\n```\n\nIf you're using the TypeScript SDK, initialize the client with your API key before\nusing other SDK methods:\n\n```js\nimport { Humanloop } from \"humanloop\";\nconst humanloop = new Humanloop({apiKey: \"YOUR_API_KEY\"});\n```"
    },
    {
      "name": "Prompts",
      "description": "Prompts define how a large language model behaves.\n\n#### What is a Prompt?\n\nA Prompt on Humanloop encapsulates the instructions and other configuration for how a large language model should \nperform a specific task.\n\nCheck out our [docs](https://humanloop.com/docs/prompts) for more details.    \n\nPrompts have immutable versions that you can commit and deploy.\nTo use a Prompt, you can **Call** it to create a generation or **Log** generations manually.\n\n#### Referencing a Prompt version\n\nYou can perform actions on a specific Prompt version by specifying either the `version_id`\nor `environment` query parameter in the request. If you provide a `version_id`, Humanloop will\nuse the specified version of the Prompt. If you provide an `environment`, Humanloop will use the\nversion of the Prompt that is currently deployed to that Environment.\nIf you do not provide either a `version_id` or `environment`, Humanloop will use the Prompt version\nthat is deployed to the default Environment.\n\n"
    },
    {
      "name": "Datasets",
      "description": "Datasets are collections of input-output pairs that you can use within Humanloop for Evaluations.\n\n#### What is a Dataset?\n\nA Dataset is a collection of unique Datapoints. These Datapoints contain `inputs` and `target` fields. The `inputs`\nare used to populate a Prompt's template and the `target` can be referenced by Evaluators to evaluate the quality of\nthe generated output.\n\nNote that Humanloop automatically deduplicates Datapoints. If you try to add a Datapoint that already exists, it will \nbe ignored. If you intentionally want to add a duplicate Datapoint, you can add a unique identifier to the Datapoint's \ninputs such as `{_dedupe_id: <unique ID>}`.\n\n### Creating Dataset versions\n\nDatasets have immutable versions. To add/remove Datapoint to/from an existing version, use the **Create** endpoint \nand specify `action` as `\"add\"` or `\"remove\"` respectively. You may also specify the `version_id` or `environment` \nquery parameters to identify the existing version to base the new version on. If neither is provided, the version \ndeployed to the default environment will be used.\n\n"
    },
    {
      "name": "Evaluations",
      "description": "Evaluations help you measure the performance of your Prompts and Tools.\n\nAn Evaluation consists of a Dataset, Evaluatees (i.e. Versions to evaluate), and Evaluators. \nWhen an Evaluation is created, Humanloop will start generating Logs, iterating through Datapoints in the Dataset,\nfor each Evaluatee. The Evaluators will then run on these Logs.\n\nAggregate stats for these can then be viewed in the Humanloop app or retrieved with the Get Evaluation Stats endpoint.\n\nNote that when an Evaluation is created, Humanloop will attempt to reuse any existing Logs for each Datapoint-Evaluatee\npair. This means that you can create multiple Evaluations without generating new Logs unnecessarily.\n\n"
    }
  ],
  "x-readme": { "samples-languages": ["python", "javascript", "curl"] }
}
