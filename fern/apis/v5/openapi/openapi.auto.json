{
  "openapi": "3.0.2",
  "info": {
    "title": "Humanloop API",
    "description": "The Humanloop API allows you to interact with Humanloop from your product or service.\n\nYou can do this through HTTP requests from any language or via our official Python or TypeScript SDK.\n\nTo install the official [Python SDK](https://pypi.org/project/humanloop/), run the following command:\n\n```bash\npip install humanloop\n```\n\nTo install the official [TypeScript SDK](https://www.npmjs.com/package/humanloop), run the following command:\n\n```bash\nnpm i humanloop\n```\n\n---\n\nGuides and further details about key concepts can be found in [our docs](https://docs.humanloop.com/).",
    "version": "5.0.0"
  },
  "servers": [
    {
      "url": "https://api.humanloop.com/v5",
      "description": "Production server"
    }
  ],
  "paths": {
    "/prompts/log": {
      "post": {
        "tags": ["Prompts"],
        "summary": "Log",
        "description": "Log to a Prompt.\n\nYou can use query parameters `version_id`, or `environment`, to target\nan existing version of the Prompt. Otherwise, the default deployed version will be chosen.\n\nInstead of targeting an existing version explicitly, you can instead pass in\nPrompt details in the request body. In this case, we will check if the details correspond\nto an existing version of the Prompt. If they do not, we will create a new version. This is helpful\nin the case where you are storing or deriving your Prompt details in code.",
        "operationId": "log_prompts_log_post",
        "parameters": [
          {
            "description": "A specific Version ID of the Prompt to log to.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "A specific Version ID of the Prompt to log to."
            },
            "name": "version_id",
            "in": "query"
          },
          {
            "description": "Name of the Environment identifying a deployed version to log to.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Environment",
              "description": "Name of the Environment identifying a deployed version to log to."
            },
            "name": "environment",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromptLogRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePromptLogResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/prompts/{id}/log/{log_id}": {
      "patch": {
        "tags": ["Prompts"],
        "summary": "Update Log",
        "description": "Update a Log.\n\nUpdate the details of a Log with the given ID.",
        "operationId": "Prompts_update",
        "parameters": [
          {
            "description": "Unique identifier for Prompt.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt ID",
              "description": "Unique identifier for Prompt."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the Log.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Log ID",
              "description": "Unique identifier for the Log."
            },
            "name": "log_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromptLogUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/prompts/call": {
      "post": {
        "tags": ["Prompts"],
        "summary": "Call",
        "description": "Call a Prompt.\n\nCalling a Prompt calls the model provider before logging\nthe request, responses and metadata to Humanloop.\n\nYou can use query parameters `version_id`, or `environment`, to target\nan existing version of the Prompt. Otherwise the default deployed version will be chosen.\n\nInstead of targeting an existing version explicitly, you can instead pass in\nPrompt details in the request body. In this case, we will check if the details correspond\nto an existing version of the Prompt. If they do not, we will create a new version. This is helpful\nin the case where you are storing or deriving your Prompt details in code.",
        "operationId": "call_prompts_call_post",
        "parameters": [
          {
            "description": "A specific Version ID of the Prompt to log to.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "A specific Version ID of the Prompt to log to."
            },
            "name": "version_id",
            "in": "query"
          },
          {
            "description": "Name of the Environment identifying a deployed version to log to.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Environment",
              "description": "Name of the Environment identifying a deployed version to log to."
            },
            "name": "environment",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromptCallRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/PromptCallResponse"
                    },
                    {
                      "$ref": "#/components/schemas/PromptCallStreamResponse"
                    }
                  ],
                  "title": "Response Call Prompts Call Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "x-fern-sdk-group-name": "prompts",
        "x-fern-streaming": {
          "format": "sse",
          "stream-condition": "$request.stream",
          "response": {
            "$ref": "#/components/schemas/PromptCallResponse"
          },
          "response-stream": {
            "$ref": "#/components/schemas/PromptCallStreamResponse"
          }
        },
        "x-fern-sdk-method-name": "call"
      }
    },
    "/prompts": {
      "get": {
        "tags": ["Prompts"],
        "summary": "List ",
        "description": "Get a list of all Prompts.",
        "operationId": "list__prompts_get",
        "parameters": [
          {
            "description": "Page number for pagination.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "Page number",
              "description": "Page number for pagination.",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "description": "Page size for pagination. Number of Prompts to fetch.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Page size",
              "description": "Page size for pagination. Number of Prompts to fetch.",
              "default": 10
            },
            "name": "size",
            "in": "query"
          },
          {
            "description": "Case-insensitive filter for Prompt name.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Prompt name filter",
              "description": "Case-insensitive filter for Prompt name."
            },
            "name": "name",
            "in": "query"
          },
          {
            "description": "Case-insensitive filter for users in the Prompt. This filter matches against both email address and name of users.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "User filter",
              "description": "Case-insensitive filter for users in the Prompt. This filter matches against both email address and name of users."
            },
            "name": "user_filter",
            "in": "query"
          },
          {
            "description": "Field to sort Prompts by",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ProjectSortBy"
                }
              ],
              "title": "Sort by",
              "description": "Field to sort Prompts by",
              "default": "created_at"
            },
            "name": "sort_by",
            "in": "query"
          },
          {
            "description": "Direction to sort by.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "title": "Sort order",
              "description": "Direction to sort by.",
              "default": "desc"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedData_PromptResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Prompts"],
        "summary": "Upsert",
        "description": "Create a Prompt or update it with a new version if it already exists.\n\nPrompts are identified by the `ID` or their `path`. The parameters (i.e. the prompt template, temperature, model etc.) determine the versions of the Prompt.\n\nIf you provide a commit message, then the new version will be committed;\notherwise it will be uncommitted. If you try to commit an already committed version,\nan exception will be raised.",
        "operationId": "upsert_prompts_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromptRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/prompts/{id}": {
      "get": {
        "tags": ["Prompts"],
        "summary": "Get",
        "description": "Retrieve the Prompt with the given ID.\n\nBy default, the deployed version of the Prompt is returned. Use the query parameters\n`version_id` or `environment` to target a specific version of the Prompt.",
        "operationId": "get_prompts__id__get",
        "parameters": [
          {
            "description": "Unique identifier for Prompt.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt ID",
              "description": "Unique identifier for Prompt."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "A specific Version ID of the Prompt to retrieve.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "A specific Version ID of the Prompt to retrieve."
            },
            "name": "version_id",
            "in": "query"
          },
          {
            "description": "Name of the Environment to retrieve a deployed Version from.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Environment",
              "description": "Name of the Environment to retrieve a deployed Version from."
            },
            "name": "environment",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Prompts"],
        "summary": "Delete",
        "description": "Delete the Prompt with the given ID.",
        "operationId": "delete_prompts__id__delete",
        "parameters": [
          {
            "description": "Unique identifier for Prompt.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt ID",
              "description": "Unique identifier for Prompt."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "patch": {
        "tags": ["Prompts"],
        "summary": "Move",
        "description": "Move the Prompt to a different path or change the name.",
        "operationId": "move_prompts__id__patch",
        "parameters": [
          {
            "description": "Unique identifier for Prompt.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt ID",
              "description": "Unique identifier for Prompt."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/prompts/{id}/versions": {
      "get": {
        "tags": ["Prompts"],
        "summary": "List Versions",
        "description": "Get a list of all the versions of a Prompt.",
        "operationId": "list_versions_prompts__id__versions_get",
        "parameters": [
          {
            "description": "Unique identifier for Prompt.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt ID",
              "description": "Unique identifier for Prompt."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/VersionStatus"
                }
              ],
              "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned."
            },
            "name": "status",
            "in": "query"
          },
          {
            "description": "Whether to include Evaluator aggregate results for the versions in the response",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Evaluator Aggregates",
              "description": "Whether to include Evaluator aggregate results for the versions in the response"
            },
            "name": "evaluator_aggregates",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPrompts"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/prompts/{id}/versions/{version_id}/commit": {
      "post": {
        "tags": ["Prompts"],
        "summary": "Commit",
        "description": "Commit a version of the Prompt with a commit message.\n\nIf the version is already committed, an exception will be raised.",
        "operationId": "commit_prompts__id__versions__version_id__commit_post",
        "parameters": [
          {
            "description": "Unique identifier for Prompt.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt ID",
              "description": "Unique identifier for Prompt."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the specific version of the Prompt.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "Unique identifier for the specific version of the Prompt."
            },
            "name": "version_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/prompts/{id}/evaluators": {
      "post": {
        "tags": ["Prompts"],
        "summary": "Update Monitoring",
        "description": "Activate and deactivate Evaluators for monitoring the Prompt.\n\nAn activated Evaluator will automatically be run on all new Logs\nwithin the Prompt for monitoring purposes.",
        "operationId": "update_monitoring_prompts__id__evaluators_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluatorActivationDeactivationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/prompts/{id}/environments/{environment_id}": {
      "post": {
        "tags": ["Prompts"],
        "summary": "Set Deployment",
        "description": "Deploy Prompt to an Environment.\n\nSet the deployed version for the specified Environment. This Prompt\nwill be used for calls made to the Prompt in this Environment.",
        "operationId": "set_deployment_prompts__id__environments__environment_id__post",
        "parameters": [
          {
            "description": "Unique identifier for Prompt.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt ID",
              "description": "Unique identifier for Prompt."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the Environment to deploy the Version to.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Environment ID",
              "description": "Unique identifier for the Environment to deploy the Version to."
            },
            "name": "environment_id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the specific version of the Prompt.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "Unique identifier for the specific version of the Prompt."
            },
            "name": "version_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Prompts"],
        "summary": "Remove Deployment",
        "description": "Remove deployed Prompt from the Environment.\n\nRemove the deployed version for the specified Environment. This Prompt\nwill no longer be used for calls made to the Prompt in this Environment.",
        "operationId": "remove_deployment_prompts__id__environments__environment_id__delete",
        "parameters": [
          {
            "description": "Unique identifier for Prompt.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt ID",
              "description": "Unique identifier for Prompt."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the Environment to remove the deployment from.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Environment ID",
              "description": "Unique identifier for the Environment to remove the deployment from."
            },
            "name": "environment_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/prompts/{id}/environments": {
      "get": {
        "tags": ["Prompts"],
        "summary": "List Environments",
        "description": "List all Environments and their deployed versions for the Prompt.",
        "operationId": "list_environments_prompts__id__environments_get",
        "parameters": [
          {
            "description": "Unique identifier for Prompt.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt ID",
              "description": "Unique identifier for Prompt."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FileEnvironmentResponse"
                  },
                  "type": "array",
                  "title": "Response List Environments Prompts  Id  Environments Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/tools/log": {
      "post": {
        "tags": ["Tools"],
        "summary": "Log",
        "description": "Log to a Tool.\n\nYou can use query parameters `version_id`, or `environment`, to target\nan existing version of the Tool. Otherwise the default deployed version will be chosen.\n\nInstead of targeting an existing version explicitly, you can instead pass in\nTool details in the request body. In this case, we will check if the details correspond\nto an existing version of the Tool, if not we will create a new version. This is helpful\nin the case where you are storing or deriving your Tool details in code.",
        "operationId": "log_tools_log_post",
        "parameters": [
          {
            "description": "A specific Version ID of the Tool to log to.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "A specific Version ID of the Tool to log to."
            },
            "name": "version_id",
            "in": "query"
          },
          {
            "description": "Name of the Environment identifying a deployed version to log to.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Environment",
              "description": "Name of the Environment identifying a deployed version to log to."
            },
            "name": "environment",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToolLogRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateToolLogResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/tools/{id}/log/{log_id}": {
      "patch": {
        "tags": ["Tools"],
        "summary": "Update Log",
        "description": "Update a Log.\n\nUpdate the details of a Log with the given ID.",
        "operationId": "Tools_update",
        "parameters": [
          {
            "description": "Unique identifier for Prompt.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt ID",
              "description": "Unique identifier for Prompt."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the Log.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Log ID",
              "description": "Unique identifier for the Log."
            },
            "name": "log_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToolLogUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/tools": {
      "get": {
        "tags": ["Tools"],
        "summary": "List ",
        "description": "Get a list of all Tools.",
        "operationId": "list__tools_get",
        "parameters": [
          {
            "description": "Page offset for pagination.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "Page index",
              "description": "Page offset for pagination.",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "description": "Page size for pagination. Number of Tools to fetch.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Page size",
              "description": "Page size for pagination. Number of Tools to fetch.",
              "default": 10
            },
            "name": "size",
            "in": "query"
          },
          {
            "description": "Case-insensitive filter for Tool name.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Tool name filter",
              "description": "Case-insensitive filter for Tool name."
            },
            "name": "name",
            "in": "query"
          },
          {
            "description": "Case-insensitive filter for users in the Tool. This filter matches against both email address and name of users.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "User filter",
              "description": "Case-insensitive filter for users in the Tool. This filter matches against both email address and name of users."
            },
            "name": "user_filter",
            "in": "query"
          },
          {
            "description": "Field to sort Tools by",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ProjectSortBy"
                }
              ],
              "title": "Sort by",
              "description": "Field to sort Tools by",
              "default": "created_at"
            },
            "name": "sort_by",
            "in": "query"
          },
          {
            "description": "Direction to sort by.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "title": "Sort order",
              "description": "Direction to sort by.",
              "default": "desc"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedData_ToolResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Tools"],
        "summary": "Upsert",
        "description": "Create a Tool or update it with a new version if it already exists.\n\nTools are identified by the `ID` or their `path`. The name, description and parameters determine the versions of the Tool.\n\nIf you provide a commit message, then the new version will be committed;\notherwise it will be uncommitted. If you try to commit an already committed version,\nan exception will be raised.",
        "operationId": "upsert_tools_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToolRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToolResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/tools/{id}": {
      "get": {
        "tags": ["Tools"],
        "summary": "Get",
        "description": "Retrieve the Tool with the given ID.\n\nBy default, the deployed version of the Tool is returned. Use the query parameters\n`version_id` or `environment` to target a specific version of the Tool.",
        "operationId": "get_tools__id__get",
        "parameters": [
          {
            "description": "Unique identifier for Tool.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tool ID",
              "description": "Unique identifier for Tool."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "A specific Version ID of the Tool to retrieve.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "A specific Version ID of the Tool to retrieve."
            },
            "name": "version_id",
            "in": "query"
          },
          {
            "description": "Name of the Environment to retrieve a deployed Version from.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Environment",
              "description": "Name of the Environment to retrieve a deployed Version from."
            },
            "name": "environment",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToolResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Tools"],
        "summary": "Delete",
        "description": "Delete the Tool with the given ID.",
        "operationId": "delete_tools__id__delete",
        "parameters": [
          {
            "description": "Unique identifier for Tool.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tool ID",
              "description": "Unique identifier for Tool."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "patch": {
        "tags": ["Tools"],
        "summary": "Move",
        "description": "Move the Tool to a different path or change the name.",
        "operationId": "move_tools__id__patch",
        "parameters": [
          {
            "description": "Unique identifier for Tool.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tool ID",
              "description": "Unique identifier for Tool."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateToolRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToolResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/tools/{id}/versions": {
      "get": {
        "tags": ["Tools"],
        "summary": "List Versions",
        "description": "Get a list of all the versions of a Tool.",
        "operationId": "list_versions_tools__id__versions_get",
        "parameters": [
          {
            "description": "Unique identifier for the Tool.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tool ID",
              "description": "Unique identifier for the Tool."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/VersionStatus"
                }
              ],
              "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned."
            },
            "name": "status",
            "in": "query"
          },
          {
            "description": "Whether to include Evaluator aggregate results for the versions in the response",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Evaluator Aggregates",
              "description": "Whether to include Evaluator aggregate results for the versions in the response"
            },
            "name": "evaluator_aggregates",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTools"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/tools/{id}/versions/{version_id}/commit": {
      "post": {
        "tags": ["Tools"],
        "summary": "Commit",
        "description": "Commit a version of the Tool with a commit message.\n\nIf the version is already committed, an exception will be raised.",
        "operationId": "commit_tools__id__versions__version_id__commit_post",
        "parameters": [
          {
            "description": "Unique identifier for Tool.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tool ID",
              "description": "Unique identifier for Tool."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the specific version of the Tool.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "Unique identifier for the specific version of the Tool."
            },
            "name": "version_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToolResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/tools/{id}/evaluators": {
      "post": {
        "tags": ["Tools"],
        "summary": "Update Monitoring",
        "description": "Activate and deactivate Evaluators for monitoring the Tool.\n\nAn activated Evaluator will automatically be run on all new Logs\nwithin the Tool for monitoring purposes.",
        "operationId": "update_monitoring_tools__id__evaluators_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluatorActivationDeactivationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToolResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/tools/{id}/environments/{environment_id}": {
      "post": {
        "tags": ["Tools"],
        "summary": "Set Deployment",
        "description": "Deploy Tool to an Environment.\n\nSet the deployed version for the specified Environment. This Prompt\nwill be used for calls made to the Tool in this Environment.",
        "operationId": "set_deployment_tools__id__environments__environment_id__post",
        "parameters": [
          {
            "description": "Unique identifier for Tool.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tool ID",
              "description": "Unique identifier for Tool."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the Environment to deploy the Version to.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Environment ID",
              "description": "Unique identifier for the Environment to deploy the Version to."
            },
            "name": "environment_id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the specific version of the Tool.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "Unique identifier for the specific version of the Tool."
            },
            "name": "version_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToolResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Tools"],
        "summary": "Remove Deployment",
        "description": "Remove deployed Tool from the Environment.\n\nRemove the deployed version for the specified Environment. This Tool\nwill no longer be used for calls made to the Tool in this Environment.",
        "operationId": "remove_deployment_tools__id__environments__environment_id__delete",
        "parameters": [
          {
            "description": "Unique identifier for Tool.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tool ID",
              "description": "Unique identifier for Tool."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the Environment to remove the deployment from.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Environment ID",
              "description": "Unique identifier for the Environment to remove the deployment from."
            },
            "name": "environment_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/tools/{id}/environments": {
      "get": {
        "tags": ["Tools"],
        "summary": "List Environments",
        "description": "List all Environments and their deployed versions for the Tool.",
        "operationId": "list_environments_tools__id__environments_get",
        "parameters": [
          {
            "description": "Unique identifier for Tool.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tool ID",
              "description": "Unique identifier for Tool."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FileEnvironmentResponse"
                  },
                  "type": "array",
                  "title": "Response List Environments Tools  Id  Environments Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/datasets": {
      "get": {
        "tags": ["Datasets"],
        "summary": "List ",
        "description": "List all Datasets.",
        "operationId": "list__datasets_get",
        "parameters": [
          {
            "description": "Page offset for pagination.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "Page index",
              "description": "Page offset for pagination.",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "description": "Page size for pagination. Number of Datasets to fetch.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Page size",
              "description": "Page size for pagination. Number of Datasets to fetch.",
              "default": 10
            },
            "name": "size",
            "in": "query"
          },
          {
            "description": "Case-insensitive filter for Dataset name.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Dataset name filter",
              "description": "Case-insensitive filter for Dataset name."
            },
            "name": "name",
            "in": "query"
          },
          {
            "description": "Case-insensitive filter for users in the Dataset. This filter matches against both email address and name of users.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "User filter",
              "description": "Case-insensitive filter for users in the Dataset. This filter matches against both email address and name of users."
            },
            "name": "user_filter",
            "in": "query"
          },
          {
            "description": "Field to sort Datasets by",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ProjectSortBy"
                }
              ],
              "title": "Sort by",
              "description": "Field to sort Datasets by",
              "default": "created_at"
            },
            "name": "sort_by",
            "in": "query"
          },
          {
            "description": "Direction to sort by.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "title": "Sort order",
              "description": "Direction to sort by.",
              "default": "desc"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedData_DatasetResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Datasets"],
        "summary": "Upsert",
        "description": "Create a Dataset or update it with a new version if it already exists.\n\nDatasets are identified by the `ID` or their `path`. The datapoints determine the versions of the Dataset.\n\nBy default, the new Dataset version will be set to the list of Datapoints provided in\nthe request. You can also create a new version by adding or removing Datapoints from an existing version\nby specifying `action` as `add` or `remove` respectively. In this case, you may specify\nthe `version_id` or `environment` query parameters to identify the existing version to base\nthe new version on. If neither is provided, the default deployed version will be used.\n\nIf you provide a commit message, then the new version will be committed;\notherwise it will be uncommitted. If you try to commit an already committed version,\nan exception will be raised.\n\nHumanloop also deduplicates Datapoints. If you try to add a Datapoint that already\nexists, it will be ignored. If you intentionally want to add a duplicate Datapoint,\nyou can add a unique identifier to the Datapoint's inputs such as `{_dedupe_id: <unique ID>}`.",
        "operationId": "upsert_datasets_post",
        "parameters": [
          {
            "description": "ID of the specific Dataset version to base the created Version on. Only used when `action` is `\"add\"` or `\"remove\"`.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "ID of the specific Dataset version to base the created Version on. Only used when `action` is `\"add\"` or `\"remove\"`."
            },
            "name": "version_id",
            "in": "query"
          },
          {
            "description": "Name of the Environment identifying a deployed Version to base the created Version on. Only used when `action` is `\"add\"` or `\"remove\"`.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Environment",
              "description": "Name of the Environment identifying a deployed Version to base the created Version on. Only used when `action` is `\"add\"` or `\"remove\"`."
            },
            "name": "environment",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/src__external__app__models__v5__datasets__DatasetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/datasets/{id}": {
      "get": {
        "tags": ["Datasets"],
        "summary": "Get",
        "description": "Retrieve the Dataset with the given ID.\n\nUnless `include_datapoints` is set to `true`, the response will not include\nthe Datapoints.\nUse the List Datapoints endpoint (`GET /{id}/datapoints`) to efficiently\nretrieve Datapoints for a large Dataset.\n\nBy default, the deployed version of the Dataset is returned. Use the query parameters\n`version_id` or `environment` to target a specific version of the Dataset.",
        "operationId": "get_datasets__id__get",
        "parameters": [
          {
            "description": "Unique identifier for Dataset.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset ID",
              "description": "Unique identifier for Dataset."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "A specific Version ID of the Dataset to retrieve.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "A specific Version ID of the Dataset to retrieve."
            },
            "name": "version_id",
            "in": "query"
          },
          {
            "description": "Name of the Environment to retrieve a deployed Version from.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Environment",
              "description": "Name of the Environment to retrieve a deployed Version from."
            },
            "name": "environment",
            "in": "query"
          },
          {
            "description": "If set to `true`, include all Datapoints in the response. Defaults to `false`. Consider using the paginated List Datapoints endpoint instead.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Include Datapoints",
              "description": "If set to `true`, include all Datapoints in the response. Defaults to `false`. Consider using the paginated List Datapoints endpoint instead.",
              "default": false
            },
            "name": "include_datapoints",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Datasets"],
        "summary": "Delete",
        "description": "Delete the Dataset with the given ID.",
        "operationId": "delete_datasets__id__delete",
        "parameters": [
          {
            "description": "Unique identifier for Dataset.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset ID",
              "description": "Unique identifier for Dataset."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "patch": {
        "tags": ["Datasets"],
        "summary": "Move",
        "description": "Move the Dataset to a different path or change the name.",
        "operationId": "move_datasets__id__patch",
        "parameters": [
          {
            "description": "Unique identifier for Dataset.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset ID",
              "description": "Unique identifier for Dataset."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDatasetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/datasets/{id}/datapoints": {
      "get": {
        "tags": ["Datasets"],
        "summary": "List Datapoints",
        "description": "List all Datapoints for the Dataset with the given ID.",
        "operationId": "list_datapoints_datasets__id__datapoints_get",
        "parameters": [
          {
            "description": "Unique identifier for Dataset.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset ID",
              "description": "Unique identifier for Dataset."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "A specific Version ID of the Dataset to retrieve.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version Id",
              "description": "A specific Version ID of the Dataset to retrieve."
            },
            "name": "version_id",
            "in": "query"
          },
          {
            "description": "Name of the Environment to retrieve a deployed Version from.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Environment",
              "description": "Name of the Environment to retrieve a deployed Version from."
            },
            "name": "environment",
            "in": "query"
          },
          {
            "description": "Page number for pagination.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "Page",
              "description": "Page number for pagination.",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "description": "Page size for pagination. Number of Datapoints to fetch.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Size",
              "description": "Page size for pagination. Number of Datapoints to fetch.",
              "default": 50
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedData_DatapointResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/datasets/{id}/versions": {
      "get": {
        "tags": ["Datasets"],
        "summary": "List Versions",
        "description": "Get a list of the versions for a Dataset.",
        "operationId": "list_versions_datasets__id__versions_get",
        "parameters": [
          {
            "description": "Unique identifier for Dataset.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset ID",
              "description": "Unique identifier for Dataset."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/VersionStatus"
                }
              ],
              "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned."
            },
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDatasets"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/datasets/{id}/versions/{version_id}/commit": {
      "post": {
        "tags": ["Datasets"],
        "summary": "Commit",
        "description": "Commit a version of the Dataset with a commit message.\n\nIf the version is already committed, an exception will be raised.",
        "operationId": "commit_datasets__id__versions__version_id__commit_post",
        "parameters": [
          {
            "description": "Unique identifier for Dataset.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset ID",
              "description": "Unique identifier for Dataset."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the specific version of the Dataset.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "Unique identifier for the specific version of the Dataset."
            },
            "name": "version_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/datasets/{id}/datapoints/csv": {
      "post": {
        "tags": ["Datasets"],
        "summary": "Upload Csv",
        "description": "Add Datapoints from a CSV file to a Dataset.\n\nThis will create a new committed version of the Dataset with the Datapoints from the CSV file.\n\nIf either `version_id` or `environment` is provided, the new version will be based on the specified version,\nwith the Datapoints from the CSV file added to the existing Datapoints in the version.\nIf neither `version_id` nor `environment` is provided, the new version will be based on the version\nof the Dataset that is deployed to the default Environment.",
        "operationId": "upload_csv_datasets__id__datapoints_csv_post",
        "parameters": [
          {
            "description": "Unique identifier for the Dataset",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset ID",
              "description": "Unique identifier for the Dataset"
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "ID of the specific Dataset version to base the created Version on.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "ID of the specific Dataset version to base the created Version on."
            },
            "name": "version_id",
            "in": "query"
          },
          {
            "description": "Name of the Environment identifying a deployed Version to base the created Version on.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Environment",
              "description": "Name of the Environment identifying a deployed Version to base the created Version on."
            },
            "name": "environment",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_csv_datasets__id__datapoints_csv_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/datasets/{id}/environments/{environment_id}": {
      "post": {
        "tags": ["Datasets"],
        "summary": "Set Deployment",
        "description": "Deploy Dataset to Environment.\n\nSet the deployed version for the specified Environment.",
        "operationId": "set_deployment_datasets__id__environments__environment_id__post",
        "parameters": [
          {
            "description": "Unique identifier for Dataset.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset ID",
              "description": "Unique identifier for Dataset."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the Environment to deploy the Version to.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Environment ID",
              "description": "Unique identifier for the Environment to deploy the Version to."
            },
            "name": "environment_id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the specific version of the Dataset.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "Unique identifier for the specific version of the Dataset."
            },
            "name": "version_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Datasets"],
        "summary": "Remove Deployment",
        "description": "Remove deployed Dataset from Environment.\n\nRemove the deployed version for the specified Environment.",
        "operationId": "remove_deployment_datasets__id__environments__environment_id__delete",
        "parameters": [
          {
            "description": "Unique identifier for Dataset.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset ID",
              "description": "Unique identifier for Dataset."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the Environment to remove the deployment from.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Environment ID",
              "description": "Unique identifier for the Environment to remove the deployment from."
            },
            "name": "environment_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/datasets/{id}/environments": {
      "get": {
        "tags": ["Datasets"],
        "summary": "List Environments",
        "description": "List all Environments and their deployed versions for the Dataset.",
        "operationId": "list_environments_datasets__id__environments_get",
        "parameters": [
          {
            "description": "Unique identifier for Dataset.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset ID",
              "description": "Unique identifier for Dataset."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FileEnvironmentResponse"
                  },
                  "type": "array",
                  "title": "Response List Environments Datasets  Id  Environments Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/evaluators": {
      "get": {
        "tags": ["Evaluators"],
        "summary": "List ",
        "description": "Get a list of all Evaluators.",
        "operationId": "list__evaluators_get",
        "parameters": [
          {
            "description": "Page offset for pagination.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "Page index",
              "description": "Page offset for pagination.",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "description": "Page size for pagination. Number of Evaluators to fetch.",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Page size",
              "description": "Page size for pagination. Number of Evaluators to fetch.",
              "default": 10
            },
            "name": "size",
            "in": "query"
          },
          {
            "description": "Case-insensitive filter for Evaluator name.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Evaluator name filter",
              "description": "Case-insensitive filter for Evaluator name."
            },
            "name": "name",
            "in": "query"
          },
          {
            "description": "Case-insensitive filter for users in the Evaluator. This filter matches against both email address and name of users.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "User filter",
              "description": "Case-insensitive filter for users in the Evaluator. This filter matches against both email address and name of users."
            },
            "name": "user_filter",
            "in": "query"
          },
          {
            "description": "Field to sort Evaluators by",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ProjectSortBy"
                }
              ],
              "title": "Sort by",
              "description": "Field to sort Evaluators by",
              "default": "created_at"
            },
            "name": "sort_by",
            "in": "query"
          },
          {
            "description": "Direction to sort by.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "title": "Sort order",
              "description": "Direction to sort by.",
              "default": "desc"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedData_EvaluatorResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Evaluators"],
        "summary": "Upsert",
        "description": "Create an Evaluator or update it with a new version if it already exists.\n\nEvaluators are identified by the `ID` or their `path`. The spec provided determines the version of the Evaluator.\n\nIf you provide a commit message, then the new version will be committed;\notherwise it will be uncommitted. If you try to commit an already committed version,\nan exception will be raised.",
        "operationId": "upsert_evaluators_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/src__external__app__models__v5__evaluators__EvaluatorRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/evaluators/{id}": {
      "get": {
        "tags": ["Evaluators"],
        "summary": "Get",
        "description": "Retrieve the Evaluator with the given ID.\n\nBy default, the deployed version of the Evaluator is returned. Use the query parameters\n`version_id` or `environment` to target a specific version of the Evaluator.",
        "operationId": "get_evaluators__id__get",
        "parameters": [
          {
            "description": "Unique identifier for Evaluator.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluator ID",
              "description": "Unique identifier for Evaluator."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "A specific Version ID of the Evaluator to retrieve.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "A specific Version ID of the Evaluator to retrieve."
            },
            "name": "version_id",
            "in": "query"
          },
          {
            "description": "Name of the Environment to retrieve a deployed Version from.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Environment",
              "description": "Name of the Environment to retrieve a deployed Version from."
            },
            "name": "environment",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Evaluators"],
        "summary": "Delete",
        "description": "Delete the Evaluator with the given ID.",
        "operationId": "delete_evaluators__id__delete",
        "parameters": [
          {
            "description": "Unique identifier for Evaluator.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluator ID",
              "description": "Unique identifier for Evaluator."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "patch": {
        "tags": ["Evaluators"],
        "summary": "Move",
        "description": "Move the Evaluator to a different path or change the name.",
        "operationId": "move_evaluators__id__patch",
        "parameters": [
          {
            "description": "Unique identifier for Evaluator.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluator ID",
              "description": "Unique identifier for Evaluator."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEvaluatorRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/evaluators/{id}/versions": {
      "get": {
        "tags": ["Evaluators"],
        "summary": "List Versions",
        "description": "Get a list of all the versions of an Evaluator.",
        "operationId": "list_versions_evaluators__id__versions_get",
        "parameters": [
          {
            "description": "Unique identifier for the Evaluator.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt ID",
              "description": "Unique identifier for the Evaluator."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/VersionStatus"
                }
              ],
              "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned."
            },
            "name": "status",
            "in": "query"
          },
          {
            "description": "Whether to include Evaluator aggregate results for the versions in the response",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Evaluator Aggregates",
              "description": "Whether to include Evaluator aggregate results for the versions in the response"
            },
            "name": "evaluator_aggregates",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListEvaluators"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/evaluators/{id}/versions/{version_id}/commit": {
      "post": {
        "tags": ["Evaluators"],
        "summary": "Commit",
        "description": "Commit a version of the Evaluator with a commit message.\n\nIf the version is already committed, an exception will be raised.",
        "operationId": "commit_evaluators__id__versions__version_id__commit_post",
        "parameters": [
          {
            "description": "Unique identifier for Prompt.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluator ID",
              "description": "Unique identifier for Prompt."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the specific version of the Evaluator.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "Unique identifier for the specific version of the Evaluator."
            },
            "name": "version_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/evaluators/{id}/evaluators": {
      "post": {
        "tags": ["Evaluators"],
        "summary": "Update Monitoring",
        "description": "Activate and deactivate Evaluators for monitoring the Evaluator.\n\nAn activated Evaluator will automatically be run on all new Logs\nwithin the Evaluator for monitoring purposes.",
        "operationId": "update_monitoring_evaluators__id__evaluators_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluatorActivationDeactivationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/evaluators/{id}/environments/{environment_id}": {
      "post": {
        "tags": ["Evaluators"],
        "summary": "Set Deployment",
        "description": "Deploy Evaluator to an Environment.\n\nSet the deployed version for the specified Environment. This Evaluator\nwill be used for calls made to the Evaluator in this Environment.",
        "operationId": "set_deployment_evaluators__id__environments__environment_id__post",
        "parameters": [
          {
            "description": "Unique identifier for Evaluator.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluator ID",
              "description": "Unique identifier for Evaluator."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the Environment to deploy the Version to.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Environment ID",
              "description": "Unique identifier for the Environment to deploy the Version to."
            },
            "name": "environment_id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the specific version of the Evaluator.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "Unique identifier for the specific version of the Evaluator."
            },
            "name": "version_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluatorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Evaluators"],
        "summary": "Remove Deployment",
        "description": "Remove deployed Evaluator from the Environment.\n\nRemove the deployed version for the specified Environment. This Evaluator\nwill no longer be used for calls made to the Evaluator in this Environment.",
        "operationId": "remove_deployment_evaluators__id__environments__environment_id__delete",
        "parameters": [
          {
            "description": "Unique identifier for Evaluator.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluator ID",
              "description": "Unique identifier for Evaluator."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the Environment to remove the deployment from.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Environment ID",
              "description": "Unique identifier for the Environment to remove the deployment from."
            },
            "name": "environment_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/evaluators/{id}/environments": {
      "get": {
        "tags": ["Evaluators"],
        "summary": "List Environments",
        "description": "List all Environments and their deployed versions for the Evaluator.",
        "operationId": "list_environments_evaluators__id__environments_get",
        "parameters": [
          {
            "description": "Unique identifier for Evaluator.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluator ID",
              "description": "Unique identifier for Evaluator."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FileEnvironmentResponse"
                  },
                  "type": "array",
                  "title": "Response List Environments Evaluators  Id  Environments Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/evaluators/log": {
      "post": {
        "tags": ["Evaluators"],
        "summary": "Log",
        "description": "Submit Evaluator judgment for an existing Log.\n\nCreates a new Log. The evaluated Log will be set as the parent of the created Log.",
        "operationId": "log_evaluators_log_post",
        "parameters": [
          {
            "description": "ID of the Evaluator version to log against.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version ID.",
              "description": "ID of the Evaluator version to log against."
            },
            "name": "version_id",
            "in": "query"
          },
          {
            "description": "Name of the Environment identifying a deployed version to log to.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Environment",
              "description": "Name of the Environment identifying a deployed version to log to."
            },
            "name": "environment",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEvaluatorLogRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEvaluatorLogResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/flows/{id}": {
      "get": {
        "tags": ["Flows"],
        "summary": "Get",
        "description": "Retrieve the Flow with the given ID.\n\nBy default, the deployed version of the Flow is returned. Use the query parameters\n`version_id` or `environment` to target a specific version of the Flow.",
        "operationId": "get_flows__id__get",
        "parameters": [
          {
            "description": "Unique identifier for Flow.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Flow ID",
              "description": "Unique identifier for Flow."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "A specific Version ID of the Flow to retrieve.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "A specific Version ID of the Flow to retrieve."
            },
            "name": "version_id",
            "in": "query"
          },
          {
            "description": "Name of the Environment to retrieve a deployed Version from.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Environment",
              "description": "Name of the Environment to retrieve a deployed Version from."
            },
            "name": "environment",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Flows"],
        "summary": "Delete",
        "description": "Delete the Flow with the given ID.",
        "operationId": "delete_flows__id__delete",
        "parameters": [
          {
            "description": "Unique identifier for Flow.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Flow ID",
              "description": "Unique identifier for Flow."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "patch": {
        "tags": ["Flows"],
        "summary": "Move",
        "description": "Move the Flow to a different path or change the name.",
        "operationId": "move_flows__id__patch",
        "parameters": [
          {
            "description": "Unique identifier for Flow.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Flow ID",
              "description": "Unique identifier for Flow."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFlowRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/flows": {
      "get": {
        "tags": ["Flows"],
        "summary": "List ",
        "description": "Get a list of Flows.",
        "operationId": "list__flows_get",
        "parameters": [
          {
            "description": "Page number for pagination.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "Page number",
              "description": "Page number for pagination.",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "description": "Page size for pagination. Number of Flows to fetch.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Page size",
              "description": "Page size for pagination. Number of Flows to fetch.",
              "default": 10
            },
            "name": "size",
            "in": "query"
          },
          {
            "description": "Case-insensitive filter for Flow name.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Flow name filter",
              "description": "Case-insensitive filter for Flow name."
            },
            "name": "name",
            "in": "query"
          },
          {
            "description": "Case-insensitive filter for users in the Flow. This filter matches against both email address and name of users.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "User filter",
              "description": "Case-insensitive filter for users in the Flow. This filter matches against both email address and name of users."
            },
            "name": "user_filter",
            "in": "query"
          },
          {
            "description": "Field to sort Flows by",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ProjectSortBy"
                }
              ],
              "title": "Sort by",
              "description": "Field to sort Flows by",
              "default": "created_at"
            },
            "name": "sort_by",
            "in": "query"
          },
          {
            "description": "Direction to sort by.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "title": "Sort order",
              "description": "Direction to sort by.",
              "default": "desc"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedData_FlowResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Flows"],
        "summary": "Upsert",
        "description": "Create or update a Flow.\n\nFlows can also be identified by the `ID` or their `path`.\n\nIf you provide a commit message, then the new version will be committed;\notherwise it will be uncommitted. If you try to commit an already committed version,\nan exception will be raised.",
        "operationId": "upsert_flows_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FlowRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/flows/log": {
      "post": {
        "tags": ["Flows"],
        "summary": "Log",
        "description": "Log to a Flow.\n\nYou can use query parameters `version_id`, or `environment`, to target\nan existing version of the Flow. Otherwise, the default deployed version will be chosen.",
        "operationId": "log_flows_log_post",
        "parameters": [
          {
            "description": "A specific Version ID of the Flow to log to.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "A specific Version ID of the Flow to log to."
            },
            "name": "version_id",
            "in": "query"
          },
          {
            "description": "Name of the Environment identifying a deployed version to log to.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Environment",
              "description": "Name of the Environment identifying a deployed version to log to."
            },
            "name": "environment",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FlowLogRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateFlowLogResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/flows/logs/{log_id}": {
      "patch": {
        "tags": ["Flows"],
        "summary": "Update Log",
        "description": "Update the status, inputs, output of a Flow Log.\n\nMarking a Flow Log as complete will trigger any monitoring Evaluators to run.\nInputs and output (or error) must be provided in order to mark it as complete.",
        "operationId": "update_log_flows_logs__log_id__patch",
        "parameters": [
          {
            "description": "Unique identifier of the Flow Log.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Flow Log ID",
              "description": "Unique identifier of the Flow Log."
            },
            "name": "log_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTraceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowLogResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/flows/{id}/versions": {
      "get": {
        "tags": ["Flows"],
        "summary": "List Versions",
        "description": "Get a list of all the versions of a Flow.",
        "operationId": "list_versions_flows__id__versions_get",
        "parameters": [
          {
            "description": "Unique identifier for Flow.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Flow ID",
              "description": "Unique identifier for Flow."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/VersionStatus"
                }
              ],
              "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned."
            },
            "name": "status",
            "in": "query"
          },
          {
            "description": "Whether to include Evaluator aggregate results for the versions in the response",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Evaluator Aggregates",
              "description": "Whether to include Evaluator aggregate results for the versions in the response"
            },
            "name": "evaluator_aggregates",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFlows"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/flows/{id}/versions/{version_id}/commit": {
      "post": {
        "tags": ["Flows"],
        "summary": "Commit",
        "description": "Commit a version of the Flow with a commit message.\n\nIf the version is already committed, an exception will be raised.",
        "operationId": "commit_flows__id__versions__version_id__commit_post",
        "parameters": [
          {
            "description": "Unique identifier for Flow.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Flow ID",
              "description": "Unique identifier for Flow."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the specific version of the Flow.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "Unique identifier for the specific version of the Flow."
            },
            "name": "version_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/flows/{id}/environments/{environment_id}": {
      "post": {
        "tags": ["Flows"],
        "summary": "Set Deployment",
        "description": "Deploy Flow to an Environment.\n\nSet the deployed version for the specified Environment. This Flow\nwill be used for calls made to the Flow in this Environment.",
        "operationId": "set_deployment_flows__id__environments__environment_id__post",
        "parameters": [
          {
            "description": "Unique identifier for Flow.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Flow ID",
              "description": "Unique identifier for Flow."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the Environment to deploy the Version to.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Environment ID",
              "description": "Unique identifier for the Environment to deploy the Version to."
            },
            "name": "environment_id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the specific version of the Flow.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "Unique identifier for the specific version of the Flow."
            },
            "name": "version_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Flows"],
        "summary": "Remove Deployment",
        "description": "Remove deployed Flow from the Environment.\n\nRemove the deployed version for the specified Environment. This Flow\nwill no longer be used for calls made to the Flow in this Environment.",
        "operationId": "remove_deployment_flows__id__environments__environment_id__delete",
        "parameters": [
          {
            "description": "Unique identifier for Flow.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Flow ID",
              "description": "Unique identifier for Flow."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Unique identifier for the Environment to remove the deployment from.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Environment ID",
              "description": "Unique identifier for the Environment to remove the deployment from."
            },
            "name": "environment_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/flows/{id}/environments": {
      "get": {
        "tags": ["Flows"],
        "summary": "List Environments",
        "description": "List all Environments and their deployed versions for the Flow.",
        "operationId": "list_environments_flows__id__environments_get",
        "parameters": [
          {
            "description": "Unique identifier for Flow.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Flow ID",
              "description": "Unique identifier for Flow."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FileEnvironmentResponse"
                  },
                  "type": "array",
                  "title": "Response List Environments Flows  Id  Environments Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/flows/{id}/evaluators": {
      "post": {
        "tags": ["Flows"],
        "summary": "Update Monitoring",
        "description": "Activate and deactivate Evaluators for monitoring the Flow.\n\nAn activated Evaluator will automatically be run on all new \"completed\" Logs\nwithin the Flow for monitoring purposes.",
        "operationId": "update_monitoring_flows__id__evaluators_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluatorActivationDeactivationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlowResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/files": {
      "get": {
        "tags": ["Files"],
        "summary": "List",
        "description": "Get a paginated list of files.",
        "operationId": "Files_list",
        "parameters": [
          {
            "description": "Page offset for pagination.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "Page index",
              "description": "Page offset for pagination.",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "description": "Page size for pagination. Number of files to fetch.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Page size",
              "description": "Page size for pagination. Number of files to fetch.",
              "default": 10
            },
            "name": "size",
            "in": "query"
          },
          {
            "description": "Case-insensitive filter for file name.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "File name filter",
              "description": "Case-insensitive filter for file name."
            },
            "name": "name",
            "in": "query"
          },
          {
            "description": "List of file types to filter for.",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/FileType"
              },
              "type": "array",
              "title": "File types filter",
              "description": "List of file types to filter for."
            },
            "name": "type",
            "in": "query"
          },
          {
            "description": "Case-sensitive filter for files with a deployment in the specified environment. Requires the environment name.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Environment filter",
              "description": "Case-sensitive filter for files with a deployment in the specified environment. Requires the environment name."
            },
            "name": "environment",
            "in": "query"
          },
          {
            "description": "Field to sort files by",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ProjectSortBy"
                }
              ],
              "title": "Sort by",
              "description": "Field to sort files by",
              "default": "created_at"
            },
            "name": "sort_by",
            "in": "query"
          },
          {
            "description": "Direction to sort by.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "title": "Sort order",
              "description": "Direction to sort by.",
              "default": "desc"
            },
            "name": "order",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedData_Union_PromptResponse__ToolResponse__DatasetResponse__EvaluatorResponse__FlowResponse__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/evaluations": {
      "get": {
        "tags": ["Evaluations"],
        "summary": "List ",
        "description": "List all Evaluations for the specified `file_id`.\n\nRetrieve a list of Evaluations that evaluate versions of the specified File.",
        "operationId": "list__evaluations_get",
        "parameters": [
          {
            "description": "Filter by File ID. Only Evaluations for the specified File will be returned.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File ID",
              "description": "Filter by File ID. Only Evaluations for the specified File will be returned."
            },
            "name": "file_id",
            "in": "query"
          },
          {
            "description": "Page number for pagination.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "Page number",
              "description": "Page number for pagination.",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "description": "Page size for pagination. Number of Evaluations to fetch.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Page size",
              "description": "Page size for pagination. Number of Evaluations to fetch.",
              "default": 10
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedData_EvaluationResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "tags": ["Evaluations"],
        "summary": "Create",
        "description": "Create an Evaluation.\n\nCreate a new Evaluation by specifying the Dataset, versions to be\nevaluated (Evaluatees), and which Evaluators to provide judgments.\n\nHumanloop will automatically start generating Logs and running Evaluators where\n`orchestrated=true`. If you own the runtime for the Evaluatee or Evaluator, you\ncan set `orchestrated=false` and then generate and submit the required logs using\nyour runtime.\n\nTo keep updated on the progress of the Evaluation, you can poll the Evaluation using\nthe GET /evaluations/{id} endpoint and check its status.",
        "operationId": "create_evaluations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEvaluationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/evaluations/{id}": {
      "get": {
        "tags": ["Evaluations"],
        "summary": "Get",
        "description": "Get an Evaluation.",
        "operationId": "get_evaluations__id__get",
        "parameters": [
          {
            "description": "Unique identifier for Evaluation.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation ID",
              "description": "Unique identifier for Evaluation."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Evaluations"],
        "summary": "Delete",
        "description": "Delete an Evaluation.\n\nRemove an Evaluation from Humanloop. The Logs and Versions used in the Evaluation\nwill not be deleted.",
        "operationId": "delete_evaluations__id__delete",
        "parameters": [
          {
            "description": "Unique identifier for Evaluation.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation ID",
              "description": "Unique identifier for Evaluation."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "patch": {
        "tags": ["Evaluations"],
        "summary": "Update Setup",
        "description": "Update an Evaluation.\n\nUpdate the setup of an Evaluation by specifying the Dataset, versions to be\nevaluated (Evaluatees), and which Evaluators to provide judgments.",
        "operationId": "update_setup_evaluations__id__patch",
        "parameters": [
          {
            "description": "Unique identifier for Evaluation.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation ID",
              "description": "Unique identifier for Evaluation."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEvaluationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/evaluations/{id}/status": {
      "patch": {
        "tags": ["Evaluations"],
        "summary": "Update Status",
        "description": "Update the status of an Evaluation.\n\nCan be used to cancel a running Evaluation, or mark an Evaluation that uses\nexternal or human evaluators as completed.",
        "operationId": "update_status_evaluations__id__status_patch",
        "parameters": [
          {
            "description": "Unique identifier for Evaluation.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation ID",
              "description": "Unique identifier for Evaluation."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_update_status_evaluations__id__status_patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/evaluations/{id}/stats": {
      "get": {
        "tags": ["Evaluations"],
        "summary": "Get Stats",
        "description": "Get Evaluation Stats.\n\nRetrieve aggregate stats for the specified Evaluation.\nThis includes the number of generated Logs for each evaluated version and the\ncorresponding Evaluator statistics (such as the mean and percentiles).",
        "operationId": "get_stats_evaluations__id__stats_get",
        "parameters": [
          {
            "description": "Unique identifier for Evaluation.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation ID",
              "description": "Unique identifier for Evaluation."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationStats"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/evaluations/{id}/logs": {
      "get": {
        "tags": ["Evaluations"],
        "summary": "Get Logs",
        "description": "Get the Logs associated to a specific Evaluation.\n\nEach Datapoint in your Dataset will have a corresponding Log for each File version evaluated.\ne.g. If you have 50 Datapoints and are evaluating 2 Prompts, there will be 100 Logs associated with the Evaluation.",
        "operationId": "get_logs_evaluations__id__logs_get",
        "parameters": [
          {
            "description": "String ID of evaluation. Starts with `ev_` or `evr_`.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation ID",
              "description": "String ID of evaluation. Starts with `ev_` or `evr_`."
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Page number for pagination.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "Page number",
              "description": "Page number for pagination.",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "description": "Page size for pagination. Number of Logs to fetch.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Page size",
              "description": "Page size for pagination. Number of Logs to fetch.",
              "default": 10
            },
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedData_EvaluationReportLogResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/evaluations/{id}/pin-evaluatee": {
      "post": {
        "tags": ["Evaluations"],
        "summary": "Pin Evaluatee",
        "description": "Pin the specified Evaluatee.\n\nPinned Evaluatees are always displayed in the Evaluation Overview,\nand serve as the baseline for comparison with other Evaluatees.",
        "operationId": "pin_evaluatee_evaluations__id__pin_evaluatee_post",
        "parameters": [
          {
            "description": "Unique identifier for Evaluation.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Evaluation ID",
              "description": "Unique identifier for Evaluation."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluateeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/logs": {
      "get": {
        "tags": ["Logs"],
        "summary": "List ",
        "description": "List all Logs for the given filter criteria.",
        "operationId": "list__logs_get",
        "parameters": [
          {
            "description": "Unique identifier for the File to list Logs for.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File ID",
              "description": "Unique identifier for the File to list Logs for."
            },
            "name": "file_id",
            "in": "query"
          },
          {
            "description": "Page number for pagination.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "Page number",
              "description": "Page number for pagination.",
              "default": 1
            },
            "name": "page",
            "in": "query"
          },
          {
            "description": "Page size for pagination. Number of Logs to fetch.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Page size",
              "description": "Page size for pagination. Number of Logs to fetch.",
              "default": 10
            },
            "name": "size",
            "in": "query"
          },
          {
            "description": "If provided, only Logs belonging to the specified Version will be returned.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Version ID",
              "description": "If provided, only Logs belonging to the specified Version will be returned."
            },
            "name": "version_id",
            "in": "query"
          },
          {
            "description": "If provided, only Logs belonging to Versions with the specified status will be returned.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/VersionStatus"
                }
              ],
              "title": "Version status",
              "description": "If provided, only Logs belonging to Versions with the specified status will be returned."
            },
            "name": "version_status",
            "in": "query"
          },
          {
            "description": "If provided, only Logs that contain the provided string in its inputs and output will be returned.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Search",
              "description": "If provided, only Logs that contain the provided string in its inputs and output will be returned."
            },
            "name": "search",
            "in": "query"
          },
          {
            "description": "If provided, only Logs that contain the provided string in its metadata will be returned.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Metadata search",
              "description": "If provided, only Logs that contain the provided string in its metadata will be returned."
            },
            "name": "metadata_search",
            "in": "query"
          },
          {
            "description": "If provided, only Logs created after the specified date will be returned.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Start date",
              "description": "If provided, only Logs created after the specified date will be returned."
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "If provided, only Logs created before the specified date will be returned.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "End date",
              "description": "If provided, only Logs created before the specified date will be returned."
            },
            "name": "end_date",
            "in": "query"
          },
          {
            "description": "If true, include the full parent Log in the response. Only applicable when retrieving Evaluator Logs.",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Include parent Log",
              "description": "If true, include the full parent Log in the response. Only applicable when retrieving Evaluator Logs.",
              "default": false
            },
            "name": "include_parent",
            "in": "query"
          },
          {
            "description": "If true, return Logs that are associated to a Trace. False, return Logs that are not associated to a Trace.",
            "required": false,
            "schema": {
              "items": {
                "type": "boolean"
              },
              "type": "array",
              "title": "Trace",
              "description": "If true, return Logs that are associated to a Trace. False, return Logs that are not associated to a Trace."
            },
            "name": "in_trace_filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedData_LogResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "tags": ["Logs"],
        "summary": "Delete",
        "description": "Delete Logs with the given IDs.",
        "operationId": "Logs_delete",
        "parameters": [
          {
            "description": "Unique identifiers for the Logs to delete.",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Log IDs",
              "description": "Unique identifiers for the Logs to delete."
            },
            "name": "id",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/logs/{id}": {
      "get": {
        "tags": ["Logs"],
        "summary": "Get Log",
        "description": "Retrieve the Log with the given ID.",
        "operationId": "get_logs__id__get",
        "parameters": [
          {
            "description": "Unique identifier for Log.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Log ID",
              "description": "Unique identifier for Log."
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Body_update_status_evaluations__id__status_patch": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/EvaluationStatus"
          }
        },
        "type": "object",
        "required": ["status"],
        "title": "Body_update_status_evaluations__id__status_patch"
      },
      "Body_upload_csv_datasets__id__datapoints_csv_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File",
            "description": "A CSV file containing Datapoints to be added to the Dataset."
          },
          "commit_message": {
            "type": "string",
            "title": "Commit Message",
            "description": "Commit message for the new Dataset version."
          }
        },
        "type": "object",
        "required": ["file", "commit_message"],
        "title": "Body_upload_csv_datasets__id__datapoints_csv_post"
      },
      "BooleanEvaluatorStatsResponse": {
        "properties": {
          "evaluator_version_id": {
            "type": "string",
            "title": "Evaluator Version ID",
            "description": "Unique identifier for the Evaluator Version."
          },
          "total_logs": {
            "type": "integer",
            "title": "Total Evaluator Logs",
            "description": "The total number of Logs generated by this Evaluator Version on the Evaluated Version's Logs. This includes Nulls and Errors."
          },
          "num_judgments": {
            "type": "integer",
            "title": "Number of Judgments",
            "description": "The total number of Evaluator judgments for this Evaluator Version. This excludes Nulls and Errors."
          },
          "num_nulls": {
            "type": "integer",
            "title": "Number of Nulls",
            "description": "The total number of null judgments (i.e. abstentions) for this Evaluator Version."
          },
          "num_errors": {
            "type": "integer",
            "title": "Number of Errors",
            "description": "The total number of errored Evaluators for this Evaluator Version."
          },
          "num_true": {
            "type": "integer",
            "title": "Number of True",
            "description": "The total number of `True` judgments for this Evaluator Version."
          },
          "num_false": {
            "type": "integer",
            "title": "Number of False",
            "description": "The total number of `False` judgments for this Evaluator Version."
          }
        },
        "type": "object",
        "required": [
          "evaluator_version_id",
          "total_logs",
          "num_judgments",
          "num_nulls",
          "num_errors",
          "num_true",
          "num_false"
        ],
        "title": "BooleanEvaluatorStatsResponse",
        "description": "Base attributes for stats for an Evaluator Version-Evaluated Version pair\nin the Evaluation Report."
      },
      "ChatMessage": {
        "properties": {
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/TextChatContent"
                    },
                    {
                      "$ref": "#/components/schemas/ImageChatContent"
                    }
                  ]
                },
                "type": "array"
              }
            ],
            "title": "Content",
            "description": "The content of the message.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Optional name of the message author.",
            "nullable": true
          },
          "tool_call_id": {
            "type": "string",
            "title": "Tool call id",
            "description": "Tool call that this message is responding to.",
            "nullable": true
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatRole"
              }
            ],
            "title": "Role",
            "description": "Role of the message author."
          },
          "tool_calls": {
            "items": {
              "$ref": "#/components/schemas/ToolCall"
            },
            "type": "array",
            "title": "Tool calls",
            "description": "A list of tool calls requested by the assistant.",
            "nullable": true
          }
        },
        "type": "object",
        "required": ["role"],
        "title": "ChatMessage"
      },
      "ChatRole": {
        "type": "string",
        "enum": ["user", "assistant", "system", "tool"],
        "title": "ChatRole",
        "description": "An enumeration."
      },
      "CodeEvaluatorRequest": {
        "properties": {
          "arguments_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatorArgumentsType"
              }
            ],
            "title": "Arguments type",
            "description": "Whether this Evaluator is target-free or target-required."
          },
          "return_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatorReturnTypeEnum"
              }
            ],
            "title": "Return type",
            "description": "The type of the return value of the Evaluator."
          },
          "attributes": {
            "type": "object",
            "title": "Attributes",
            "description": "Additional fields to describe the Evaluator. Helpful to separate Evaluator versions from each other with details on how they were created or used."
          },
          "evaluator_type": {
            "type": "string",
            "enum": ["python"],
            "title": "Evaluator type",
            "description": "The type of the evaluator.",
            "default": "python"
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "The code for the Evaluator. This code will be executed in a sandboxed environment."
          }
        },
        "type": "object",
        "required": ["arguments_type", "return_type", "code"],
        "title": "CodeEvaluatorRequest"
      },
      "CommitRequest": {
        "properties": {
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made."
          }
        },
        "type": "object",
        "required": ["commit_message"],
        "title": "CommitRequest"
      },
      "CreateDatapointRequest": {
        "properties": {
          "inputs": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Inputs",
            "description": "The inputs to the prompt template.",
            "default": {}
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            },
            "type": "array",
            "title": "Chat messages",
            "description": "List of chat messages to provide to the model."
          },
          "target": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "object"
                }
              ]
            },
            "type": "object",
            "title": "Target",
            "description": "Object with criteria necessary to evaluate generations with this Datapoint. This is passed in as an argument to Evaluators when used in an Evaluation."
          }
        },
        "type": "object",
        "title": "CreateDatapointRequest"
      },
      "CreateEvaluationRequest": {
        "properties": {
          "dataset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__external__app__models__v5__evaluations__DatasetRequest"
              }
            ],
            "title": "Dataset",
            "description": "Dataset to use in this Evaluation."
          },
          "evaluatees": {
            "items": {
              "$ref": "#/components/schemas/EvaluateeRequest"
            },
            "type": "array",
            "title": "Evaluated Version IDs",
            "description": "Unique identifiers for the Prompt/Tool Versions to include in the Evaluation. Can be left unpopulated if you wish to add Evaluatees to this Evaluation by specifying `evaluation_id` in Log calls."
          },
          "evaluators": {
            "items": {
              "$ref": "#/components/schemas/src__external__app__models__v5__evaluations__EvaluatorRequest"
            },
            "type": "array",
            "title": "Evaluators",
            "description": "The Evaluators used to evaluate."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the Evaluation to help identify it. Must be unique within the associated File."
          },
          "file": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileRequest"
              }
            ],
            "title": "File",
            "description": "The File to associate with the Evaluation."
          }
        },
        "type": "object",
        "required": ["dataset", "evaluators"],
        "title": "CreateEvaluationRequest",
        "description": "Request model for creating an Evaluation.\n\nEvaluation benchmark your Prompt/Tool Versions. With the Datapoints in a Dataset Version,\nLogs corresponding to the Datapoint and each Evaluated Version are evaluated by the specified Evaluator Versions.\nAggregated statistics are then calculated and presented in the Evaluation."
      },
      "CreateEvaluatorLogRequest": {
        "properties": {
          "path": {
            "type": "string",
            "title": "Evaluator path",
            "description": "Path of the Evaluator, including the name. This locates the Evaluator in the Humanloop filesystem and is used as as a unique identifier. Example: `folder/name` or just `name`."
          },
          "id": {
            "type": "string",
            "title": "Evaluator ID",
            "description": "ID for an existing Evaluator."
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start time",
            "description": "When the logged event started."
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End time",
            "description": "When the logged event ended."
          },
          "output": {
            "type": "string",
            "title": "Output",
            "description": "Generated output from the LLM. Only populated for LLM Evaluator Logs."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created at",
            "description": "User defined timestamp for when the log was created. "
          },
          "error": {
            "type": "string",
            "title": "Error",
            "description": "Error message if the log is an error."
          },
          "provider_latency": {
            "type": "number",
            "title": "Log latency",
            "description": "Duration of the logged event in seconds."
          },
          "stdout": {
            "type": "string",
            "title": "Standard Output",
            "description": "Captured log and debug statements."
          },
          "provider_request": {
            "type": "object",
            "title": "Provider request",
            "description": "Raw request sent to provider. Only populated for LLM Evaluator Logs."
          },
          "provider_response": {
            "type": "object",
            "title": "Provider response",
            "description": "Raw response received the provider. Only populated for LLM Evaluator Logs."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "parent_id": {
            "type": "string",
            "title": "Parent ID",
            "description": "Identifier of the evaluated Log. The newly created Log will have this one set as parent."
          },
          "source_datapoint_id": {
            "type": "string",
            "title": "Source Datapoint ID",
            "description": "Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair."
          },
          "trace_parent_id": {
            "type": "string",
            "title": "Trace Parent ID",
            "description": "The ID of the parent Log to nest this Log under in a Trace."
          },
          "batch_id": {
            "type": "string",
            "title": "Batch ID",
            "description": "Unique identifier for the Batch to add this Batch to. Batches are used to group Logs together for Evaluations. A Batch will be created if one with the given ID does not exist."
          },
          "user": {
            "type": "string",
            "title": "End-user identifier",
            "description": "End-user ID related to the Log."
          },
          "environment": {
            "type": "string",
            "title": "Environment name",
            "description": "The name of the Environment the Log is associated to."
          },
          "save": {
            "type": "boolean",
            "title": "Save",
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "default": true
          },
          "judgment": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "number"
              }
            ],
            "title": "Judgment Value",
            "description": "Evaluator assessment of the Log."
          },
          "spec": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LLMEvaluatorRequest"
              },
              {
                "$ref": "#/components/schemas/CodeEvaluatorRequest"
              },
              {
                "$ref": "#/components/schemas/HumanEvaluatorRequest"
              },
              {
                "$ref": "#/components/schemas/ExternalEvaluatorRequest"
              }
            ],
            "title": "Spec"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["parent_id"],
        "title": "CreateEvaluatorLogRequest",
        "description": "Submit Evaluator judgment for another File's Log."
      },
      "CreateEvaluatorLogResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Log ID",
            "description": "String identifier of the new Log."
          },
          "parent_id": {
            "type": "string",
            "title": "Parent ID",
            "description": "Identifier of the evaluated parent Log."
          },
          "session_id": {
            "type": "string",
            "title": "Session ID",
            "description": "Identifier of the Session containing both the parent and the new child Log. If the parent Log does not belong to a Session, a new Session is created with this ID."
          },
          "version_id": {
            "type": "string",
            "title": "Evaluator Version ID",
            "description": "Identifier of Evaluator Version for which the Log was registered."
          }
        },
        "type": "object",
        "required": ["id", "parent_id", "version_id"],
        "title": "CreateEvaluatorLogResponse"
      },
      "CreateFlowLogResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "ID",
            "description": "Unique identifier for the Log."
          },
          "flow_id": {
            "type": "string",
            "title": "Flow ID",
            "description": "Unique identifier for the Flow."
          },
          "version_id": {
            "type": "string",
            "title": "Version ID",
            "description": "Unique identifier for the Flow Version."
          },
          "trace_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TraceStatus"
              }
            ],
            "title": "Status",
            "description": "Status of the Trace. When a Trace is marked as `complete`, no more Logs can be added to it. Monitoring Evaluators will only run on `complete` Traces."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "flow_id", "version_id"],
        "title": "CreateFlowLogResponse",
        "description": "Response for a Flow Log."
      },
      "CreatePromptLogResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Log ID",
            "description": "String ID of log."
          },
          "prompt_id": {
            "type": "string",
            "title": "Prompt ID",
            "description": "ID of the Prompt the log belongs to."
          },
          "version_id": {
            "type": "string",
            "title": "Prompt Version ID",
            "description": "ID of the specific version of the Prompt."
          },
          "session_id": {
            "type": "string",
            "title": "Session ID",
            "description": "String ID of session the log belongs to."
          }
        },
        "type": "object",
        "required": ["id", "prompt_id", "version_id"],
        "title": "CreatePromptLogResponse"
      },
      "CreateToolLogResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Log ID",
            "description": "String ID of log."
          },
          "tool_id": {
            "type": "string",
            "title": "Tool ID",
            "description": "ID of the Tool the log belongs to."
          },
          "version_id": {
            "type": "string",
            "title": "Tool Version ID",
            "description": "ID of the specific version of the Tool."
          },
          "session_id": {
            "type": "string",
            "title": "Session ID",
            "description": "String ID of session the log belongs to."
          }
        },
        "type": "object",
        "required": ["id", "tool_id", "version_id"],
        "title": "CreateToolLogResponse"
      },
      "DashboardConfiguration": {
        "properties": {
          "time_unit": {
            "$ref": "#/components/schemas/TimeUnit"
          },
          "time_range_days": {
            "type": "integer",
            "title": "Time Range Days"
          },
          "model_config_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Model Config Ids"
          }
        },
        "type": "object",
        "required": ["time_unit", "time_range_days", "model_config_ids"],
        "title": "DashboardConfiguration"
      },
      "DatapointResponse": {
        "properties": {
          "inputs": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Inputs",
            "description": "The inputs to the prompt template.",
            "default": {}
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            },
            "type": "array",
            "title": "Chat messages",
            "description": "List of chat messages to provide to the model."
          },
          "target": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "object"
                }
              ]
            },
            "type": "object",
            "title": "Target",
            "description": "Object with criteria necessary to evaluate generations with this Datapoint. This is passed in as an argument to Evaluators when used in an Evaluation."
          },
          "id": {
            "type": "string",
            "title": "Datapoint ID",
            "description": "Unique identifier for the Datapoint. Starts with `dp_`."
          }
        },
        "type": "object",
        "required": ["id"],
        "title": "DatapointResponse"
      },
      "DatasetResponse": {
        "properties": {
          "path": {
            "type": "string",
            "title": "Dataset path",
            "description": "Path of the Dataset, including the name, which is used as a unique identifier."
          },
          "id": {
            "type": "string",
            "title": "Dataset ID",
            "description": "Unique identifier for the Dataset. Starts with `ds_`."
          },
          "directory_id": {
            "type": "string",
            "title": "Directory ID",
            "description": "ID of the directory that the file is in on Humanloop."
          },
          "name": {
            "type": "string",
            "title": "Dataset name",
            "description": "Name of the Dataset, which is used as a unique identifier."
          },
          "version_id": {
            "type": "string",
            "title": "Version ID",
            "description": "Unique identifier for the specific Dataset Version. If no query params provided, the default deployed Dataset Version is returned. Starts with `dsv_`."
          },
          "type": {
            "type": "string",
            "enum": ["dataset"],
            "title": "Type",
            "default": "dataset"
          },
          "environments": {
            "items": {
              "$ref": "#/components/schemas/EnvironmentResponse"
            },
            "type": "array",
            "title": "Environments",
            "description": "The list of environments the Dataset Version is deployed to."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              }
            ],
            "title": "Created by",
            "description": "The user who created the Dataset."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VersionStatus"
              }
            ],
            "title": "Status",
            "description": "The status of the Dataset Version."
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Used At"
          },
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made. If provided, a committed version of the Dataset is created. Otherwise, an uncommitted version is created."
          },
          "datapoints_count": {
            "type": "integer",
            "title": "Datapoints count",
            "description": "The number of Datapoints in this Dataset version."
          },
          "datapoints": {
            "items": {
              "$ref": "#/components/schemas/DatapointResponse"
            },
            "type": "array",
            "title": "Datapoints",
            "description": "The list of Datapoints in this Dataset version. Only provided if explicitly requested."
          },
          "attributes": {
            "type": "object",
            "title": "Attributes",
            "description": "Additional fields to describe the Dataset. Helpful to separate Dataset versions from each other with details on how they were created or used."
          }
        },
        "type": "object",
        "required": [
          "path",
          "id",
          "name",
          "version_id",
          "created_at",
          "updated_at",
          "status",
          "last_used_at",
          "datapoints_count"
        ],
        "title": "DatasetResponse",
        "description": "Base type that all File Responses should inherit from.\n\nAttributes defined here are common to all File Responses and should be overridden\nin the inheriting classes with documentation and appropriate Field definitions."
      },
      "EnvironmentResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "tag": {
            "$ref": "#/components/schemas/EnvironmentTag"
          }
        },
        "type": "object",
        "required": ["id", "created_at", "name", "tag"],
        "title": "EnvironmentResponse"
      },
      "EnvironmentTag": {
        "type": "string",
        "enum": ["default", "other"],
        "title": "EnvironmentTag",
        "description": "An enumeration."
      },
      "EvaluatedVersionResponse": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/PromptResponse"
          },
          {
            "$ref": "#/components/schemas/ToolResponse"
          },
          {
            "$ref": "#/components/schemas/EvaluatorResponse"
          },
          {
            "$ref": "#/components/schemas/FlowResponse"
          }
        ],
        "title": "EvaluatedVersionResponse"
      },
      "EvaluateeRequest": {
        "properties": {
          "version_id": {
            "type": "string",
            "title": "Version ID",
            "description": "Unique identifier for the File Version. If provided, none of the other fields should be specified."
          },
          "path": {
            "type": "string",
            "title": "File path",
            "description": "Path identifying a File. Provide either this or `file_id` if you want to specify a File."
          },
          "file_id": {
            "type": "string",
            "title": "File ID",
            "description": "Unique identifier for the File. Provide either this or `path` if you want to specify a File."
          },
          "environment": {
            "type": "string",
            "title": "Environment name",
            "description": "Name of the Environment a Version is deployed to. Only provide this when specifying a File. If not provided (and a File is specified), the default Environment is used."
          },
          "batch_id": {
            "type": "string",
            "title": "Batch ID",
            "description": "Unique identifier for the batch of Logs to include in the Evaluation Report."
          },
          "orchestrated": {
            "type": "boolean",
            "title": "Humanloop Orchestrated",
            "description": "Whether the Prompt/Tool is orchestrated by Humanloop. Default is `True`. If `False`, a log for the Prompt/Tool should be submitted by the user via the API.",
            "default": true
          }
        },
        "type": "object",
        "title": "EvaluateeRequest",
        "description": "Specification of a File version on Humanloop.\n\nThis can be done in a couple of ways:\n- Specifying `version_id` directly.\n- Specifying a File (and optionally an Environment).\n    - A File can be specified by either `path` or `file_id`.\n    - An Environment can be specified by `environment_id`. If no Environment is specified, the default Environment is used."
      },
      "EvaluateeResponse": {
        "properties": {
          "version": {
            "$ref": "#/components/schemas/EvaluatedVersionResponse"
          },
          "batch_id": {
            "type": "string",
            "title": "Batch ID",
            "description": "Unique identifier for the batch of Logs to include in the Evaluation Report. "
          },
          "orchestrated": {
            "type": "boolean",
            "title": "Humanloop Orchestrated",
            "description": "Whether the Prompt/Tool is orchestrated by Humanloop. Default is `True`. If `False`, a log for the Prompt/Tool should be submitted by the user via the API."
          },
          "pinned": {
            "type": "boolean",
            "title": "Pinned",
            "description": "Pinned Evaluatees are shown in Humanloop's Overview, allowing you to use them as baselines for comparison."
          },
          "added_at": {
            "type": "string",
            "format": "date-time",
            "title": "Added At",
            "description": "When the Evaluatee was added to the Evaluation."
          }
        },
        "type": "object",
        "required": ["version", "orchestrated", "pinned"],
        "title": "EvaluateeResponse",
        "description": "Version of the Evaluatee being evaluated."
      },
      "EvaluationEvaluatorResponse": {
        "properties": {
          "version": {
            "$ref": "#/components/schemas/EvaluatorResponse"
          },
          "orchestrated": {
            "type": "boolean",
            "title": "Humanloop Orchestrated",
            "description": "Whether the Evaluator is orchestrated by Humanloop. Default is `True`. If `False`, a log for the Evaluator should be submitted by the user via the API."
          },
          "added_at": {
            "type": "string",
            "format": "date-time",
            "title": "Added At",
            "description": "When the Evaluator was added to the Evaluation."
          }
        },
        "type": "object",
        "required": ["version", "orchestrated", "added_at"],
        "title": "EvaluationEvaluatorResponse"
      },
      "EvaluationReportLogResponse": {
        "properties": {
          "evaluated_version": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatedVersionResponse"
              }
            ],
            "title": "Evaluated version",
            "description": "The version of the Prompt, Tool or Evaluator that the Log belongs to."
          },
          "datapoint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DatapointResponse"
              }
            ],
            "title": "Datapoint",
            "description": "The Datapoint used to generate the Log"
          },
          "log": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LogResponse"
              }
            ],
            "title": "Log",
            "description": "The Log that was evaluated by the Evaluator."
          },
          "evaluator_logs": {
            "items": {
              "$ref": "#/components/schemas/LogResponse"
            },
            "type": "array",
            "title": "Evaluator Logs",
            "description": "The Evaluator Logs containing the judgments for the Log."
          }
        },
        "type": "object",
        "required": ["evaluated_version", "datapoint", "evaluator_logs"],
        "title": "EvaluationReportLogResponse"
      },
      "EvaluationResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Evaluation ID",
            "description": "Unique identifier for the Evaluation. Starts with `evr`."
          },
          "dataset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DatasetResponse"
              }
            ],
            "title": "Dataset",
            "description": "The Dataset used in the Evaluation."
          },
          "evaluatees": {
            "items": {
              "$ref": "#/components/schemas/EvaluateeResponse"
            },
            "type": "array",
            "title": "Evaluated Versions",
            "description": "The Prompt/Tool Versions included in the Evaluation."
          },
          "evaluators": {
            "items": {
              "$ref": "#/components/schemas/EvaluationEvaluatorResponse"
            },
            "type": "array",
            "title": "Evaluator",
            "description": "The Evaluator Versions used to evaluate."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluationStatus"
              }
            ],
            "title": "Status",
            "description": "The current status of the Evaluation.\n\n- `\"pending\"`: The Evaluation has been created but is not actively being worked on by Humanloop.\n- `\"running\"`: Humanloop is checking for any missing Logs and Evaluator Logs, and will generate them where appropriate.\n- `\"completed\"`: All Logs an Evaluator Logs have been generated.\n- `\"cancelled\"`: The Evaluation has been cancelled by the user. Humanloop will stop generating Logs and Evaluator Logs.\n"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the Evaluation to help identify it. Must be unique among Evaluations associated with File."
          },
          "file_id": {
            "type": "string",
            "title": "File ID",
            "description": "Unique identifier for the File associated with the Evaluation."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "created_by": {
            "$ref": "#/components/schemas/UserResponse"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "url": {
            "type": "string",
            "title": "URL",
            "description": "URL to view the Evaluation on the Humanloop."
          }
        },
        "type": "object",
        "required": [
          "id",
          "dataset",
          "evaluatees",
          "evaluators",
          "status",
          "created_at",
          "updated_at"
        ],
        "title": "EvaluationResponse"
      },
      "EvaluationStats": {
        "properties": {
          "overall_stats": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OverallStats"
              }
            ],
            "title": "Overall Stats",
            "description": "Stats for the Evaluation Report as a whole."
          },
          "version_stats": {
            "items": {
              "$ref": "#/components/schemas/VersionStatsResponse"
            },
            "type": "array",
            "title": "Version Stats",
            "description": "Stats for each Evaluated Version in the Evaluation Report."
          },
          "progress": {
            "type": "string",
            "title": "Progress",
            "description": "A summary string report of the Evaluation's progress you can print to the command line;helpful when integrating Evaluations with CI/CD."
          },
          "report": {
            "type": "string",
            "title": "Report",
            "description": "A summary string report of the Evaluation you can print to command line;helpful when integrating Evaluations with CI/CD."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluationStatus"
              }
            ],
            "title": "Status",
            "description": "The current status of the Evaluation."
          }
        },
        "type": "object",
        "required": ["overall_stats", "version_stats", "status"],
        "title": "EvaluationStats"
      },
      "EvaluationStatus": {
        "type": "string",
        "enum": ["pending", "running", "completed", "cancelled"],
        "title": "EvaluationStatus",
        "description": "Status of an evaluation."
      },
      "EvaluatorActivationDeactivationRequest": {
        "properties": {
          "activate": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MonitoringEvaluatorVersionRequest"
                },
                {
                  "$ref": "#/components/schemas/MonitoringEvaluatorEnvironmentRequest"
                }
              ]
            },
            "type": "array",
            "title": "Evaluators to activate",
            "description": "Evaluators to activate for Monitoring. These will be automatically run on new Logs."
          },
          "deactivate": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MonitoringEvaluatorVersionRequest"
                },
                {
                  "$ref": "#/components/schemas/MonitoringEvaluatorEnvironmentRequest"
                }
              ]
            },
            "type": "array",
            "title": "Evaluators to deactivate",
            "description": "Evaluators to deactivate. These will not be run on new Logs."
          }
        },
        "type": "object",
        "title": "EvaluatorActivationDeactivationRequest"
      },
      "EvaluatorAggregate": {
        "properties": {
          "value": {
            "type": "number",
            "title": "Aggregated value",
            "description": "The aggregated value of the evaluator."
          },
          "evaluator_id": {
            "type": "string",
            "title": "Evaluator ID",
            "description": "ID of the evaluator."
          },
          "evaluator_version_id": {
            "type": "string",
            "title": "Evaluator version ID",
            "description": "ID of the evaluator version."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "value",
          "evaluator_id",
          "evaluator_version_id",
          "created_at",
          "updated_at"
        ],
        "title": "EvaluatorAggregate"
      },
      "EvaluatorArgumentsType": {
        "type": "string",
        "enum": ["target_free", "target_required"],
        "title": "EvaluatorArgumentsType",
        "description": "Enum representing the possible argument types of an evaluator."
      },
      "EvaluatorJudgmentNumberLimit": {
        "properties": {
          "min": {
            "type": "number",
            "title": "Minimum",
            "description": "The minimum value that can be selected."
          },
          "max": {
            "type": "number",
            "title": "Maximum",
            "description": "The maximum value that can be selected."
          },
          "step": {
            "type": "number",
            "title": "Step",
            "description": "The step size for the number input."
          }
        },
        "type": "object",
        "title": "EvaluatorJudgmentNumberLimit"
      },
      "EvaluatorJudgmentOptionResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the option."
          },
          "valence": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Valence"
              }
            ],
            "title": "Valence",
            "description": "Whether this option should be considered positive or negative.",
            "default": "neutral"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "EvaluatorJudgmentOptionResponse"
      },
      "EvaluatorLogResponse": {
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start time",
            "description": "When the logged event started."
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End time",
            "description": "When the logged event ended."
          },
          "output": {
            "type": "string",
            "title": "Model output",
            "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created at",
            "description": "User defined timestamp for when the log was created. "
          },
          "error": {
            "type": "string",
            "title": "Error",
            "description": "Error message if the log is an error."
          },
          "provider_latency": {
            "type": "number",
            "title": "Log latency",
            "description": "Duration of the logged event in seconds."
          },
          "stdout": {
            "type": "string",
            "title": "Standard Output",
            "description": "Captured log and debug statements."
          },
          "provider_request": {
            "type": "object",
            "title": "Provider request",
            "description": "Raw request sent to provider."
          },
          "provider_response": {
            "type": "object",
            "title": "Provider response",
            "description": "Raw response received the provider."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "parent_id": {
            "type": "string",
            "title": "Parent ID",
            "description": "Identifier of the evaluated Log. The newly created Log will have this one set as parent."
          },
          "source_datapoint_id": {
            "type": "string",
            "title": "Source Datapoint ID",
            "description": "Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair."
          },
          "trace_parent_id": {
            "type": "string",
            "title": "Trace Parent ID",
            "description": "The ID of the parent Log to nest this Log under in a Trace."
          },
          "batches": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Batch IDs",
            "description": "Array of Batch IDs that this Log is part of. Batches are used to group Logs together for offline Evaluations"
          },
          "user": {
            "type": "string",
            "title": "End-user identifier",
            "description": "End-user ID related to the Log."
          },
          "environment": {
            "type": "string",
            "title": "Environment name",
            "description": "The name of the Environment the Log is associated to."
          },
          "save": {
            "type": "boolean",
            "title": "Save",
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "default": true
          },
          "judgment": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "number"
              }
            ],
            "title": "Judgment Value",
            "description": "Evaluator assessment of the Log."
          },
          "id": {
            "type": "string",
            "title": "Log ID",
            "description": "Unique identifier for the Log."
          },
          "evaluator_logs": {
            "items": {
              "$ref": "#/components/schemas/EvaluatorLogResponse"
            },
            "type": "array",
            "title": "Evaluator Logs",
            "description": "List of Evaluator Logs associated with the Log. These contain Evaluator judgments on the Log."
          },
          "trace_flow_id": {
            "type": "string",
            "title": "Trace Flow ID",
            "description": "Identifier for the Flow that the Trace belongs to."
          },
          "trace_id": {
            "type": "string",
            "title": "Trace ID",
            "description": "Identifier for the Trace that the Log belongs to."
          },
          "trace_children": {
            "items": {
              "$ref": "#/components/schemas/LogResponse"
            },
            "type": "array",
            "title": "Trace children",
            "description": "Logs nested under this Log in the Trace.",
            "default": []
          },
          "evaluator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatorResponse"
              }
            ],
            "title": "Evaluator",
            "description": "Evaluator used to generate the judgment."
          },
          "parent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LogResponse"
              }
            ],
            "title": "Parent Log",
            "description": "The Log that was evaluated. Only provided if the ?include_parent query parameter is set for the "
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "evaluator_logs", "evaluator"],
        "title": "EvaluatorLogResponse",
        "description": "General request for creating a Log"
      },
      "EvaluatorResponse": {
        "properties": {
          "path": {
            "type": "string",
            "title": "Evaluator path",
            "description": "Path of the Evaluator including the Evaluator name, which is used as a unique identifier."
          },
          "id": {
            "type": "string",
            "title": "Evaluator ID",
            "description": "Unique identifier for the Evaluator."
          },
          "directory_id": {
            "type": "string",
            "title": "Directory ID",
            "description": "ID of the directory that the file is in on Humanloop."
          },
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made."
          },
          "spec": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/LLMEvaluatorRequest"
              },
              {
                "$ref": "#/components/schemas/CodeEvaluatorRequest"
              },
              {
                "$ref": "#/components/schemas/HumanEvaluatorRequest"
              },
              {
                "$ref": "#/components/schemas/ExternalEvaluatorRequest"
              }
            ],
            "title": "Spec",
            "discriminator": {
              "propertyName": "evaluator_type",
              "mapping": {
                "llm": "#/components/schemas/LLMEvaluatorRequest",
                "python": "#/components/schemas/CodeEvaluatorRequest",
                "human": "#/components/schemas/HumanEvaluatorRequest",
                "external": "#/components/schemas/ExternalEvaluatorRequest"
              }
            }
          },
          "name": {
            "type": "string",
            "title": "Prompt name",
            "description": "Name of the Evaluator, which is used as a unique identifier."
          },
          "version_id": {
            "type": "string",
            "title": "Version ID",
            "description": "Unique identifier for the specific Evaluator Version. If no query params provided, the default deployed Evaluator Version is returned."
          },
          "type": {
            "type": "string",
            "enum": ["evaluator"],
            "title": "Type",
            "default": "evaluator"
          },
          "environments": {
            "items": {
              "$ref": "#/components/schemas/EnvironmentResponse"
            },
            "type": "array",
            "title": "Environments",
            "description": "The list of environments the Evaluator Version is deployed to."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              }
            ],
            "title": "Created by",
            "description": "The user who created the Evaluator."
          },
          "status": {
            "$ref": "#/components/schemas/VersionStatus"
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Used At"
          },
          "version_logs_count": {
            "type": "integer",
            "title": "Number of logs for this version",
            "description": "The number of logs that have been generated for this Evaluator Version"
          },
          "total_logs_count": {
            "type": "integer",
            "title": "Total number of logs across all versions",
            "description": "The number of logs that have been generated across all Evaluator Versions"
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/InputResponse"
            },
            "type": "array",
            "title": "Prompt inputs",
            "description": "Inputs associated to the Evaluator. Inputs correspond to any of the variables used within the Evaluator template."
          },
          "evaluators": {
            "items": {
              "$ref": "#/components/schemas/MonitoringEvaluatorResponse"
            },
            "type": "array",
            "title": "Monitoring Evaluators",
            "description": "Evaluators that have been attached to this Evaluator that are used for monitoring logs."
          },
          "evaluator_aggregates": {
            "items": {
              "$ref": "#/components/schemas/EvaluatorAggregate"
            },
            "type": "array",
            "title": "Evaluator aggregates",
            "description": "Aggregation of Evaluator results for the Evaluator Version."
          },
          "attributes": {
            "type": "object",
            "title": "Attributes",
            "description": "Additional fields to describe the Evaluator. Helpful to separate Evaluator versions from each other with details on how they were created or used."
          }
        },
        "type": "object",
        "required": [
          "path",
          "id",
          "spec",
          "name",
          "version_id",
          "created_at",
          "updated_at",
          "status",
          "last_used_at",
          "version_logs_count",
          "total_logs_count",
          "inputs"
        ],
        "title": "EvaluatorResponse",
        "description": "Version of the Evaluator used to provide judgments."
      },
      "EvaluatorReturnTypeEnum": {
        "type": "string",
        "enum": ["boolean", "number", "select", "multi_select", "text"],
        "title": "EvaluatorReturnTypeEnum",
        "description": "Enum representing the possible return types of an evaluator."
      },
      "ExternalEvaluatorRequest": {
        "properties": {
          "arguments_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatorArgumentsType"
              }
            ],
            "title": "Arguments type",
            "description": "Whether this Evaluator is target-free or target-required."
          },
          "return_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatorReturnTypeEnum"
              }
            ],
            "title": "Return type",
            "description": "The type of the return value of the Evaluator."
          },
          "attributes": {
            "type": "object",
            "title": "Attributes",
            "description": "Additional fields to describe the Evaluator. Helpful to separate Evaluator versions from each other with details on how they were created or used."
          },
          "evaluator_type": {
            "type": "string",
            "enum": ["external"],
            "title": "Evaluator type",
            "description": "The type of the evaluator.",
            "default": "external"
          }
        },
        "type": "object",
        "required": ["arguments_type", "return_type"],
        "title": "ExternalEvaluatorRequest"
      },
      "FileEnvironmentResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "tag": {
            "$ref": "#/components/schemas/EnvironmentTag"
          },
          "file": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PromptResponse"
              },
              {
                "$ref": "#/components/schemas/ToolResponse"
              },
              {
                "$ref": "#/components/schemas/DatasetResponse"
              },
              {
                "$ref": "#/components/schemas/EvaluatorResponse"
              },
              {
                "$ref": "#/components/schemas/FlowResponse"
              }
            ],
            "title": "File",
            "description": "The version of the File that is deployed to the Environment, if one is deployed."
          }
        },
        "type": "object",
        "required": ["id", "created_at", "name", "tag"],
        "title": "FileEnvironmentResponse",
        "description": "Response model for the List Environments endpoint under Files.\n\nContains the deployed version of the File, if one is deployed to the Environment."
      },
      "FileRequest": {
        "properties": {
          "id": {
            "type": "string",
            "title": "File ID",
            "description": "ID for an existing File."
          },
          "path": {
            "type": "string",
            "title": "File path",
            "description": "Path of the File, including the name. This locates the File in the Humanloop filesystem and is used as as a unique identifier. Example: `folder/name` or just `name`."
          }
        },
        "type": "object",
        "title": "FileRequest"
      },
      "FileType": {
        "type": "string",
        "enum": ["prompt", "tool", "dataset", "evaluator", "flow"],
        "title": "FileType",
        "description": "Enum for File types."
      },
      "FlowKernelRequest": {
        "properties": {
          "attributes": {
            "type": "object",
            "title": "Attributes",
            "description": "A key-value object identifying the Flow Version."
          }
        },
        "type": "object",
        "required": ["attributes"],
        "title": "FlowKernelRequest"
      },
      "FlowLogRequest": {
        "properties": {
          "evaluation_id": {
            "type": "string",
            "title": "Evaluation ID",
            "description": "Unique identifier for the Evaluation Report to associate the Log to."
          },
          "path": {
            "type": "string",
            "title": "Flow path",
            "description": "Path of the Flow, including the name. This locates the Flow in the Humanloop filesystem and is used as as a unique identifier. Example: `folder/name` or just `name`."
          },
          "id": {
            "type": "string",
            "title": "Flow ID",
            "description": "ID for an existing Flow."
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start time",
            "description": "The start time of the Trace. Will be updated if a child Log with an earlier start time is added."
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End time",
            "description": "The end time of the Trace. Will be updated if a child Log with a later end time is added."
          },
          "output": {
            "type": "string",
            "title": "Model output",
            "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created at",
            "description": "User defined timestamp for when the log was created. "
          },
          "error": {
            "type": "string",
            "title": "Error",
            "description": "Error message if the log is an error."
          },
          "provider_latency": {
            "type": "number",
            "title": "Log latency",
            "description": "Duration of the logged event in seconds."
          },
          "stdout": {
            "type": "string",
            "title": "Standard Output",
            "description": "Captured log and debug statements."
          },
          "provider_request": {
            "type": "object",
            "title": "Provider request",
            "description": "Raw request sent to provider."
          },
          "provider_response": {
            "type": "object",
            "title": "Provider response",
            "description": "Raw response received the provider."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "source_datapoint_id": {
            "type": "string",
            "title": "Source Datapoint ID",
            "description": "Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair."
          },
          "trace_parent_id": {
            "type": "string",
            "title": "Trace Parent ID",
            "description": "The ID of the parent Log to nest this Log under in a Trace."
          },
          "batch_id": {
            "type": "string",
            "title": "Batch ID",
            "description": "Unique identifier for the Batch to add this Batch to. Batches are used to group Logs together for Evaluations. A Batch will be created if one with the given ID does not exist."
          },
          "user": {
            "type": "string",
            "title": "End-user identifier",
            "description": "End-user ID related to the Log."
          },
          "environment": {
            "type": "string",
            "title": "Environment name",
            "description": "The name of the Environment the Log is associated to."
          },
          "save": {
            "type": "boolean",
            "title": "Save",
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "default": true
          },
          "log_id": {
            "type": "string",
            "title": "Log ID",
            "description": "The identifier for the Log. If not specified, a default ID will be generated. This allows additional Logs to be appended to the trace without waiting for Humanloop to return an ID."
          },
          "flow": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FlowKernelRequest"
              }
            ],
            "title": "Flow",
            "description": "Flow used to generate the Trace."
          },
          "trace_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TraceStatus"
              }
            ],
            "title": "Status",
            "description": "Status of the Trace. When a Trace is marked as `complete`, no more Logs can be added to it. Monitoring Evaluators will only run on `complete` Traces. If you do not intend to add more Logs to the Trace after creation, set this to `complete`.",
            "default": "incomplete"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "FlowLogRequest",
        "description": "Request to create a Trace on a Flow."
      },
      "FlowLogResponse": {
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start time",
            "description": "When the logged event started."
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End time",
            "description": "When the logged event ended."
          },
          "output": {
            "type": "string",
            "title": "Model output",
            "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created at",
            "description": "User defined timestamp for when the log was created. "
          },
          "error": {
            "type": "string",
            "title": "Error",
            "description": "Error message if the log is an error."
          },
          "provider_latency": {
            "type": "number",
            "title": "Log latency",
            "description": "Duration of the logged event in seconds."
          },
          "stdout": {
            "type": "string",
            "title": "Standard Output",
            "description": "Captured log and debug statements."
          },
          "provider_request": {
            "type": "object",
            "title": "Provider request",
            "description": "Raw request sent to provider."
          },
          "provider_response": {
            "type": "object",
            "title": "Provider response",
            "description": "Raw response received the provider."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the Flow Log.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "source_datapoint_id": {
            "type": "string",
            "title": "Source Datapoint ID",
            "description": "Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair."
          },
          "trace_parent_id": {
            "type": "string",
            "title": "Trace Parent ID",
            "description": "The ID of the parent Log to nest this Log under in a Trace."
          },
          "batches": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Batch IDs",
            "description": "Array of Batch IDs that this Log is part of. Batches are used to group Logs together for offline Evaluations"
          },
          "user": {
            "type": "string",
            "title": "End-user identifier",
            "description": "End-user ID related to the Log."
          },
          "environment": {
            "type": "string",
            "title": "Environment name",
            "description": "The name of the Environment the Log is associated to."
          },
          "save": {
            "type": "boolean",
            "title": "Save",
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "default": true
          },
          "id": {
            "type": "string",
            "title": "Log ID",
            "description": "Unique identifier for the Log."
          },
          "evaluator_logs": {
            "items": {
              "$ref": "#/components/schemas/EvaluatorLogResponse"
            },
            "type": "array",
            "title": "Evaluator Logs",
            "description": "List of Evaluator Logs associated with the Log. These contain Evaluator judgments on the Log."
          },
          "trace_flow_id": {
            "type": "string",
            "title": "Trace Flow ID",
            "description": "Identifier for the Flow that the Trace belongs to."
          },
          "trace_id": {
            "type": "string",
            "title": "Trace ID",
            "description": "Identifier for the Trace that the Log belongs to."
          },
          "trace_children": {
            "items": {
              "$ref": "#/components/schemas/LogResponse"
            },
            "type": "array",
            "title": "Trace children",
            "description": "Logs nested under this Log in the Trace.",
            "default": []
          },
          "flow": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FlowResponse"
              }
            ],
            "title": "Flow",
            "description": "Flow used to generate the Log."
          },
          "trace_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TraceStatus"
              }
            ],
            "title": "Trace status",
            "description": "Status of the Trace. When a Trace is marked as `complete`, no more Logs can be added to it. Monitoring Evaluators will only run on completed Traces."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "evaluator_logs", "flow"],
        "title": "FlowLogResponse",
        "description": "General request for creating a Log"
      },
      "FlowRequest": {
        "properties": {
          "path": {
            "type": "string",
            "title": "Flow path",
            "description": "Path of the Flow, including the name. This locates the Flow in the Humanloop filesystem and is used as as a unique identifier. Example: `folder/name` or just `name`."
          },
          "id": {
            "type": "string",
            "title": "Flow ID",
            "description": "ID for an existing Flow."
          },
          "attributes": {
            "type": "object",
            "title": "Attributes",
            "description": "A key-value object identifying the Flow Version."
          },
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made."
          }
        },
        "type": "object",
        "required": ["attributes"],
        "title": "FlowRequest",
        "description": "Request model for creating a new Flow."
      },
      "FlowResponse": {
        "properties": {
          "path": {
            "type": "string",
            "title": "Flow path",
            "description": "Path of the Flow, including the name, which is used as a unique identifier."
          },
          "id": {
            "type": "string",
            "title": "Flow ID",
            "description": "Unique identifier for the Flow. Starts with fl_."
          },
          "directory_id": {
            "type": "string",
            "title": "Directory ID",
            "description": "ID of the directory that the file is in on Humanloop."
          },
          "attributes": {
            "type": "object",
            "title": "Attributes",
            "description": "A key-value object identifying the Flow Version."
          },
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made. If provided, a committed version of the Flow is created. Otherwise, an uncommitted version is created."
          },
          "name": {
            "type": "string",
            "title": "Flow name",
            "description": "Name of the Flow."
          },
          "version_id": {
            "type": "string",
            "title": "Version ID",
            "description": "Unique identifier for the specific Flow Version. If no query params provided, the default deployed Flow Version is returned."
          },
          "type": {
            "type": "string",
            "enum": ["flow"],
            "title": "Type",
            "default": "flow"
          },
          "environments": {
            "items": {
              "$ref": "#/components/schemas/EnvironmentResponse"
            },
            "type": "array",
            "title": "Environments",
            "description": "The list of environments the Flow Version is deployed to."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              }
            ],
            "title": "Created by",
            "description": "The user who created the Flow."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VersionStatus"
              }
            ],
            "title": "Status",
            "description": "The status of the Flow Version."
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Used At"
          },
          "version_logs_count": {
            "type": "integer",
            "title": "Number of logs for this version",
            "description": "The number of logs that have been generated for this Flow Version"
          },
          "evaluator_aggregates": {
            "items": {
              "$ref": "#/components/schemas/EvaluatorAggregate"
            },
            "type": "array",
            "title": "Evaluator aggregates",
            "description": "Aggregation of Evaluator results for the Flow Version."
          },
          "evaluators": {
            "items": {
              "$ref": "#/components/schemas/MonitoringEvaluatorResponse"
            },
            "type": "array",
            "title": "Evaluators",
            "description": "The list of Monitoring Evaluators associated with the Flow Version."
          }
        },
        "type": "object",
        "required": [
          "path",
          "id",
          "attributes",
          "name",
          "version_id",
          "created_at",
          "updated_at",
          "status",
          "last_used_at",
          "version_logs_count"
        ],
        "title": "FlowResponse",
        "description": "Response model for a Flow."
      },
      "FunctionTool": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "arguments": {
            "type": "string",
            "title": "Arguments"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "FunctionTool",
        "description": "A function tool to be called by the model where user owns runtime."
      },
      "FunctionToolChoice": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "FunctionToolChoice",
        "description": "A function tool to be called by the model where user owns runtime."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HumanEvaluatorRequest": {
        "properties": {
          "arguments_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatorArgumentsType"
              }
            ],
            "title": "Arguments type",
            "description": "Whether this Evaluator is target-free or target-required."
          },
          "return_type": {
            "type": "string",
            "enum": ["select", "multi_select", "text", "number", "boolean"],
            "title": "Return type",
            "description": "The type of the return value of the Evaluator."
          },
          "attributes": {
            "type": "object",
            "title": "Attributes",
            "description": "Additional fields to describe the Evaluator. Helpful to separate Evaluator versions from each other with details on how they were created or used."
          },
          "evaluator_type": {
            "type": "string",
            "enum": ["human"],
            "title": "Evaluator type",
            "description": "The type of the evaluator.",
            "default": "human"
          },
          "instructions": {
            "type": "string",
            "title": "Instructions",
            "description": "Instructions for the Human annotating the ."
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/EvaluatorJudgmentOptionResponse"
            },
            "type": "array",
            "title": "Options",
            "description": "The options that the Human annotator can choose from."
          },
          "number_limits": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatorJudgmentNumberLimit"
              }
            ],
            "title": "Number limits",
            "description": "Limits on the judgment that can be applied. Only for Evaluators with `return_type` of `'number'`."
          },
          "number_valence": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Valence"
              }
            ],
            "title": "Number valence",
            "description": "The valence of the number judgment. Only for Evaluators with `return_type` of `'number'`. If 'positive', a higher number is better. If 'negative', a lower number is better."
          }
        },
        "type": "object",
        "required": ["arguments_type", "return_type"],
        "title": "HumanEvaluatorRequest"
      },
      "ImageChatContent": {
        "properties": {
          "type": {
            "type": "string",
            "enum": ["image_url"],
            "title": "Type"
          },
          "image_url": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageUrl"
              }
            ],
            "title": "Image URL",
            "description": "The message's image content."
          }
        },
        "type": "object",
        "required": ["type", "image_url"],
        "title": "ImageChatContent"
      },
      "ImageUrl": {
        "properties": {
          "url": {
            "type": "string",
            "title": "URL",
            "description": "Either a URL of the image or the base64 encoded image data."
          },
          "detail": {
            "type": "string",
            "enum": ["high", "low", "auto"],
            "title": "Image detail level",
            "description": "Specify the detail level of the image provided to the model. For more details see: https://platform.openai.com/docs/guides/vision/low-or-high-fidelity-image-understanding"
          }
        },
        "type": "object",
        "required": ["url"],
        "title": "ImageUrl"
      },
      "InputResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Input name",
            "description": "Type of input."
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "InputResponse"
      },
      "LLMEvaluatorRequest": {
        "properties": {
          "arguments_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatorArgumentsType"
              }
            ],
            "title": "Arguments type",
            "description": "Whether this Evaluator is target-free or target-required."
          },
          "return_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatorReturnTypeEnum"
              }
            ],
            "title": "Return type",
            "description": "The type of the return value of the Evaluator."
          },
          "attributes": {
            "type": "object",
            "title": "Attributes",
            "description": "Additional fields to describe the Evaluator. Helpful to separate Evaluator versions from each other with details on how they were created or used."
          },
          "evaluator_type": {
            "type": "string",
            "enum": ["llm"],
            "title": "Evaluator type",
            "description": "The type of the evaluator.",
            "default": "llm"
          },
          "prompt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PromptKernelRequest"
              }
            ],
            "title": "Prompt parameters",
            "description": "The prompt parameters used to generate."
          }
        },
        "type": "object",
        "required": ["arguments_type", "return_type"],
        "title": "LLMEvaluatorRequest"
      },
      "LinkedToolResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name for the tool referenced by the model."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the tool referenced by the model"
          },
          "strict": {
            "type": "boolean",
            "title": "Strict",
            "description": "If true, forces the model to output json data in the structure of the parameters schema.",
            "default": false
          },
          "parameters": {
            "type": "object",
            "title": "Tool parameters",
            "description": "Parameters needed to run the Tool, defined in JSON Schema format: https://json-schema.org/"
          },
          "id": {
            "type": "string",
            "title": "Tool ID",
            "description": "Unique identifier for the Tool linked."
          },
          "version_id": {
            "type": "string",
            "title": "Tool Version ID",
            "description": "Unique identifier for the Tool Version linked."
          }
        },
        "type": "object",
        "required": ["name", "description", "id", "version_id"],
        "title": "LinkedToolResponse"
      },
      "ListDatasets": {
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/DatasetResponse"
            },
            "type": "array",
            "title": "Records",
            "description": "The list of Datasets."
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "ListDatasets"
      },
      "ListEvaluators": {
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/EvaluatorResponse"
            },
            "type": "array",
            "title": "Records",
            "description": "The list of Evaluators."
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "ListEvaluators"
      },
      "ListFlows": {
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/FlowResponse"
            },
            "type": "array",
            "title": "Records",
            "description": "The list of Flows."
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "ListFlows"
      },
      "ListPrompts": {
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/PromptResponse"
            },
            "type": "array",
            "title": "Records",
            "description": "The list of Prompts."
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "ListPrompts"
      },
      "ListTools": {
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/ToolResponse"
            },
            "type": "array",
            "title": "Records",
            "description": "The list of Tools."
          }
        },
        "type": "object",
        "required": ["records"],
        "title": "ListTools"
      },
      "LogResponse": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/PromptLogResponse"
          },
          {
            "$ref": "#/components/schemas/ToolLogResponse"
          },
          {
            "$ref": "#/components/schemas/EvaluatorLogResponse"
          },
          {
            "$ref": "#/components/schemas/FlowLogResponse"
          }
        ],
        "additionalProperties": false,
        "title": "LogResponse"
      },
      "ModelEndpoints": {
        "type": "string",
        "enum": ["complete", "chat", "edit"],
        "title": "ModelEndpoints",
        "description": "Supported model provider endpoints."
      },
      "ModelProviders": {
        "type": "string",
        "enum": [
          "openai",
          "openai_azure",
          "mock",
          "anthropic",
          "bedrock",
          "cohere",
          "replicate",
          "google",
          "groq"
        ],
        "title": "ModelProviders",
        "description": "Supported model providers."
      },
      "MonitoringEvaluatorEnvironmentRequest": {
        "properties": {
          "evaluator_id": {
            "type": "string",
            "title": "Evaluator ID",
            "description": "Unique identifier for the Evaluator to be used for monitoring."
          },
          "environment_id": {
            "type": "string",
            "title": "Environment ID",
            "description": "Unique identifier for the Environment. The Evaluator Version deployed to this Environment will be used for monitoring."
          }
        },
        "type": "object",
        "required": ["evaluator_id", "environment_id"],
        "title": "MonitoringEvaluatorEnvironmentRequest"
      },
      "MonitoringEvaluatorResponse": {
        "properties": {
          "version_reference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VersionReferenceResponse"
              }
            ],
            "title": "Version reference",
            "description": "The Evaluator Version used for monitoring. This can be a specific Version by ID, or a Version deployed to an Environment."
          },
          "version": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatorResponse"
              }
            ],
            "title": "Version",
            "description": "The deployed Version."
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MonitoringEvaluatorState"
              }
            ],
            "title": "State",
            "description": "The state of the Monitoring Evaluator. Either `active` or `inactive`"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["version_reference", "state", "created_at", "updated_at"],
        "title": "MonitoringEvaluatorResponse"
      },
      "MonitoringEvaluatorState": {
        "type": "string",
        "enum": ["active", "inactive"],
        "title": "MonitoringEvaluatorState",
        "description": "State of an evaluator connected to a file"
      },
      "MonitoringEvaluatorVersionRequest": {
        "properties": {
          "evaluator_version_id": {
            "type": "string",
            "title": "Evaluator Version ID",
            "description": "Unique identifier for the Evaluator Version to be used for monitoring."
          }
        },
        "type": "object",
        "required": ["evaluator_version_id"],
        "title": "MonitoringEvaluatorVersionRequest"
      },
      "NumericEvaluatorStatsResponse": {
        "properties": {
          "evaluator_version_id": {
            "type": "string",
            "title": "Evaluator Version ID",
            "description": "Unique identifier for the Evaluator Version."
          },
          "total_logs": {
            "type": "integer",
            "title": "Total Evaluator Logs",
            "description": "The total number of Logs generated by this Evaluator Version on the Evaluated Version's Logs. This includes Nulls and Errors."
          },
          "num_judgments": {
            "type": "integer",
            "title": "Number of Judgments",
            "description": "The total number of Evaluator judgments for this Evaluator Version. This excludes Nulls and Errors."
          },
          "num_nulls": {
            "type": "integer",
            "title": "Number of Nulls",
            "description": "The total number of null judgments (i.e. abstentions) for this Evaluator Version."
          },
          "num_errors": {
            "type": "integer",
            "title": "Number of Errors",
            "description": "The total number of errored Evaluators for this Evaluator Version."
          },
          "mean": {
            "type": "number",
            "title": "Mean"
          },
          "std": {
            "type": "number",
            "title": "Std"
          },
          "percentiles": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Percentiles"
          }
        },
        "type": "object",
        "required": [
          "evaluator_version_id",
          "total_logs",
          "num_judgments",
          "num_nulls",
          "num_errors",
          "percentiles"
        ],
        "title": "NumericEvaluatorStatsResponse",
        "description": "Base attributes for stats for an Evaluator Version-Evaluated Version pair\nin the Evaluation Report.",
        "example": {
          "mean": 0,
          "std": 1,
          "percentiles": {
            "0": -2.5,
            "25": -0.6745,
            "50": 0,
            "75": 0.6745,
            "100": 2.5
          }
        }
      },
      "ObservabilityStatus": {
        "type": "string",
        "enum": ["pending", "running", "completed", "failed"],
        "title": "ObservabilityStatus",
        "description": "Status of a Log for observability.\n\nObservability is implemented by running monitoring Evaluators on Logs."
      },
      "OverallStats": {
        "properties": {
          "num_datapoints": {
            "type": "integer",
            "title": "Number of Datapoints",
            "description": "The total number of Datapoints in the Evaluation Report's Dataset Version."
          },
          "total_logs": {
            "type": "integer",
            "title": "Total Logs",
            "description": "The total number of Logs in the Evaluation Report."
          },
          "total_evaluator_logs": {
            "type": "integer",
            "title": "Total Evaluator Logs",
            "description": "The total number of Evaluator Logs in the Evaluation Report."
          }
        },
        "type": "object",
        "required": ["num_datapoints", "total_logs", "total_evaluator_logs"],
        "title": "OverallStats"
      },
      "PaginatedData_DatapointResponse_": {
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/DatapointResponse"
            },
            "type": "array",
            "title": "Records"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": ["records", "page", "size", "total"],
        "title": "PaginatedData[DatapointResponse]"
      },
      "PaginatedData_DatasetResponse_": {
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/DatasetResponse"
            },
            "type": "array",
            "title": "Records"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": ["records", "page", "size", "total"],
        "title": "PaginatedData[DatasetResponse]"
      },
      "PaginatedData_EvaluationReportLogResponse_": {
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/EvaluationReportLogResponse"
            },
            "type": "array",
            "title": "Records"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": ["records", "page", "size", "total"],
        "title": "PaginatedData[EvaluationReportLogResponse]"
      },
      "PaginatedData_EvaluationResponse_": {
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/EvaluationResponse"
            },
            "type": "array",
            "title": "Records"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": ["records", "page", "size", "total"],
        "title": "PaginatedData[EvaluationResponse]"
      },
      "PaginatedData_EvaluatorResponse_": {
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/EvaluatorResponse"
            },
            "type": "array",
            "title": "Records"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": ["records", "page", "size", "total"],
        "title": "PaginatedData[EvaluatorResponse]"
      },
      "PaginatedData_FlowResponse_": {
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/FlowResponse"
            },
            "type": "array",
            "title": "Records"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": ["records", "page", "size", "total"],
        "title": "PaginatedData[FlowResponse]"
      },
      "PaginatedData_LogResponse_": {
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/LogResponse"
            },
            "type": "array",
            "title": "Records"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": ["records", "page", "size", "total"],
        "title": "PaginatedData[LogResponse]"
      },
      "PaginatedData_PromptResponse_": {
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/PromptResponse"
            },
            "type": "array",
            "title": "Records"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": ["records", "page", "size", "total"],
        "title": "PaginatedData[PromptResponse]"
      },
      "PaginatedData_ToolResponse_": {
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/ToolResponse"
            },
            "type": "array",
            "title": "Records"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": ["records", "page", "size", "total"],
        "title": "PaginatedData[ToolResponse]"
      },
      "PaginatedData_Union_PromptResponse__ToolResponse__DatasetResponse__EvaluatorResponse__FlowResponse__": {
        "properties": {
          "records": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PromptResponse"
                },
                {
                  "$ref": "#/components/schemas/ToolResponse"
                },
                {
                  "$ref": "#/components/schemas/DatasetResponse"
                },
                {
                  "$ref": "#/components/schemas/EvaluatorResponse"
                },
                {
                  "$ref": "#/components/schemas/FlowResponse"
                }
              ]
            },
            "type": "array",
            "title": "Records"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": ["records", "page", "size", "total"],
        "title": "PaginatedData[Union[PromptResponse, ToolResponse, DatasetResponse, EvaluatorResponse, FlowResponse]]"
      },
      "PlatformAccessEnum": {
        "type": "string",
        "enum": ["superadmin", "supportadmin", "user"],
        "title": "PlatformAccessEnum",
        "description": "An enumeration."
      },
      "ProjectSortBy": {
        "type": "string",
        "enum": ["created_at", "updated_at", "name"],
        "title": "ProjectSortBy",
        "description": "An enumeration."
      },
      "PromptCallLogResponse": {
        "properties": {
          "output": {
            "type": "string",
            "title": "Model output",
            "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created at",
            "description": "User defined timestamp for when the log was created. "
          },
          "error": {
            "type": "string",
            "title": "Error",
            "description": "Error message if the log is an error."
          },
          "provider_latency": {
            "type": "number",
            "title": "Log latency",
            "description": "Duration of the logged event in seconds."
          },
          "stdout": {
            "type": "string",
            "title": "Standard Output",
            "description": "Captured log and debug statements."
          },
          "output_message": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatMessage"
              }
            ],
            "title": "Output message",
            "description": "The message returned by the provider."
          },
          "prompt_tokens": {
            "type": "integer",
            "title": "Prompt tokens",
            "description": "Number of tokens in the prompt used to generate the output."
          },
          "output_tokens": {
            "type": "integer",
            "title": "Output tokens",
            "description": "Number of tokens in the output generated by the model."
          },
          "prompt_cost": {
            "type": "number",
            "title": "Prompt cost",
            "description": "Cost in dollars associated to the tokens in the prompt."
          },
          "output_cost": {
            "type": "number",
            "title": "Output tokens",
            "description": "Cost in dollars associated to the tokens in the output."
          },
          "finish_reason": {
            "type": "string",
            "title": "Finish reason",
            "description": "Reason the generation finished."
          },
          "index": {
            "type": "integer",
            "title": "Index",
            "description": "The index of the sample in the batch."
          }
        },
        "type": "object",
        "required": ["index"],
        "title": "PromptCallLogResponse",
        "description": "Sample specific response details for a Prompt call"
      },
      "PromptCallRequest": {
        "properties": {
          "path": {
            "type": "string",
            "title": "Prompt path",
            "description": "Path of the Prompt, including the name. This locates the Prompt in the Humanloop filesystem and is used as as a unique identifier. Example: `folder/name` or just `name`."
          },
          "id": {
            "type": "string",
            "title": "Prompt ID",
            "description": "ID for an existing Prompt."
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            },
            "type": "array",
            "title": "Messages",
            "description": "The messages passed to the to provider chat endpoint."
          },
          "tool_choice": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["none"]
              },
              {
                "type": "string",
                "enum": ["auto"]
              },
              {
                "type": "string",
                "enum": ["required"]
              },
              {
                "$ref": "#/components/schemas/ToolChoice"
              }
            ],
            "title": "Tool choice",
            "description": "Controls how the model uses tools. The following options are supported: \n- `'none'` means the model will not call any tool and instead generates a message; this is the default when no tools are provided as part of the Prompt. \n- `'auto'` means the model can decide to call one or more of the provided tools; this is the default when tools are provided as part of the Prompt. \n- `'required'` means the model can decide to call one or more of the provided tools. \n- `{'type': 'function', 'function': {name': <TOOL_NAME>}}` forces the model to use the named function."
          },
          "prompt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PromptKernelRequest"
              }
            ],
            "title": "Prompt",
            "description": "Details of your Prompt. A new Prompt version will be created if the provided details are new."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start time",
            "description": "When the logged event started."
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End time",
            "description": "When the logged event ended."
          },
          "source_datapoint_id": {
            "type": "string",
            "title": "Source Datapoint ID",
            "description": "Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair."
          },
          "trace_parent_id": {
            "type": "string",
            "title": "Trace Parent ID",
            "description": "The ID of the parent Log to nest this Log under in a Trace."
          },
          "batch_id": {
            "type": "string",
            "title": "Batch ID",
            "description": "Unique identifier for the Batch to add this Batch to. Batches are used to group Logs together for Evaluations. A Batch will be created if one with the given ID does not exist."
          },
          "user": {
            "type": "string",
            "title": "End-user identifier",
            "description": "End-user ID related to the Log."
          },
          "environment": {
            "type": "string",
            "title": "Environment name",
            "description": "The name of the Environment the Log is associated to."
          },
          "save": {
            "type": "boolean",
            "title": "Save",
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "default": true
          },
          "provider_api_keys": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProviderApiKeys"
              }
            ],
            "title": "Provider API Keys",
            "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
          },
          "num_samples": {
            "type": "integer",
            "title": "Number of samples",
            "description": "The number of generations.",
            "default": 1
          },
          "stream": {
            "type": "boolean",
            "title": "Whether to stream partial results",
            "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.",
            "default": false
          },
          "return_inputs": {
            "type": "boolean",
            "title": "Return inputs",
            "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true.",
            "default": true
          },
          "logprobs": {
            "type": "integer",
            "title": "Log probabilities of most likely n tokens",
            "description": "Include the log probabilities of the top n tokens in the provider_response"
          },
          "suffix": {
            "type": "string",
            "title": "Completion suffix",
            "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PromptCallRequest",
        "description": "Base request for any generations/logs. Contains relational fields such as session id or parent id."
      },
      "PromptCallResponse": {
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start time",
            "description": "When the logged event started."
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End time",
            "description": "When the logged event ended."
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            },
            "type": "array",
            "title": "Messages",
            "description": "The messages passed to the to provider chat endpoint."
          },
          "tool_choice": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["none"]
              },
              {
                "type": "string",
                "enum": ["auto"]
              },
              {
                "type": "string",
                "enum": ["required"]
              },
              {
                "$ref": "#/components/schemas/ToolChoice"
              }
            ],
            "title": "Tool choice",
            "description": "Controls how the model uses tools. The following options are supported: \n- `'none'` means the model will not call any tool and instead generates a message; this is the default when no tools are provided as part of the Prompt. \n- `'auto'` means the model can decide to call one or more of the provided tools; this is the default when tools are provided as part of the Prompt. \n- `'required'` means the model can decide to call one or more of the provided tools. \n- `{'type': 'function', 'function': {name': <TOOL_NAME>}}` forces the model to use the named function."
          },
          "prompt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PromptResponse"
              }
            ],
            "title": "Prompt",
            "description": "Prompt used to generate the Log."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "source_datapoint_id": {
            "type": "string",
            "title": "Source Datapoint ID",
            "description": "Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair."
          },
          "trace_parent_id": {
            "type": "string",
            "title": "Trace Parent ID",
            "description": "The ID of the parent Log to nest this Log under in a Trace."
          },
          "batch_id": {
            "type": "string",
            "title": "Batch ID",
            "description": "Unique identifier for the Batch to add this Batch to. Batches are used to group Logs together for Evaluations. A Batch will be created if one with the given ID does not exist."
          },
          "user": {
            "type": "string",
            "title": "End-user identifier",
            "description": "End-user ID related to the Log."
          },
          "environment": {
            "type": "string",
            "title": "Environment name",
            "description": "The name of the Environment the Log is associated to."
          },
          "save": {
            "type": "boolean",
            "title": "Save",
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "default": true
          },
          "id": {
            "type": "string",
            "title": "Log ID",
            "description": "ID of the log."
          },
          "trace_id": {
            "type": "string",
            "title": "Trace ID",
            "description": "ID of the Trace containing the Prompt Call Log."
          },
          "logs": {
            "items": {
              "$ref": "#/components/schemas/PromptCallLogResponse"
            },
            "type": "array",
            "title": "Logs",
            "description": "The logs generated by the Prompt call."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["prompt", "id", "logs"],
        "title": "PromptCallResponse",
        "description": "Response model for a Prompt call with potentially multiple log samples."
      },
      "PromptCallStreamResponse": {
        "properties": {
          "output": {
            "type": "string",
            "title": "Model output",
            "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created at",
            "description": "User defined timestamp for when the log was created. "
          },
          "error": {
            "type": "string",
            "title": "Error",
            "description": "Error message if the log is an error."
          },
          "provider_latency": {
            "type": "number",
            "title": "Log latency",
            "description": "Duration of the logged event in seconds."
          },
          "stdout": {
            "type": "string",
            "title": "Standard Output",
            "description": "Captured log and debug statements."
          },
          "output_message": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatMessage"
              }
            ],
            "title": "Output message",
            "description": "The message returned by the provider."
          },
          "prompt_tokens": {
            "type": "integer",
            "title": "Prompt tokens",
            "description": "Number of tokens in the prompt used to generate the output."
          },
          "output_tokens": {
            "type": "integer",
            "title": "Output tokens",
            "description": "Number of tokens in the output generated by the model."
          },
          "prompt_cost": {
            "type": "number",
            "title": "Prompt cost",
            "description": "Cost in dollars associated to the tokens in the prompt."
          },
          "output_cost": {
            "type": "number",
            "title": "Output tokens",
            "description": "Cost in dollars associated to the tokens in the output."
          },
          "finish_reason": {
            "type": "string",
            "title": "Finish reason",
            "description": "Reason the generation finished."
          },
          "index": {
            "type": "integer",
            "title": "Index",
            "description": "The index of the sample in the batch."
          },
          "id": {
            "type": "string",
            "title": "Log ID",
            "description": "ID of the log."
          },
          "prompt_id": {
            "type": "string",
            "title": "Prompt ID",
            "description": "ID of the Prompt the log belongs to."
          },
          "version_id": {
            "type": "string",
            "title": "Prompt Version ID",
            "description": "ID of the specific version of the Prompt."
          }
        },
        "type": "object",
        "required": ["index", "id", "prompt_id", "version_id"],
        "title": "PromptCallStreamResponse",
        "description": "Response model for calling Prompt in streaming mode."
      },
      "PromptKernelRequest": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model instance used",
            "description": "The model instance used, e.g. `gpt-4`. See [supported models](https://humanloop.com/docs/supported-models)"
          },
          "endpoint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelEndpoints"
              }
            ],
            "title": "Provider endpoint",
            "description": "The provider model endpoint used.",
            "default": "chat"
          },
          "template": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/ChatMessage"
                },
                "type": "array"
              }
            ],
            "title": "Template",
            "description": "For chat endpoint, provide a Chat template. For completion endpoint, provide a Prompt template. Input variables within the template should be specified with double curly bracket syntax: {{INPUT_NAME}}."
          },
          "provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelProviders"
              }
            ],
            "title": "Model provider",
            "description": "The company providing the underlying model service.",
            "default": "openai"
          },
          "max_tokens": {
            "type": "integer",
            "title": "Maximum tokens",
            "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt",
            "default": -1
          },
          "temperature": {
            "type": "number",
            "title": "Sampling temperature",
            "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
            "default": 1
          },
          "top_p": {
            "type": "number",
            "title": "Top p probability mass",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
            "default": 1
          },
          "stop": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Stop sequence(s)",
            "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence."
          },
          "presence_penalty": {
            "type": "number",
            "title": "Presence penalty",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
            "default": 0
          },
          "frequency_penalty": {
            "type": "number",
            "title": "Frequency penalty",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
            "default": 0
          },
          "other": {
            "type": "object",
            "title": "Other provider parameters",
            "description": "Other parameter values to be passed to the provider call.",
            "default": {}
          },
          "seed": {
            "type": "integer",
            "title": "Seed",
            "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed."
          },
          "response_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseFormat"
              }
            ],
            "title": "Response format",
            "description": "The format of the response. Only `{\"type\": \"json_object\"}` is currently supported for chat."
          },
          "tools": {
            "items": {
              "$ref": "#/components/schemas/ToolFunction"
            },
            "type": "array",
            "title": "Tools",
            "description": "The tool specification that the model can choose to call if Tool calling is supported."
          },
          "linked_tools": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Linked tools",
            "description": "The IDs of the Tools in your organization that the model can choose to call if Tool calling is supported. The default deployed version of that tool is called."
          },
          "attributes": {
            "type": "object",
            "title": "Attributes",
            "description": "Additional fields to describe the Prompt. Helpful to separate Prompt versions from each other with details on how they were created or used."
          }
        },
        "type": "object",
        "required": ["model"],
        "title": "PromptKernelRequest"
      },
      "PromptLogRequest": {
        "properties": {
          "evaluation_id": {
            "type": "string",
            "title": "Evaluation ID",
            "description": "Unique identifier for the Evaluation Report to associate the Log to."
          },
          "path": {
            "type": "string",
            "title": "Prompt path",
            "description": "Path of the Prompt, including the name. This locates the Prompt in the Humanloop filesystem and is used as as a unique identifier. Example: `folder/name` or just `name`."
          },
          "id": {
            "type": "string",
            "title": "Prompt ID",
            "description": "ID for an existing Prompt."
          },
          "output_message": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatMessage"
              }
            ],
            "title": "Output message",
            "description": "The message returned by the provider."
          },
          "prompt_tokens": {
            "type": "integer",
            "title": "Prompt tokens",
            "description": "Number of tokens in the prompt used to generate the output."
          },
          "output_tokens": {
            "type": "integer",
            "title": "Output tokens",
            "description": "Number of tokens in the output generated by the model."
          },
          "prompt_cost": {
            "type": "number",
            "title": "Prompt cost",
            "description": "Cost in dollars associated to the tokens in the prompt."
          },
          "output_cost": {
            "type": "number",
            "title": "Output tokens",
            "description": "Cost in dollars associated to the tokens in the output."
          },
          "finish_reason": {
            "type": "string",
            "title": "Finish reason",
            "description": "Reason the generation finished."
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            },
            "type": "array",
            "title": "Messages",
            "description": "The messages passed to the to provider chat endpoint."
          },
          "tool_choice": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["none"]
              },
              {
                "type": "string",
                "enum": ["auto"]
              },
              {
                "type": "string",
                "enum": ["required"]
              },
              {
                "$ref": "#/components/schemas/ToolChoice"
              }
            ],
            "title": "Tool choice",
            "description": "Controls how the model uses tools. The following options are supported: \n- `'none'` means the model will not call any tool and instead generates a message; this is the default when no tools are provided as part of the Prompt. \n- `'auto'` means the model can decide to call one or more of the provided tools; this is the default when tools are provided as part of the Prompt. \n- `'required'` means the model can decide to call one or more of the provided tools. \n- `{'type': 'function', 'function': {name': <TOOL_NAME>}}` forces the model to use the named function."
          },
          "prompt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PromptKernelRequest"
              }
            ],
            "title": "Prompt",
            "description": "Details of your Prompt. A new Prompt version will be created if the provided details are new."
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start time",
            "description": "When the logged event started."
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End time",
            "description": "When the logged event ended."
          },
          "output": {
            "type": "string",
            "title": "Model output",
            "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created at",
            "description": "User defined timestamp for when the log was created. "
          },
          "error": {
            "type": "string",
            "title": "Error",
            "description": "Error message if the log is an error."
          },
          "provider_latency": {
            "type": "number",
            "title": "Log latency",
            "description": "Duration of the logged event in seconds."
          },
          "stdout": {
            "type": "string",
            "title": "Standard Output",
            "description": "Captured log and debug statements."
          },
          "provider_request": {
            "type": "object",
            "title": "Provider request",
            "description": "Raw request sent to provider."
          },
          "provider_response": {
            "type": "object",
            "title": "Provider response",
            "description": "Raw response received the provider."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "source_datapoint_id": {
            "type": "string",
            "title": "Source Datapoint ID",
            "description": "Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair."
          },
          "trace_parent_id": {
            "type": "string",
            "title": "Trace Parent ID",
            "description": "The ID of the parent Log to nest this Log under in a Trace."
          },
          "batch_id": {
            "type": "string",
            "title": "Batch ID",
            "description": "Unique identifier for the Batch to add this Batch to. Batches are used to group Logs together for Evaluations. A Batch will be created if one with the given ID does not exist."
          },
          "user": {
            "type": "string",
            "title": "End-user identifier",
            "description": "End-user ID related to the Log."
          },
          "environment": {
            "type": "string",
            "title": "Environment name",
            "description": "The name of the Environment the Log is associated to."
          },
          "save": {
            "type": "boolean",
            "title": "Save",
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "default": true
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "PromptLogRequest",
        "description": "Request for creating a Prompt log."
      },
      "PromptLogResponse": {
        "properties": {
          "output_message": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatMessage"
              }
            ],
            "title": "Output message",
            "description": "The message returned by the provider."
          },
          "prompt_tokens": {
            "type": "integer",
            "title": "Prompt tokens",
            "description": "Number of tokens in the prompt used to generate the output."
          },
          "output_tokens": {
            "type": "integer",
            "title": "Output tokens",
            "description": "Number of tokens in the output generated by the model."
          },
          "prompt_cost": {
            "type": "number",
            "title": "Prompt cost",
            "description": "Cost in dollars associated to the tokens in the prompt."
          },
          "output_cost": {
            "type": "number",
            "title": "Output tokens",
            "description": "Cost in dollars associated to the tokens in the output."
          },
          "finish_reason": {
            "type": "string",
            "title": "Finish reason",
            "description": "Reason the generation finished."
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            },
            "type": "array",
            "title": "Messages",
            "description": "The messages passed to the to provider chat endpoint."
          },
          "tool_choice": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["none"]
              },
              {
                "type": "string",
                "enum": ["auto"]
              },
              {
                "type": "string",
                "enum": ["required"]
              },
              {
                "$ref": "#/components/schemas/ToolChoice"
              }
            ],
            "title": "Tool choice",
            "description": "Controls how the model uses tools. The following options are supported: \n- `'none'` means the model will not call any tool and instead generates a message; this is the default when no tools are provided as part of the Prompt. \n- `'auto'` means the model can decide to call one or more of the provided tools; this is the default when tools are provided as part of the Prompt. \n- `'required'` means the model can decide to call one or more of the provided tools. \n- `{'type': 'function', 'function': {name': <TOOL_NAME>}}` forces the model to use the named function."
          },
          "prompt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PromptResponse"
              }
            ],
            "title": "Prompt",
            "description": "Prompt used to generate the Log."
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start time",
            "description": "When the logged event started."
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End time",
            "description": "When the logged event ended."
          },
          "output": {
            "type": "string",
            "title": "Model output",
            "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created at",
            "description": "User defined timestamp for when the log was created. "
          },
          "error": {
            "type": "string",
            "title": "Error",
            "description": "Error message if the log is an error."
          },
          "provider_latency": {
            "type": "number",
            "title": "Log latency",
            "description": "Duration of the logged event in seconds."
          },
          "stdout": {
            "type": "string",
            "title": "Standard Output",
            "description": "Captured log and debug statements."
          },
          "provider_request": {
            "type": "object",
            "title": "Provider request",
            "description": "Raw request sent to provider."
          },
          "provider_response": {
            "type": "object",
            "title": "Provider response",
            "description": "Raw response received the provider."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "source_datapoint_id": {
            "type": "string",
            "title": "Source Datapoint ID",
            "description": "Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair."
          },
          "trace_parent_id": {
            "type": "string",
            "title": "Trace Parent ID",
            "description": "The ID of the parent Log to nest this Log under in a Trace."
          },
          "batches": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Batch IDs",
            "description": "Array of Batch IDs that this Log is part of. Batches are used to group Logs together for offline Evaluations"
          },
          "user": {
            "type": "string",
            "title": "End-user identifier",
            "description": "End-user ID related to the Log."
          },
          "environment": {
            "type": "string",
            "title": "Environment name",
            "description": "The name of the Environment the Log is associated to."
          },
          "save": {
            "type": "boolean",
            "title": "Save",
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "default": true
          },
          "id": {
            "type": "string",
            "title": "Log ID",
            "description": "Unique identifier for the Log."
          },
          "evaluator_logs": {
            "items": {
              "$ref": "#/components/schemas/EvaluatorLogResponse"
            },
            "type": "array",
            "title": "Evaluator Logs",
            "description": "List of Evaluator Logs associated with the Log. These contain Evaluator judgments on the Log."
          },
          "trace_flow_id": {
            "type": "string",
            "title": "Trace Flow ID",
            "description": "Identifier for the Flow that the Trace belongs to."
          },
          "trace_id": {
            "type": "string",
            "title": "Trace ID",
            "description": "Identifier for the Trace that the Log belongs to."
          },
          "trace_children": {
            "items": {
              "$ref": "#/components/schemas/LogResponse"
            },
            "type": "array",
            "title": "Trace children",
            "description": "Logs nested under this Log in the Trace.",
            "default": []
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["prompt", "id", "evaluator_logs"],
        "title": "PromptLogResponse",
        "description": "General request for creating a Log"
      },
      "PromptLogUpdateRequest": {
        "properties": {
          "output_message": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatMessage"
              }
            ],
            "title": "Output message",
            "description": "The message returned by the provider."
          },
          "prompt_tokens": {
            "type": "integer",
            "title": "Prompt tokens",
            "description": "Number of tokens in the prompt used to generate the output."
          },
          "output_tokens": {
            "type": "integer",
            "title": "Output tokens",
            "description": "Number of tokens in the output generated by the model."
          },
          "prompt_cost": {
            "type": "number",
            "title": "Prompt cost",
            "description": "Cost in dollars associated to the tokens in the prompt."
          },
          "output_cost": {
            "type": "number",
            "title": "Output tokens",
            "description": "Cost in dollars associated to the tokens in the output."
          },
          "finish_reason": {
            "type": "string",
            "title": "Finish reason",
            "description": "Reason the generation finished."
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            },
            "type": "array",
            "title": "Messages",
            "description": "The messages passed to the to provider chat endpoint."
          },
          "tool_choice": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["none"]
              },
              {
                "type": "string",
                "enum": ["auto"]
              },
              {
                "type": "string",
                "enum": ["required"]
              },
              {
                "$ref": "#/components/schemas/ToolChoice"
              }
            ],
            "title": "Tool choice",
            "description": "Controls how the model uses tools. The following options are supported: \n- `'none'` means the model will not call any tool and instead generates a message; this is the default when no tools are provided as part of the Prompt. \n- `'auto'` means the model can decide to call one or more of the provided tools; this is the default when tools are provided as part of the Prompt. \n- `'required'` means the model can decide to call one or more of the provided tools. \n- `{'type': 'function', 'function': {name': <TOOL_NAME>}}` forces the model to use the named function."
          },
          "output": {
            "type": "string",
            "title": "Model output",
            "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created at",
            "description": "User defined timestamp for when the log was created. "
          },
          "error": {
            "type": "string",
            "title": "Error",
            "description": "Error message if the log is an error."
          },
          "provider_latency": {
            "type": "number",
            "title": "Log latency",
            "description": "Duration of the logged event in seconds."
          },
          "stdout": {
            "type": "string",
            "title": "Standard Output",
            "description": "Captured log and debug statements."
          },
          "provider_request": {
            "type": "object",
            "title": "Provider request",
            "description": "Raw request sent to provider."
          },
          "provider_response": {
            "type": "object",
            "title": "Provider response",
            "description": "Raw response received the provider."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start time",
            "description": "When the logged event started."
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End time",
            "description": "When the logged event ended."
          }
        },
        "type": "object",
        "title": "PromptLogUpdateRequest",
        "description": "Request for updating a Prompt log."
      },
      "PromptRequest": {
        "properties": {
          "path": {
            "type": "string",
            "title": "Prompt path",
            "description": "Path of the Prompt, including the name. This locates the Prompt in the Humanloop filesystem and is used as as a unique identifier. Example: `folder/name` or just `name`."
          },
          "id": {
            "type": "string",
            "title": "Prompt ID",
            "description": "ID for an existing Prompt."
          },
          "model": {
            "type": "string",
            "title": "Model instance used",
            "description": "The model instance used, e.g. `gpt-4`. See [supported models](https://humanloop.com/docs/supported-models)"
          },
          "endpoint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelEndpoints"
              }
            ],
            "title": "Provider endpoint",
            "description": "The provider model endpoint used.",
            "default": "chat"
          },
          "template": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/ChatMessage"
                },
                "type": "array"
              }
            ],
            "title": "Template",
            "description": "For chat endpoint, provide a Chat template. For completion endpoint, provide a Prompt template. Input variables within the template should be specified with double curly bracket syntax: {{INPUT_NAME}}."
          },
          "provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelProviders"
              }
            ],
            "title": "Model provider",
            "description": "The company providing the underlying model service.",
            "default": "openai"
          },
          "max_tokens": {
            "type": "integer",
            "title": "Maximum tokens",
            "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt",
            "default": -1
          },
          "temperature": {
            "type": "number",
            "title": "Sampling temperature",
            "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
            "default": 1
          },
          "top_p": {
            "type": "number",
            "title": "Top p probability mass",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
            "default": 1
          },
          "stop": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Stop sequence(s)",
            "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence."
          },
          "presence_penalty": {
            "type": "number",
            "title": "Presence penalty",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
            "default": 0
          },
          "frequency_penalty": {
            "type": "number",
            "title": "Frequency penalty",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
            "default": 0
          },
          "other": {
            "type": "object",
            "title": "Other provider parameters",
            "description": "Other parameter values to be passed to the provider call.",
            "default": {}
          },
          "seed": {
            "type": "integer",
            "title": "Seed",
            "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed."
          },
          "response_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseFormat"
              }
            ],
            "title": "Response format",
            "description": "The format of the response. Only `{\"type\": \"json_object\"}` is currently supported for chat."
          },
          "tools": {
            "items": {
              "$ref": "#/components/schemas/ToolFunction"
            },
            "type": "array",
            "title": "Tools",
            "description": "The tool specification that the model can choose to call if Tool calling is supported."
          },
          "linked_tools": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Linked tools",
            "description": "The IDs of the Tools in your organization that the model can choose to call if Tool calling is supported. The default deployed version of that tool is called."
          },
          "attributes": {
            "type": "object",
            "title": "Attributes",
            "description": "Additional fields to describe the Prompt. Helpful to separate Prompt versions from each other with details on how they were created or used."
          },
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made."
          }
        },
        "type": "object",
        "required": ["model"],
        "title": "PromptRequest",
        "description": "Request model for creating a new Prompt"
      },
      "PromptResponse": {
        "properties": {
          "path": {
            "type": "string",
            "title": "Prompt path",
            "description": "Path of the Prompt, including the name, which is used as a unique identifier."
          },
          "id": {
            "type": "string",
            "title": "Prompt ID",
            "description": "Unique identifier for the Prompt."
          },
          "directory_id": {
            "type": "string",
            "title": "Directory ID",
            "description": "ID of the directory that the file is in on Humanloop."
          },
          "model": {
            "type": "string",
            "title": "Model instance used",
            "description": "The model instance used, e.g. `gpt-4`. See [supported models](https://humanloop.com/docs/supported-models)"
          },
          "endpoint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelEndpoints"
              }
            ],
            "title": "Provider endpoint",
            "description": "The provider model endpoint used.",
            "default": "chat"
          },
          "template": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/ChatMessage"
                },
                "type": "array"
              }
            ],
            "title": "Template",
            "description": "For chat endpoint, provide a Chat template. For completion endpoint, provide a Prompt template. Input variables within the template should be specified with double curly bracket syntax: {{INPUT_NAME}}."
          },
          "provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelProviders"
              }
            ],
            "title": "Model provider",
            "description": "The company providing the underlying model service.",
            "default": "openai"
          },
          "max_tokens": {
            "type": "integer",
            "title": "Maximum tokens",
            "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt",
            "default": -1
          },
          "temperature": {
            "type": "number",
            "title": "Sampling temperature",
            "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
            "default": 1
          },
          "top_p": {
            "type": "number",
            "title": "Top p probability mass",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
            "default": 1
          },
          "stop": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Stop sequence(s)",
            "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence."
          },
          "presence_penalty": {
            "type": "number",
            "title": "Presence penalty",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
            "default": 0
          },
          "frequency_penalty": {
            "type": "number",
            "title": "Frequency penalty",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
            "default": 0
          },
          "other": {
            "type": "object",
            "title": "Other provider parameters",
            "description": "Other parameter values to be passed to the provider call.",
            "default": {}
          },
          "seed": {
            "type": "integer",
            "title": "Seed",
            "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed."
          },
          "response_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseFormat"
              }
            ],
            "title": "Response format",
            "description": "The format of the response. Only `{\"type\": \"json_object\"}` is currently supported for chat."
          },
          "tools": {
            "items": {
              "$ref": "#/components/schemas/ToolFunction"
            },
            "type": "array",
            "title": "Tools",
            "description": "The tool specification that the model can choose to call if Tool calling is supported."
          },
          "linked_tools": {
            "items": {
              "$ref": "#/components/schemas/LinkedToolResponse"
            },
            "type": "array",
            "title": "Linked Tools",
            "description": "The tools linked to your prompt that the model can call."
          },
          "attributes": {
            "type": "object",
            "title": "Attributes",
            "description": "Additional fields to describe the Prompt. Helpful to separate Prompt versions from each other with details on how they were created or used."
          },
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made."
          },
          "name": {
            "type": "string",
            "title": "Prompt name",
            "description": "Name of the Prompt."
          },
          "version_id": {
            "type": "string",
            "title": "Version ID",
            "description": "Unique identifier for the specific Prompt Version. If no query params provided, the default deployed Prompt Version is returned."
          },
          "type": {
            "type": "string",
            "enum": ["prompt"],
            "title": "Type",
            "default": "prompt"
          },
          "environments": {
            "items": {
              "$ref": "#/components/schemas/EnvironmentResponse"
            },
            "type": "array",
            "title": "Environments",
            "description": "The list of environments the Prompt Version is deployed to."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              }
            ],
            "title": "Created by",
            "description": "The user who created the Prompt."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VersionStatus"
              }
            ],
            "title": "Status",
            "description": "The status of the Prompt Version."
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Used At"
          },
          "version_logs_count": {
            "type": "integer",
            "title": "Number of logs for this version",
            "description": "The number of logs that have been generated for this Prompt Version"
          },
          "total_logs_count": {
            "type": "integer",
            "title": "Total number of logs across all versions",
            "description": "The number of logs that have been generated across all Prompt Versions"
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/InputResponse"
            },
            "type": "array",
            "title": "Prompt inputs",
            "description": "Inputs associated to the Prompt. Inputs correspond to any of the variables used within the Prompt template."
          },
          "evaluators": {
            "items": {
              "$ref": "#/components/schemas/MonitoringEvaluatorResponse"
            },
            "type": "array",
            "title": "Monitoring Evaluators",
            "description": "Evaluators that have been attached to this Prompt that are used for monitoring logs."
          },
          "evaluator_aggregates": {
            "items": {
              "$ref": "#/components/schemas/EvaluatorAggregate"
            },
            "type": "array",
            "title": "Evaluator aggregates",
            "description": "Aggregation of Evaluator results for the Prompt Version."
          }
        },
        "type": "object",
        "required": [
          "path",
          "id",
          "model",
          "name",
          "version_id",
          "created_at",
          "updated_at",
          "status",
          "last_used_at",
          "version_logs_count",
          "total_logs_count",
          "inputs"
        ],
        "title": "PromptResponse",
        "description": "Base type that all File Responses should inherit from.\n\nAttributes defined here are common to all File Responses and should be overridden\nin the inheriting classes with documentation and appropriate Field definitions."
      },
      "ProviderApiKeys": {
        "properties": {
          "openai": {
            "type": "string",
            "title": "Openai"
          },
          "ai21": {
            "type": "string",
            "title": "Ai21"
          },
          "mock": {
            "type": "string",
            "title": "Mock"
          },
          "anthropic": {
            "type": "string",
            "title": "Anthropic"
          },
          "bedrock": {
            "type": "string",
            "title": "Bedrock"
          },
          "cohere": {
            "type": "string",
            "title": "Cohere"
          },
          "openai_azure": {
            "type": "string",
            "title": "Openai Azure"
          },
          "openai_azure_endpoint": {
            "type": "string",
            "title": "Openai Azure Endpoint"
          }
        },
        "type": "object",
        "title": "ProviderApiKeys"
      },
      "ResponseFormat": {
        "properties": {
          "type": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["json_object"]
              },
              {
                "type": "string",
                "enum": ["json_schema"]
              }
            ],
            "title": "Type"
          },
          "json_schema": {
            "type": "object",
            "title": "JSON Schema",
            "description": "The JSON schema of the response format if type is json_schema."
          }
        },
        "type": "object",
        "required": ["type"],
        "title": "ResponseFormat",
        "description": "Response format of the model."
      },
      "SelectEvaluatorStatsResponse": {
        "properties": {
          "evaluator_version_id": {
            "type": "string",
            "title": "Evaluator Version ID",
            "description": "Unique identifier for the Evaluator Version."
          },
          "total_logs": {
            "type": "integer",
            "title": "Total Evaluator Logs",
            "description": "The total number of Logs generated by this Evaluator Version on the Evaluated Version's Logs. This includes Nulls and Errors."
          },
          "num_judgments": {
            "type": "integer",
            "title": "Number of Judgments",
            "description": "The total number of Evaluator judgments for this Evaluator Version. This excludes Nulls and Errors."
          },
          "num_nulls": {
            "type": "integer",
            "title": "Number of Nulls",
            "description": "The total number of null judgments (i.e. abstentions) for this Evaluator Version."
          },
          "num_errors": {
            "type": "integer",
            "title": "Number of Errors",
            "description": "The total number of errored Evaluators for this Evaluator Version."
          },
          "num_judgments_per_option": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Number of Judgments",
            "description": "The total number of Evaluator judgments for this Evaluator Version. This is a mapping of the option name to the number of judgments for that option."
          }
        },
        "type": "object",
        "required": [
          "evaluator_version_id",
          "total_logs",
          "num_judgments",
          "num_nulls",
          "num_errors",
          "num_judgments_per_option"
        ],
        "title": "SelectEvaluatorStatsResponse",
        "description": "Also used for 'multi_select' Evaluator versions"
      },
      "SortOrder": {
        "type": "string",
        "enum": ["asc", "desc"],
        "title": "SortOrder",
        "description": "An enumeration."
      },
      "TextChatContent": {
        "properties": {
          "type": {
            "type": "string",
            "enum": ["text"],
            "title": "Type"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "The message's text content."
          }
        },
        "type": "object",
        "required": ["type", "text"],
        "title": "TextChatContent"
      },
      "TextEvaluatorStatsResponse": {
        "properties": {
          "evaluator_version_id": {
            "type": "string",
            "title": "Evaluator Version ID",
            "description": "Unique identifier for the Evaluator Version."
          },
          "total_logs": {
            "type": "integer",
            "title": "Total Evaluator Logs",
            "description": "The total number of Logs generated by this Evaluator Version on the Evaluated Version's Logs. This includes Nulls and Errors."
          },
          "num_judgments": {
            "type": "integer",
            "title": "Number of Judgments",
            "description": "The total number of Evaluator judgments for this Evaluator Version. This excludes Nulls and Errors."
          },
          "num_nulls": {
            "type": "integer",
            "title": "Number of Nulls",
            "description": "The total number of null judgments (i.e. abstentions) for this Evaluator Version."
          },
          "num_errors": {
            "type": "integer",
            "title": "Number of Errors",
            "description": "The total number of errored Evaluators for this Evaluator Version."
          }
        },
        "type": "object",
        "required": [
          "evaluator_version_id",
          "total_logs",
          "num_judgments",
          "num_nulls",
          "num_errors"
        ],
        "title": "TextEvaluatorStatsResponse",
        "description": "Base attributes for stats for an Evaluator Version-Evaluated Version pair\nin the Evaluation Report."
      },
      "TimeUnit": {
        "type": "string",
        "enum": ["day", "week", "month"],
        "title": "TimeUnit",
        "description": "An enumeration."
      },
      "ToolCall": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "type": {
            "$ref": "#/components/schemas/src__domain__chat_types__enums__ToolType"
          },
          "function": {
            "$ref": "#/components/schemas/FunctionTool"
          }
        },
        "type": "object",
        "required": ["id", "type", "function"],
        "title": "ToolCall",
        "description": "A tool call to be made."
      },
      "ToolChoice": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/src__domain__chat_types__enums__ToolType"
          },
          "function": {
            "$ref": "#/components/schemas/FunctionToolChoice"
          }
        },
        "type": "object",
        "required": ["type", "function"],
        "title": "ToolChoice",
        "description": "Tool choice to force the model to use a tool."
      },
      "ToolFunction": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name for the tool referenced by the model."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the tool referenced by the model"
          },
          "strict": {
            "type": "boolean",
            "title": "Strict",
            "description": "If true, forces the model to output json data in the structure of the parameters schema.",
            "default": false
          },
          "parameters": {
            "type": "object",
            "title": "Tool parameters",
            "description": "Parameters needed to run the Tool, defined in JSON Schema format: https://json-schema.org/"
          }
        },
        "type": "object",
        "required": ["name", "description"],
        "title": "ToolFunction"
      },
      "ToolKernelRequest": {
        "properties": {
          "function": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ToolFunction"
              }
            ],
            "title": "Function",
            "description": "Callable function specification of the Tool shown to the model for tool calling."
          },
          "source_code": {
            "type": "string",
            "title": "Source Code",
            "description": "Code source of the Tool."
          },
          "setup_values": {
            "type": "object",
            "title": "Setup values",
            "description": "Values needed to setup the Tool, defined in JSON Schema format: https://json-schema.org/"
          },
          "attributes": {
            "type": "object",
            "title": "Attributes",
            "description": "Additional fields to describe the Tool. Helpful to separate Tool versions from each other with details on how they were created or used."
          }
        },
        "type": "object",
        "title": "ToolKernelRequest"
      },
      "ToolLogRequest": {
        "properties": {
          "path": {
            "type": "string",
            "title": "Tool path",
            "description": "Path of the Tool, including the name. This locates the Tool in the Humanloop filesystem and is used as as a unique identifier. Example: `folder/name` or just `name`."
          },
          "id": {
            "type": "string",
            "title": "Tool ID",
            "description": "ID for an existing Tool."
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start time",
            "description": "When the logged event started."
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End time",
            "description": "When the logged event ended."
          },
          "output": {
            "type": "string",
            "title": "Model output",
            "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created at",
            "description": "User defined timestamp for when the log was created. "
          },
          "error": {
            "type": "string",
            "title": "Error",
            "description": "Error message if the log is an error."
          },
          "provider_latency": {
            "type": "number",
            "title": "Log latency",
            "description": "Duration of the logged event in seconds."
          },
          "stdout": {
            "type": "string",
            "title": "Standard Output",
            "description": "Captured log and debug statements."
          },
          "provider_request": {
            "type": "object",
            "title": "Provider request",
            "description": "Raw request sent to provider."
          },
          "provider_response": {
            "type": "object",
            "title": "Provider response",
            "description": "Raw response received the provider."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "source_datapoint_id": {
            "type": "string",
            "title": "Source Datapoint ID",
            "description": "Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair."
          },
          "trace_parent_id": {
            "type": "string",
            "title": "Trace Parent ID",
            "description": "The ID of the parent Log to nest this Log under in a Trace."
          },
          "batch_id": {
            "type": "string",
            "title": "Batch ID",
            "description": "Unique identifier for the Batch to add this Batch to. Batches are used to group Logs together for Evaluations. A Batch will be created if one with the given ID does not exist."
          },
          "user": {
            "type": "string",
            "title": "End-user identifier",
            "description": "End-user ID related to the Log."
          },
          "environment": {
            "type": "string",
            "title": "Environment name",
            "description": "The name of the Environment the Log is associated to."
          },
          "save": {
            "type": "boolean",
            "title": "Save",
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "default": true
          },
          "tool": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ToolKernelRequest"
              }
            ],
            "title": "Tool",
            "description": "Details of your Tool. A new Tool version will be created if the provided details are new."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "ToolLogRequest",
        "description": "Request for creating a Tool log."
      },
      "ToolLogResponse": {
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start time",
            "description": "When the logged event started."
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End time",
            "description": "When the logged event ended."
          },
          "output": {
            "type": "string",
            "title": "Model output",
            "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created at",
            "description": "User defined timestamp for when the log was created. "
          },
          "error": {
            "type": "string",
            "title": "Error",
            "description": "Error message if the log is an error."
          },
          "provider_latency": {
            "type": "number",
            "title": "Log latency",
            "description": "Duration of the logged event in seconds."
          },
          "stdout": {
            "type": "string",
            "title": "Standard Output",
            "description": "Captured log and debug statements."
          },
          "provider_request": {
            "type": "object",
            "title": "Provider request",
            "description": "Raw request sent to provider."
          },
          "provider_response": {
            "type": "object",
            "title": "Provider response",
            "description": "Raw response received the provider."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "source_datapoint_id": {
            "type": "string",
            "title": "Source Datapoint ID",
            "description": "Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair."
          },
          "trace_parent_id": {
            "type": "string",
            "title": "Trace Parent ID",
            "description": "The ID of the parent Log to nest this Log under in a Trace."
          },
          "batches": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Batch IDs",
            "description": "Array of Batch IDs that this Log is part of. Batches are used to group Logs together for offline Evaluations"
          },
          "user": {
            "type": "string",
            "title": "End-user identifier",
            "description": "End-user ID related to the Log."
          },
          "environment": {
            "type": "string",
            "title": "Environment name",
            "description": "The name of the Environment the Log is associated to."
          },
          "save": {
            "type": "boolean",
            "title": "Save",
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "default": true
          },
          "id": {
            "type": "string",
            "title": "Log ID",
            "description": "Unique identifier for the Log."
          },
          "evaluator_logs": {
            "items": {
              "$ref": "#/components/schemas/EvaluatorLogResponse"
            },
            "type": "array",
            "title": "Evaluator Logs",
            "description": "List of Evaluator Logs associated with the Log. These contain Evaluator judgments on the Log."
          },
          "trace_flow_id": {
            "type": "string",
            "title": "Trace Flow ID",
            "description": "Identifier for the Flow that the Trace belongs to."
          },
          "trace_id": {
            "type": "string",
            "title": "Trace ID",
            "description": "Identifier for the Trace that the Log belongs to."
          },
          "trace_children": {
            "items": {
              "$ref": "#/components/schemas/LogResponse"
            },
            "type": "array",
            "title": "Trace children",
            "description": "Logs nested under this Log in the Trace.",
            "default": []
          },
          "tool": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ToolResponse"
              }
            ],
            "title": "Tool",
            "description": "Tool used to generate the Log."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "evaluator_logs", "tool"],
        "title": "ToolLogResponse",
        "description": "General request for creating a Log"
      },
      "ToolLogUpdateRequest": {
        "properties": {
          "output": {
            "type": "string",
            "title": "Model output",
            "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created at",
            "description": "User defined timestamp for when the log was created. "
          },
          "error": {
            "type": "string",
            "title": "Error",
            "description": "Error message if the log is an error."
          },
          "provider_latency": {
            "type": "number",
            "title": "Log latency",
            "description": "Duration of the logged event in seconds."
          },
          "stdout": {
            "type": "string",
            "title": "Standard Output",
            "description": "Captured log and debug statements."
          },
          "provider_request": {
            "type": "object",
            "title": "Provider request",
            "description": "Raw request sent to provider."
          },
          "provider_response": {
            "type": "object",
            "title": "Provider response",
            "description": "Raw response received the provider."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "title": "Start time",
            "description": "When the logged event started."
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "title": "End time",
            "description": "When the logged event ended."
          }
        },
        "type": "object",
        "title": "ToolLogUpdateRequest",
        "description": "Request to update a Tool log."
      },
      "ToolRequest": {
        "properties": {
          "path": {
            "type": "string",
            "title": "Tool path",
            "description": "Path of the Tool, including the name. This locates the Tool in the Humanloop filesystem and is used as as a unique identifier. Example: `folder/name` or just `name`."
          },
          "id": {
            "type": "string",
            "title": "Tool ID",
            "description": "ID for an existing Tool."
          },
          "function": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ToolFunction"
              }
            ],
            "title": "Function",
            "description": "Callable function specification of the Tool shown to the model for tool calling."
          },
          "source_code": {
            "type": "string",
            "title": "Source Code",
            "description": "Code source of the Tool."
          },
          "setup_values": {
            "type": "object",
            "title": "Setup values",
            "description": "Values needed to setup the Tool, defined in JSON Schema format: https://json-schema.org/"
          },
          "attributes": {
            "type": "object",
            "title": "Attributes",
            "description": "Additional fields to describe the Tool. Helpful to separate Tool versions from each other with details on how they were created or used."
          },
          "tool_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__domain__files__tool__ToolType"
              }
            ],
            "title": "Tool Type",
            "description": "Type of Tool.",
            "default": "json_schema"
          },
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made."
          }
        },
        "type": "object",
        "title": "ToolRequest",
        "description": "Request to create a new Tool."
      },
      "ToolResponse": {
        "properties": {
          "path": {
            "type": "string",
            "title": "Tool path",
            "description": "Path of the Tool, including the name, which is used as a unique identifier."
          },
          "id": {
            "type": "string",
            "title": "Tool ID",
            "description": "Unique identifier for the Tool."
          },
          "directory_id": {
            "type": "string",
            "title": "Directory ID",
            "description": "ID of the directory that the file is in on Humanloop."
          },
          "function": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ToolFunction"
              }
            ],
            "title": "Function",
            "description": "Callable function specification of the Tool shown to the model for tool calling."
          },
          "source_code": {
            "type": "string",
            "title": "Source Code",
            "description": "Code source of the Tool."
          },
          "setup_values": {
            "type": "object",
            "title": "Setup values",
            "description": "Values needed to setup the Tool, defined in JSON Schema format: https://json-schema.org/"
          },
          "attributes": {
            "type": "object",
            "title": "Attributes",
            "description": "Additional fields to describe the Tool. Helpful to separate Tool versions from each other with details on how they were created or used."
          },
          "tool_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__domain__files__tool__ToolType"
              }
            ],
            "title": "Tool Type",
            "description": "Type of Tool.",
            "default": "json_schema"
          },
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made."
          },
          "name": {
            "type": "string",
            "title": "Tool name",
            "description": "Name of the Tool, which is used as a unique identifier."
          },
          "version_id": {
            "type": "string",
            "title": "Version ID",
            "description": "Unique identifier for the specific Tool Version. If no query params provided, the default deployed Tool Version is returned."
          },
          "type": {
            "type": "string",
            "enum": ["tool"],
            "title": "Type",
            "default": "tool"
          },
          "environments": {
            "items": {
              "$ref": "#/components/schemas/EnvironmentResponse"
            },
            "type": "array",
            "title": "Environments",
            "description": "The list of environments the Tool Version is deployed to."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              }
            ],
            "title": "Created by",
            "description": "The user who created the Tool."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VersionStatus"
              }
            ],
            "title": "Status",
            "description": "The status of the Tool Version."
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time",
            "title": "Last Used At"
          },
          "version_logs_count": {
            "type": "integer",
            "title": "Number of logs for this version",
            "description": "The number of logs that have been generated for this Tool Version"
          },
          "total_logs_count": {
            "type": "integer",
            "title": "Total number of logs across all versions",
            "description": "The number of logs that have been generated across all Tool Versions"
          },
          "inputs": {
            "items": {
              "$ref": "#/components/schemas/InputResponse"
            },
            "type": "array",
            "title": "Prompt inputs",
            "description": "Inputs associated to the Prompt. Inputs correspond to any of the variables used within the Tool template."
          },
          "evaluators": {
            "items": {
              "$ref": "#/components/schemas/MonitoringEvaluatorResponse"
            },
            "type": "array",
            "title": "Monitoring Evaluators",
            "description": "Evaluators that have been attached to this Tool that are used for monitoring logs."
          },
          "signature": {
            "type": "string",
            "title": "Signature",
            "description": "Signature of the Tool."
          },
          "evaluator_aggregates": {
            "items": {
              "$ref": "#/components/schemas/EvaluatorAggregate"
            },
            "type": "array",
            "title": "Evaluator aggregates",
            "description": "Aggregation of Evaluator results for the Tool Version."
          }
        },
        "type": "object",
        "required": [
          "path",
          "id",
          "name",
          "version_id",
          "created_at",
          "updated_at",
          "status",
          "last_used_at",
          "version_logs_count",
          "total_logs_count",
          "inputs"
        ],
        "title": "ToolResponse",
        "description": "Base type that all File Responses should inherit from.\n\nAttributes defined here are common to all File Responses and should be overridden\nin the inheriting classes with documentation and appropriate Field definitions."
      },
      "TraceStatus": {
        "type": "string",
        "enum": ["complete", "incomplete"],
        "title": "TraceStatus",
        "description": "An enumeration."
      },
      "UpdateDatasetRequest": {
        "properties": {
          "path": {
            "type": "string",
            "title": "Dataset path",
            "description": "Path of the Dataset including the Dataset name, which is used as a unique identifier."
          },
          "name": {
            "type": "string",
            "title": "Dataset name",
            "description": "Name of the Dataset, which is used as a unique identifier."
          }
        },
        "type": "object",
        "title": "UpdateDatasetRequest"
      },
      "UpdateDatesetAction": {
        "type": "string",
        "enum": ["set", "add", "remove"],
        "title": "UpdateDatesetAction",
        "description": "An enumeration."
      },
      "UpdateEvaluationRequest": {
        "properties": {
          "dataset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/src__external__app__models__v5__evaluations__DatasetRequest"
              }
            ],
            "title": "Dataset",
            "description": "Dataset to use in this Evaluation."
          },
          "evaluatees": {
            "items": {
              "$ref": "#/components/schemas/EvaluateeRequest"
            },
            "type": "array",
            "title": "Evaluated Version IDs",
            "description": "Unique identifiers for the Prompt/Tool Versions to include in the Evaluation. Can be left unpopulated if you wish to add evaluatees to this Evaluation by specifying `evaluation_id` in Log calls."
          },
          "evaluators": {
            "items": {
              "$ref": "#/components/schemas/src__external__app__models__v5__evaluations__EvaluatorRequest"
            },
            "type": "array",
            "title": "Evaluators",
            "description": "The Evaluators used to evaluate."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the Evaluation to help identify it. Must be unique within the associated File."
          },
          "file": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileRequest"
              }
            ],
            "title": "File",
            "description": "The File to associate with the Evaluation."
          }
        },
        "type": "object",
        "title": "UpdateEvaluationRequest",
        "description": "Request model for updating an Evaluation."
      },
      "UpdateEvaluatorRequest": {
        "properties": {
          "path": {
            "type": "string",
            "title": "Evaluator path",
            "description": "Path of the Evaluator including the Evaluator name, which is used as a unique identifier."
          },
          "name": {
            "type": "string",
            "title": "Evaluator Name",
            "description": "Name of the Evaluator, which is used as a unique identifier."
          }
        },
        "type": "object",
        "title": "UpdateEvaluatorRequest"
      },
      "UpdateFlowRequest": {
        "properties": {
          "path": {
            "type": "string",
            "title": "Flow path",
            "description": "Path of the Flow including the Flow name, which is used as a unique identifier."
          },
          "name": {
            "type": "string",
            "title": "Flow name",
            "description": "Name of the Flow."
          },
          "directory_id": {
            "type": "string",
            "title": "Directory ID",
            "description": "Unique identifier for the Directory to move Flow to. Starts with `dir_`."
          }
        },
        "type": "object",
        "title": "UpdateFlowRequest",
        "description": "Request model for updating a Flow.\n\nUsed for moving a Flow to a different directory."
      },
      "UpdatePromptRequest": {
        "properties": {
          "path": {
            "type": "string",
            "title": "Prompt path",
            "description": "Path of the Prompt including the Prompt name, which is used as a unique identifier."
          },
          "name": {
            "type": "string",
            "title": "Prompt name",
            "description": "Name of the Prompt."
          }
        },
        "type": "object",
        "title": "UpdatePromptRequest"
      },
      "UpdateToolRequest": {
        "properties": {
          "path": {
            "type": "string",
            "title": "Tool path",
            "description": "Path of the Tool including the Tool name, which is used as a unique identifier."
          },
          "name": {
            "type": "string",
            "title": "Tool Name",
            "description": "Name of the Tool, which is used as a unique identifier."
          }
        },
        "type": "object",
        "title": "UpdateToolRequest"
      },
      "UpdateTraceRequest": {
        "properties": {
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the Flow Log."
          },
          "output": {
            "type": "string",
            "title": "Output",
            "description": "The output of the Flow Log. Provide None to unset existing `output` value. Provide either this or `error`."
          },
          "error": {
            "type": "string",
            "title": "Error",
            "description": "The error message of the Flow Log. Provide None to unset existing `error` value. Provide either this or `output`."
          },
          "trace_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TraceStatus"
              }
            ],
            "title": "Status",
            "description": "Status of the Trace. When a Trace is marked as `complete`, no more Logs can be added to it. Monitoring Evaluators will only run on completed Traces."
          }
        },
        "type": "object",
        "required": ["trace_status"],
        "title": "UpdateTraceRequest",
        "description": "Request for updating a Trace."
      },
      "UserResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "User ID",
            "description": "Unique identifier for User. Starts with `usr`."
          },
          "email_address": {
            "type": "string",
            "title": "Email address",
            "description": "The User's email address."
          },
          "full_name": {
            "type": "string",
            "title": "Full name",
            "description": "The User's full name."
          }
        },
        "type": "object",
        "required": ["id", "email_address"],
        "title": "UserResponse"
      },
      "Valence": {
        "type": "string",
        "enum": ["positive", "negative", "neutral"],
        "title": "Valence",
        "description": "An enumeration."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      },
      "VersionDeploymentResponse": {
        "properties": {
          "file": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PromptResponse"
              },
              {
                "$ref": "#/components/schemas/ToolResponse"
              },
              {
                "$ref": "#/components/schemas/DatasetResponse"
              },
              {
                "$ref": "#/components/schemas/EvaluatorResponse"
              },
              {
                "$ref": "#/components/schemas/FlowResponse"
              }
            ],
            "title": "File",
            "description": "The File that the deployed Version belongs to."
          },
          "environment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EnvironmentResponse"
              }
            ],
            "title": "Environment",
            "description": "The Environment that the Version is deployed to."
          },
          "type": {
            "type": "string",
            "enum": ["environment"],
            "title": "Type"
          }
        },
        "type": "object",
        "required": ["file", "environment", "type"],
        "title": "VersionDeploymentResponse",
        "description": "A variable reference to the Version deployed to an Environment"
      },
      "VersionIdResponse": {
        "properties": {
          "version": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PromptResponse"
              },
              {
                "$ref": "#/components/schemas/ToolResponse"
              },
              {
                "$ref": "#/components/schemas/DatasetResponse"
              },
              {
                "$ref": "#/components/schemas/EvaluatorResponse"
              },
              {
                "$ref": "#/components/schemas/FlowResponse"
              }
            ],
            "title": "Version",
            "description": "The specific Version being referenced."
          },
          "type": {
            "type": "string",
            "enum": ["version"],
            "title": "Type"
          }
        },
        "type": "object",
        "required": ["version", "type"],
        "title": "VersionIdResponse",
        "description": "A reference to a specific Version by its ID"
      },
      "VersionReferenceResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/VersionDeploymentResponse"
          },
          {
            "$ref": "#/components/schemas/VersionIdResponse"
          }
        ],
        "title": "VersionReferenceResponse",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "environment": "#/components/schemas/VersionDeploymentResponse",
            "version": "#/components/schemas/VersionIdResponse"
          }
        }
      },
      "VersionStatsResponse": {
        "properties": {
          "version_id": {
            "type": "string",
            "title": "Version ID",
            "description": "Unique identifier for the Evaluated Version."
          },
          "batch_id": {
            "type": "string",
            "title": "Batch ID",
            "description": "Unique identifier for the batch of Logs to include in the Evaluation Report."
          },
          "num_logs": {
            "type": "integer",
            "title": "Number of Logs",
            "description": "The total number of existing Logs for this Evaluated Version within the Evaluation Report. These are Logs that have been generated by this Evaluated Version on a Datapoint belonging to the Evaluation Report's Dataset Version."
          },
          "evaluator_version_stats": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/NumericEvaluatorStatsResponse"
                },
                {
                  "$ref": "#/components/schemas/BooleanEvaluatorStatsResponse"
                },
                {
                  "$ref": "#/components/schemas/SelectEvaluatorStatsResponse"
                },
                {
                  "$ref": "#/components/schemas/TextEvaluatorStatsResponse"
                }
              ]
            },
            "type": "array",
            "title": "Evaluator Version Stats",
            "description": "Stats for each Evaluator Version used to evaluate this Evaluated Version."
          }
        },
        "type": "object",
        "required": ["version_id", "num_logs", "evaluator_version_stats"],
        "title": "VersionStatsResponse",
        "description": "Stats for an Evaluated Version in the Evaluation Report."
      },
      "VersionStatus": {
        "type": "string",
        "enum": ["uncommitted", "committed", "deleted"],
        "title": "VersionStatus",
        "description": "An enumeration."
      },
      "src__domain__chat_types__enums__ToolType": {
        "type": "string",
        "enum": ["function"],
        "title": "ToolType",
        "description": "The type of tool to call."
      },
      "src__domain__files__tool__ToolType": {
        "type": "string",
        "enum": [
          "pinecone_search",
          "google",
          "mock",
          "snippet",
          "json_schema",
          "get_api_call"
        ],
        "title": "ToolType",
        "description": "Type of tool."
      },
      "src__external__app__models__v5__datasets__DatasetRequest": {
        "properties": {
          "path": {
            "type": "string",
            "title": "Dataset path",
            "description": "Path of the Dataset, including the name. This locates the Dataset in the Humanloop filesystem and is used as as a unique identifier. Example: `folder/name` or just `name`."
          },
          "id": {
            "type": "string",
            "title": "Dataset ID",
            "description": "ID for an existing Dataset."
          },
          "datapoints": {
            "items": {
              "$ref": "#/components/schemas/CreateDatapointRequest"
            },
            "type": "array",
            "title": "Datapoints",
            "description": "The Datapoints to create this Dataset version with. Modify the `action` field to determine how these Datapoints are used."
          },
          "action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateDatesetAction"
              }
            ],
            "title": "Action",
            "description": "The action to take with the provided Datapoints.\n\n - If `\"set\"`, the created version will only contain the Datapoints provided in this request. \n - If `\"add\"`, the created version will contain the Datapoints provided in this request in addition to the Datapoints in the target version. \n - If `\"remove\"`, the created version will contain the Datapoints in the target version except for the Datapoints provided in this request. \n\nIf `\"add\"` or `\"remove\"`, one of the `version_id` or `environment` query parameters may be provided.",
            "default": "set"
          },
          "attributes": {
            "type": "object",
            "title": "Attributes",
            "description": "Additional fields to describe the Dataset. Helpful to separate Dataset versions from each other with details on how they were created or used."
          },
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made. If provided, a committed version of the Dataset is created. Otherwise, an uncommitted version is created."
          }
        },
        "type": "object",
        "required": ["datapoints"],
        "title": "DatasetRequest"
      },
      "src__external__app__models__v5__evaluations__DatasetRequest": {
        "properties": {
          "version_id": {
            "type": "string",
            "title": "Version ID",
            "description": "Unique identifier for the File Version. If provided, none of the other fields should be specified."
          },
          "path": {
            "type": "string",
            "title": "File path",
            "description": "Path identifying a File. Provide either this or `file_id` if you want to specify a File."
          },
          "file_id": {
            "type": "string",
            "title": "File ID",
            "description": "Unique identifier for the File. Provide either this or `path` if you want to specify a File."
          },
          "environment": {
            "type": "string",
            "title": "Environment name",
            "description": "Name of the Environment a Version is deployed to. Only provide this when specifying a File. If not provided (and a File is specified), the default Environment is used."
          }
        },
        "type": "object",
        "title": "DatasetRequest",
        "description": "Specification of a File version on Humanloop.\n\nThis can be done in a couple of ways:\n- Specifying `version_id` directly.\n- Specifying a File (and optionally an Environment).\n    - A File can be specified by either `path` or `file_id`.\n    - An Environment can be specified by `environment_id`. If no Environment is specified, the default Environment is used."
      },
      "src__external__app__models__v5__evaluations__EvaluatorRequest": {
        "properties": {
          "version_id": {
            "type": "string",
            "title": "Version ID",
            "description": "Unique identifier for the File Version. If provided, none of the other fields should be specified."
          },
          "path": {
            "type": "string",
            "title": "File path",
            "description": "Path identifying a File. Provide either this or `file_id` if you want to specify a File."
          },
          "file_id": {
            "type": "string",
            "title": "File ID",
            "description": "Unique identifier for the File. Provide either this or `path` if you want to specify a File."
          },
          "environment": {
            "type": "string",
            "title": "Environment name",
            "description": "Name of the Environment a Version is deployed to. Only provide this when specifying a File. If not provided (and a File is specified), the default Environment is used."
          },
          "orchestrated": {
            "type": "boolean",
            "title": "Humanloop Orchestrated",
            "description": "Whether the Evaluator is orchestrated by Humanloop. Default is `True`. If `False`, a log for the Evaluator should be submitted by the user via the API.",
            "default": true
          }
        },
        "type": "object",
        "title": "EvaluatorRequest",
        "description": "Specification of a File version on Humanloop.\n\nThis can be done in a couple of ways:\n- Specifying `version_id` directly.\n- Specifying a File (and optionally an Environment).\n    - A File can be specified by either `path` or `file_id`.\n    - An Environment can be specified by `environment_id`. If no Environment is specified, the default Environment is used."
      },
      "src__external__app__models__v5__evaluators__EvaluatorRequest": {
        "properties": {
          "path": {
            "type": "string",
            "title": "Evaluator path",
            "description": "Path of the Evaluator, including the name. This locates the Evaluator in the Humanloop filesystem and is used as as a unique identifier. Example: `folder/name` or just `name`."
          },
          "id": {
            "type": "string",
            "title": "Evaluator ID",
            "description": "ID for an existing Evaluator."
          },
          "commit_message": {
            "type": "string",
            "title": "Commit message",
            "description": "Message describing the changes made."
          },
          "spec": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/LLMEvaluatorRequest"
              },
              {
                "$ref": "#/components/schemas/CodeEvaluatorRequest"
              },
              {
                "$ref": "#/components/schemas/HumanEvaluatorRequest"
              },
              {
                "$ref": "#/components/schemas/ExternalEvaluatorRequest"
              }
            ],
            "title": "Spec",
            "discriminator": {
              "propertyName": "evaluator_type",
              "mapping": {
                "llm": "#/components/schemas/LLMEvaluatorRequest",
                "python": "#/components/schemas/CodeEvaluatorRequest",
                "human": "#/components/schemas/HumanEvaluatorRequest",
                "external": "#/components/schemas/ExternalEvaluatorRequest"
              }
            }
          }
        },
        "type": "object",
        "required": ["spec"],
        "title": "EvaluatorRequest"
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-KEY",
        "description": "The Humanloop API uses API keys for authentication. Visit your\n[API Keys](https://app.humanloop.com/account/api-keys) page to retrieve the\nAPI key you'll use in your requests.\n\nThis key allows full access and control over your projects, so keep this secret\nand take care to not expose it in any client-side code.\n\nTo use your API key, include it under the `X-API-KEY` header in your HTTP request.\n\n```bash\ncurl https://api.humanloop.com/v5/projects -H 'X-API-KEY: YOUR_API_KEY'\n```\n\nIf you're using the Python SDK, initialize the client with your API key before\nusing other SDK methods:\n\n```python\nfrom humanloop import Humanloop\nhumanloop = Humanloop(api_key=\"YOUR_API_KEY\")\n```\n\nIf you're using the TypeScript SDK, initialize the client with your API key before\nusing other SDK methods:\n\n```js\nimport { Humanloop } from \"humanloop\";\nconst humanloop = new Humanloop({apiKey: \"YOUR_API_KEY\"});\n```"
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "The Humanloop API uses API keys for authentication. Visit your\n[API Keys](https://app.humanloop.com/account/api-keys) page to retrieve the\nAPI key you'll use in your requests.\n\nThis key allows full access and control over your projects, so keep this secret\nand take care to not expose it in any client-side code.\n\nTo use your API key, include it under the `X-API-KEY` header in your HTTP request.\n\n```bash\ncurl https://api.humanloop.com/v5/projects -H 'X-API-KEY: YOUR_API_KEY'\n```\n\nIf you're using the Python SDK, initialize the client with your API key before\nusing other SDK methods:\n\n```python\nfrom humanloop import Humanloop\nhumanloop = Humanloop(api_key=\"YOUR_API_KEY\")\n```\n\nIf you're using the TypeScript SDK, initialize the client with your API key before\nusing other SDK methods:\n\n```js\nimport { Humanloop } from \"humanloop\";\nconst humanloop = new Humanloop({apiKey: \"YOUR_API_KEY\"});\n```"
    },
    {
      "name": "Prompts",
      "description": "Prompts define how a large language model behaves.\n\n#### What is a Prompt?\n\nA Prompt on Humanloop encapsulates the base instructions and other configuration for how a large language model should\nperform a specific task.\n\nPrompts have immutable versions that you can **Commit** and **Deploy**.\nTo use a Prompt, you can **Call** it to create a generation and you can **Log** generations manually.\n\n#### Referencing Prompts\n\nPrompts are referenced by their unique ID or path.\n\nYou can perform actions on a specific Prompt version by specifying either the `version_id`\nor `environment` query parameter in the request. If you provide a `version_id`, Humanloop will\nuse the specified version of the Prompt. If you provide an `environment`, Humanloop will use the\nversion of the Prompt that is currently deployed to that Environment.\nIf you do not provide either a `version_id` or `environment`, Humanloop will use the Prompt version\nthat is deployed to the default Environment.\n\n"
    },
    {
      "name": "Datasets",
      "description": "Datasets are collections of input-output pairs that you can use within Humanloop for Evaluations.\n\n#### What is a Dataset?\n\nA Dataset is a collection of unique Datapoints. These Datapoints contain `inputs` and `target` fields. The `inputs`\nare used to populate a Prompt's template and the `target` can be referenced by Evaluators to evaluate the quality of\nthe generated output.\n\nNote that Humanloop automatically deduplicates Datapoints. If you try to add a Datapoint that already exists, it will\nbe ignored. If you intentionally want to add a duplicate Datapoint, you can add a unique identifier to the Datapoint's\ninputs such as `{_dedupe_id: <unique ID>}`.\n\n#### Creating Dataset versions\n\nDatasets have immutable versions. To add/remove Datapoint to/from an existing version, use the **Create** endpoint\nand specify `action` as `\"add\"` or `\"remove\"` respectively. You may also specify the `version_id` or `environment`\nquery parameters to identify the existing version to base the new version on. If neither is provided, the version\ndeployed to the default Environment will be used.\n\n"
    },
    {
      "name": "Evaluations",
      "description": "Evaluations help you measure the performance of your Prompts, Tools and LLM Evaluators.\n\nAn Evaluation consists of a Dataset, Evaluatees (i.e. Versions to evaluate), and Evaluators.\nWhen an Evaluation is created, Humanloop will start generating Logs, iterating through Datapoints in the Dataset,\nfor each Evaluatee. The Evaluators will then be run on these Logs.\n\nAggregate stats can be viewed in the Humanloop app or retrieved with the **Get Evaluation Stats** endpoint.\n\nNote that when an Evaluation is created, Humanloop will attempt to reuse any existing Logs for each Datapoint-Evaluatee\npair. This means that you can create multiple Evaluations without generating new Logs unnecessarily.\n\n"
    },
    {
      "name": "Logs",
      "description": "Logs contain the inputs and outputs of each time a Prompt, Tool or Evaluator is called.\n\nHumanloop automatically records the inputs and outputs when you Call a Prompt or Tool and saves a Log.\nEvaluator Logs are also created when an Evaluator is run on a Log.\n\nYou can manually create Logs through the API.\n\n...\n\n\n"
    },
    {
      "name": "Sessions",
      "description": "Sessions are groups of Logs that track sequences of LLM actions.\n\nSessions enable you to trace through related Logs across different Files. For\nexample, a Session can contain a Prompt Log recording an LLM generation, a Tool\nLog recording a retrieval step, and Evaluator Logs measuring the quality of the\ngenerated text.\n\nLogs within a Session may be nested within each other. When Evaluators are run\nfor monitoring, the Evaluator Logs are added to the Session that the evaluated\nLog is in, nested within the evaluated Log.\n\n"
    }
  ],
  "x-readme": {
    "samples-languages": ["python", "javascript", "curl"]
  }
}
