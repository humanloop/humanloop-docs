#
# WARNING: This file is auto-generated. Do not edit this file directly.
# Use the sync_openapi.sh script to update this file.
#
openapi: 3.0.2
info:
  title: Humanloop API
  description: |-
    The Humanloop API allows you to interact with Humanloop from your product or service.

    You can do this through HTTP requests from any language or via our official Python or TypeScript SDK.

    To install the official [Python SDK](https://pypi.org/project/humanloop/), run the following command:

    ```bash
    pip install humanloop
    ```

    To install the official [TypeScript SDK](https://www.npmjs.com/package/humanloop), run the following command:

    ```bash
    npm i humanloop
    ```

    ---

    Guides and further details about key concepts can be found in [our docs](https://docs.humanloop.com/).
  version: 5.0.0
servers:
  - url: https://api.humanloop.com/v5
    description: Production server
paths:
  /prompts/log:
    post:
      tags:
        - Prompts
      summary: Log
      description: |-
        Log to a Prompt.

        You can use query parameters `version_id`, or `environment`, to target
        an existing version of the Prompt. Otherwise the default deployed version will be chosen.

        Instead of targeting an existing version explicitly, you can instead pass in
        Prompt details in the request body. In this case, we will check if the details correspond
        to an existing version of the Prompt, if not we will create a new version. This is helpful
        in the case where you are storing or deriving your Prompt details in code.
      operationId: Prompts_log
      parameters:
        - description: A specific Version ID of the Prompt to log to.
          required: false
          schema:
            type: string
            title: Version ID
            description: A specific Version ID of the Prompt to log to.
          name: version_id
          in: query
        - description: Name of the Environment identifying a deployed version to log to.
          required: false
          schema:
            type: string
            title: Environment
            description: Name of the Environment identifying a deployed version to log to.
          name: environment
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PromptLogRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePromptLogResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /prompts/call:
    post:
      tags:
        - Prompts
      summary: Call
      description: |-
        Call a Prompt.

        Calling a Prompt subsequently calls the model provider before logging
        the request, responses and metadata to Humanloop.

        You can use query parameters `version_id`, or `environment`, to target
        an existing version of the Prompt. Otherwise the default deployed version will be chosen.

        Instead of targeting an existing version explicitly, you can instead pass in
        Prompt details in the request body. In this case, we will check if the details correspond
        to an existing version of the Prompt, if not we will create a new version. This is helpful
        in the case where you are storing or deriving your Prompt details in code.
      operationId: Prompts_call
      parameters:
        - description: A specific Version ID of the Prompt to log to.
          required: false
          schema:
            type: string
            title: Version ID
            description: A specific Version ID of the Prompt to log to.
          name: version_id
          in: query
        - description: Name of the Environment identifying a deployed version to log to.
          required: false
          schema:
            type: string
            title: Environment
            description: Name of the Environment identifying a deployed version to log to.
          name: environment
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PromptCallRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/PromptCallResponse"
                  - $ref: "#/components/schemas/PromptCallStreamResponse"
                title: Response Prompts Call
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /prompts:
    get:
      tags:
        - Prompts
      summary: "List "
      description: Get a list of Prompts.
      operationId: list__prompts_get
      parameters:
        - description: Page number for pagination.
          required: false
          schema:
            type: integer
            minimum: 1.0
            title: Page number
            description: Page number for pagination.
            default: 1
          name: page
          in: query
        - description: Page size for pagination. Number of Prompts to fetch.
          required: false
          schema:
            type: integer
            minimum: 0.0
            title: Page size
            description: Page size for pagination. Number of Prompts to fetch.
            default: 10
          name: size
          in: query
        - description: Case-insensitive filter for Prompt name.
          required: false
          schema:
            type: string
            title: Prompt name filter
            description: Case-insensitive filter for Prompt name.
          name: name
          in: query
        - description: Case-insensitive filter for users in the Prompt. This filter matches against both email address and name of users.
          required: false
          schema:
            type: string
            title: User filter
            description: Case-insensitive filter for users in the Prompt. This filter matches against both email address and name of users.
          name: user_filter
          in: query
        - description: Field to sort Prompts by
          required: false
          schema:
            allOf:
              - $ref: "#/components/schemas/ProjectSortBy"
            title: Sort by
            description: Field to sort Prompts by
            default: created_at
          name: sort_by
          in: query
        - description: Direction to sort by.
          required: false
          schema:
            allOf:
              - $ref: "#/components/schemas/SortOrder"
            title: Sort order
            description: Direction to sort by.
            default: desc
          name: order
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListPrompts"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    post:
      tags:
        - Prompts
      summary: Upsert
      description: |-
        Create a Prompt or update it with a new version if it already exists.

        Prompts are identified by the `ID` or their `path`. The parameters (i.e. the prompt template, temperature, model etc.) determine the versions of the Prompt.

        If you provide a commit message, then the new version will be committed;
        otherwise it will be uncommitted. If you try to commit an already committed version,
        an exception will be raised.
      operationId: upsert_prompts_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PromptRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PromptResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /prompts/{id}:
    get:
      tags:
        - Prompts
      summary: Get
      description: |-
        Retrieve the Prompt with the given ID.

        By default, the deployed version of the Prompt is returned. Use the query parameters
        `version_id` or `environment` to target a specific version of the Prompt.
      operationId: get_prompts__id__get
      parameters:
        - description: Unique identifier for Prompt.
          required: true
          schema:
            type: string
            title: Prompt ID
            description: Unique identifier for Prompt.
          name: id
          in: path
        - description: A specific Version ID of the Prompt to retrieve.
          required: false
          schema:
            type: string
            title: Version ID
            description: A specific Version ID of the Prompt to retrieve.
          name: version_id
          in: query
        - description: Name of the Environment to retrieve a deployed Version from.
          required: false
          schema:
            type: string
            title: Environment
            description: Name of the Environment to retrieve a deployed Version from.
          name: environment
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PromptResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    delete:
      tags:
        - Prompts
      summary: Delete
      description: Delete the Prompt with the given ID.
      operationId: delete_prompts__id__delete
      parameters:
        - description: Unique identifier for Prompt.
          required: true
          schema:
            type: string
            title: Prompt ID
            description: Unique identifier for Prompt.
          name: id
          in: path
      responses:
        "204":
          description: Successful Response
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    patch:
      tags:
        - Prompts
      summary: Move
      description: Move the Prompt to a different path or change the name.
      operationId: move_prompts__id__patch
      parameters:
        - description: Unique identifier for Prompt.
          required: true
          schema:
            type: string
            title: Prompt ID
            description: Unique identifier for Prompt.
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePromptRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PromptResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /prompts/{id}/versions:
    get:
      tags:
        - Prompts
      summary: List Versions
      description: Get a list of all the versions of a Prompt.
      operationId: list_versions_prompts__id__versions_get
      parameters:
        - description: Unique identifier for Prompt.
          required: true
          schema:
            type: string
            title: Prompt ID
            description: Unique identifier for Prompt.
          name: id
          in: path
        - description: "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned."
          required: false
          schema:
            allOf:
              - $ref: "#/components/schemas/VersionStatus"
            description: "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned."
          name: status
          in: query
        - description: Whether to include Evaluator aggregate results for the versions in the response
          required: false
          schema:
            type: boolean
            title: Evaluator Aggregates
            description: Whether to include Evaluator aggregate results for the versions in the response
          name: evaluator_aggregates
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListPrompts"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /prompts/{id}/versions/{version_id}/commit:
    post:
      tags:
        - Prompts
      summary: Commit
      description: Commit the Prompt Version with the given ID.
      operationId: commit_prompts__id__versions__version_id__commit_post
      parameters:
        - description: Unique identifier for Prompt.
          required: true
          schema:
            type: string
            title: Prompt ID
            description: Unique identifier for Prompt.
          name: id
          in: path
        - description: Unique identifier for the specific version of the Prompt.
          required: true
          schema:
            type: string
            title: Version ID
            description: Unique identifier for the specific version of the Prompt.
          name: version_id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommitRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PromptResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /prompts/{id}/evaluators:
    post:
      tags:
        - Prompts
      summary: Update Monitoring
      description: |-
        Activate and deactivate Evaluators for monitoring the Prompt.

        An activated Evaluator will automatically be run on all new Logs
        within the Prompt for monitoring purposes.
      operationId: update_monitoring_prompts__id__evaluators_post
      parameters:
        - required: true
          schema:
            type: string
            title: Id
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EvaluatorActivationDeactivationRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PromptResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /prompts/{id}/environments/{environment_id}:
    post:
      tags:
        - Prompts
      summary: Set Deployment
      description: |-
        Deploy Prompt to an Environment.

        Set the deployed version for the specified Environment. This Prompt
        will be used for calls made to the Prompt in this Environment.
      operationId: set_deployment_prompts__id__environments__environment_id__post
      parameters:
        - description: Unique identifier for Prompt.
          required: true
          schema:
            type: string
            title: Prompt ID
            description: Unique identifier for Prompt.
          name: id
          in: path
        - description: Unique identifier for the Environment to deploy the Version to.
          required: true
          schema:
            type: string
            title: Environment ID
            description: Unique identifier for the Environment to deploy the Version to.
          name: environment_id
          in: path
        - description: Unique identifier for the specific version of the Prompt.
          required: true
          schema:
            type: string
            title: Version ID
            description: Unique identifier for the specific version of the Prompt.
          name: version_id
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PromptResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    delete:
      tags:
        - Prompts
      summary: Remove Deployment
      description: |-
        Remove deployed Prompt from the Environment.

        Remove the deployed version for the specified Environment. This Prompt
        will no longer be used for calls made to the Prompt in this Environment.
      operationId: remove_deployment_prompts__id__environments__environment_id__delete
      parameters:
        - description: Unique identifier for Prompt.
          required: true
          schema:
            type: string
            title: Prompt ID
            description: Unique identifier for Prompt.
          name: id
          in: path
        - description: Unique identifier for the Environment to remove the deployment from.
          required: true
          schema:
            type: string
            title: Environment ID
            description: Unique identifier for the Environment to remove the deployment from.
          name: environment_id
          in: path
      responses:
        "204":
          description: Successful Response
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /prompts/{id}/environments:
    get:
      tags:
        - Prompts
      summary: List Environments
      description: List all Environments and their deployed versions for the Prompt.
      operationId: list_environments_prompts__id__environments_get
      parameters:
        - description: Unique identifier for Prompt.
          required: true
          schema:
            type: string
            title: Prompt ID
            description: Unique identifier for Prompt.
          name: id
          in: path
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/FileEnvironmentResponse"
                type: array
                title: Response List Environments Prompts  Id  Environments Get
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /tools/log:
    post:
      tags:
        - Tools
      summary: Log
      description: |-
        Log to a Tool.

        You can use query parameters `version_id`, or `environment`, to target
        an existing version of the Tool. Otherwise the default deployed version will be chosen.

        Instead of targeting an existing version explicitly, you can instead pass in
        Tool details in the request body. In this case, we will check if the details correspond
        to an existing version of the Tool, if not we will create a new version. This is helpful
        in the case where you are storing or deriving your Tool details in code.
      operationId: Tools_log
      parameters:
        - description: A specific Version ID of the Tool to log to.
          required: false
          schema:
            type: string
            title: Version ID
            description: A specific Version ID of the Tool to log to.
          name: version_id
          in: query
        - description: Name of the Environment identifying a deployed version to log to.
          required: false
          schema:
            type: string
            title: Environment
            description: Name of the Environment identifying a deployed version to log to.
          name: environment
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ToolLogRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateToolLogResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /tools:
    get:
      tags:
        - Tools
      summary: "List "
      description: Get a list of Tools.
      operationId: list__tools_get
      parameters:
        - description: Page offset for pagination.
          required: false
          schema:
            type: integer
            minimum: 1.0
            title: Page index
            description: Page offset for pagination.
            default: 1
          name: page
          in: query
        - description: Page size for pagination. Number of Tools to fetch.
          required: false
          schema:
            type: integer
            title: Page size
            description: Page size for pagination. Number of Tools to fetch.
            default: 10
          name: size
          in: query
        - description: Case-insensitive filter for Tool name.
          required: false
          schema:
            type: string
            title: Tool name filter
            description: Case-insensitive filter for Tool name.
          name: name
          in: query
        - description: Case-insensitive filter for users in the Tool. This filter matches against both email address and name of users.
          required: false
          schema:
            type: string
            title: User filter
            description: Case-insensitive filter for users in the Tool. This filter matches against both email address and name of users.
          name: user_filter
          in: query
        - description: Field to sort Tools by
          required: false
          schema:
            allOf:
              - $ref: "#/components/schemas/ProjectSortBy"
            title: Sort by
            description: Field to sort Tools by
            default: created_at
          name: sort_by
          in: query
        - description: Direction to sort by.
          required: false
          schema:
            allOf:
              - $ref: "#/components/schemas/SortOrder"
            title: Sort order
            description: Direction to sort by.
            default: desc
          name: order
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTools"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    post:
      tags:
        - Tools
      summary: Upsert
      description: |-
        Create a Tool or update it with a new version if it already exists.

        Tools are identified by the `ID` or their `path`. The name, description and parameters determine the versions of the Tool.

        If you provide a commit message, then the new version will be committed;
        otherwise it will be uncommitted. If you try to commit an already committed version,
        an exception will be raised.
      operationId: upsert_tools_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ToolRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/src__external__app__models__v5__tools__ToolResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /tools/{id}:
    get:
      tags:
        - Tools
      summary: Get
      description: |-
        Retrieve the Tool with the given ID.

        By default, the deployed version of the Tool is returned. Use the query parameters
        `version_id` or `environment` to target a specific version of the Tool.
      operationId: get_tools__id__get
      parameters:
        - description: Unique identifier for Tool.
          required: true
          schema:
            type: string
            title: Tool ID
            description: Unique identifier for Tool.
          name: id
          in: path
        - description: A specific Version ID of the Tool to retrieve.
          required: false
          schema:
            type: string
            title: Version ID
            description: A specific Version ID of the Tool to retrieve.
          name: version_id
          in: query
        - description: Name of the Environment to retrieve a deployed Version from.
          required: false
          schema:
            type: string
            title: Environment
            description: Name of the Environment to retrieve a deployed Version from.
          name: environment
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/src__external__app__models__v5__tools__ToolResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    delete:
      tags:
        - Tools
      summary: Delete
      description: Delete the Tool with the given ID.
      operationId: delete_tools__id__delete
      parameters:
        - description: Unique identifier for Tool.
          required: true
          schema:
            type: string
            title: Tool ID
            description: Unique identifier for Tool.
          name: id
          in: path
      responses:
        "204":
          description: Successful Response
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    patch:
      tags:
        - Tools
      summary: Move
      description: Move the Tool to a different path or change the name.
      operationId: move_tools__id__patch
      parameters:
        - description: Unique identifier for Tool.
          required: true
          schema:
            type: string
            title: Tool ID
            description: Unique identifier for Tool.
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateToolRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/src__external__app__models__v5__tools__ToolResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /tools/{id}/versions:
    get:
      tags:
        - Tools
      summary: List Versions
      description: Get a list of all the versions of a Tool.
      operationId: list_versions_tools__id__versions_get
      parameters:
        - description: Unique identifier for the Tool.
          required: true
          schema:
            type: string
            title: Tool ID
            description: Unique identifier for the Tool.
          name: id
          in: path
        - description: "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned."
          required: false
          schema:
            allOf:
              - $ref: "#/components/schemas/VersionStatus"
            description: "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned."
          name: status
          in: query
        - description: Whether to include Evaluator aggregate results for the versions in the response
          required: false
          schema:
            type: boolean
            title: Evaluator Aggregates
            description: Whether to include Evaluator aggregate results for the versions in the response
          name: evaluator_aggregates
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTools"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /tools/{id}/versions/{version_id}/commit:
    post:
      tags:
        - Tools
      summary: Commit
      description: Commit the Tool Version with the given ID.
      operationId: commit_tools__id__versions__version_id__commit_post
      parameters:
        - description: Unique identifier for Tool.
          required: true
          schema:
            type: string
            title: Tool ID
            description: Unique identifier for Tool.
          name: id
          in: path
        - description: Unique identifier for the specific version of the Tool.
          required: true
          schema:
            type: string
            title: Version ID
            description: Unique identifier for the specific version of the Tool.
          name: version_id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommitRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/src__external__app__models__v5__tools__ToolResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /tools/{id}/evaluators:
    post:
      tags:
        - Tools
      summary: Update Monitoring
      description: |-
        Activate and deactivate Evaluators for monitoring the Tool.

        An activated Evaluator will automatically be run on all new Logs
        within the Tool for monitoring purposes.
      operationId: update_monitoring_tools__id__evaluators_post
      parameters:
        - required: true
          schema:
            type: string
            title: Id
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EvaluatorActivationDeactivationRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/src__external__app__models__v5__tools__ToolResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /tools/{id}/environments/{environment_id}:
    post:
      tags:
        - Tools
      summary: Set Deployment
      description: |-
        Deploy Tool to an Environment.

        Set the deployed version for the specified Environment. This Prompt
        will be used for calls made to the Tool in this Environment.
      operationId: set_deployment_tools__id__environments__environment_id__post
      parameters:
        - description: Unique identifier for Tool.
          required: true
          schema:
            type: string
            title: Tool ID
            description: Unique identifier for Tool.
          name: id
          in: path
        - description: Unique identifier for the Environment to deploy the Version to.
          required: true
          schema:
            type: string
            title: Environment ID
            description: Unique identifier for the Environment to deploy the Version to.
          name: environment_id
          in: path
        - description: Unique identifier for the specific version of the Tool.
          required: true
          schema:
            type: string
            title: Version ID
            description: Unique identifier for the specific version of the Tool.
          name: version_id
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/src__external__app__models__v5__tools__ToolResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    delete:
      tags:
        - Tools
      summary: Remove Deployment
      description: |-
        Remove deployed Tool from the Environment.

        Remove the deployed version for the specified Environment. This Tool
        will no longer be used for calls made to the Tool in this Environment.
      operationId: remove_deployment_tools__id__environments__environment_id__delete
      parameters:
        - description: Unique identifier for Tool.
          required: true
          schema:
            type: string
            title: Tool ID
            description: Unique identifier for Tool.
          name: id
          in: path
        - description: Unique identifier for the Environment to remove the deployment from.
          required: true
          schema:
            type: string
            title: Environment ID
            description: Unique identifier for the Environment to remove the deployment from.
          name: environment_id
          in: path
      responses:
        "204":
          description: Successful Response
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /tools/{id}/environments:
    get:
      tags:
        - Tools
      summary: List Environments
      description: List all Environments and their deployed versions for the Tool.
      operationId: list_environments_tools__id__environments_get
      parameters:
        - description: Unique identifier for Tool.
          required: true
          schema:
            type: string
            title: Tool ID
            description: Unique identifier for Tool.
          name: id
          in: path
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/FileEnvironmentResponse"
                type: array
                title: Response List Environments Tools  Id  Environments Get
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /datasets:
    get:
      tags:
        - Datasets
      summary: "List "
      description: List all Datasets.
      operationId: list__datasets_get
      parameters:
        - description: Page offset for pagination.
          required: false
          schema:
            type: integer
            minimum: 1.0
            title: Page index
            description: Page offset for pagination.
            default: 1
          name: page
          in: query
        - description: Page size for pagination. Number of Datasets to fetch.
          required: false
          schema:
            type: integer
            minimum: 0.0
            title: Page size
            description: Page size for pagination. Number of Datasets to fetch.
            default: 10
          name: size
          in: query
        - description: Case-insensitive filter for Dataset name.
          required: false
          schema:
            type: string
            title: Dataset name filter
            description: Case-insensitive filter for Dataset name.
          name: name
          in: query
        - description: Case-insensitive filter for users in the Dataset. This filter matches against both email address and name of users.
          required: false
          schema:
            type: string
            title: User filter
            description: Case-insensitive filter for users in the Dataset. This filter matches against both email address and name of users.
          name: user_filter
          in: query
        - description: Field to sort Datasets by
          required: false
          schema:
            allOf:
              - $ref: "#/components/schemas/ProjectSortBy"
            title: Sort by
            description: Field to sort Datasets by
            default: created_at
          name: sort_by
          in: query
        - description: Direction to sort by.
          required: false
          schema:
            allOf:
              - $ref: "#/components/schemas/SortOrder"
            title: Sort order
            description: Direction to sort by.
            default: desc
          name: order
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedData_DatasetResponse_"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    post:
      tags:
        - Datasets
      summary: Upsert
      description: |-
        Create a Dataset or update it with a new version if it already exists.

        Datasets are identified by the `ID` or their `path`. The datapoints determine the versions of the Dataset.

        By default, the new Dataset version will be set to the list of Datapoints provided in
        the request. You can also create a new version by adding or removing Datapoints from an existing version
        by specifying `action` as `add` or `remove` respectively. In this case, you may specify
        the `version_id` or `environment` query parameters to identify the existing version to base
        the new version on. If neither is provided, the default deployed version will be used.

        If you provide a commit message, then the new version will be committed;
        otherwise it will be uncommitted. If you try to commit an already committed version,
        an exception will be raised.

        Humanloop also deduplicates Datapoints. If you try to add a Datapoint that already
        exists, it will be ignored. If you intentionally want to add a duplicate Datapoint,
        you can add a unique identifier to the Datapoint's inputs such as `{_dedupe_id: <unique ID>}`.
      operationId: upsert_datasets_post
      parameters:
        - description: ID of the specific Dataset version to base the created Version on. Only used when `action` is `"add"` or `"remove"`.
          required: false
          schema:
            type: string
            title: Version ID
            description: ID of the specific Dataset version to base the created Version on. Only used when `action` is `"add"` or `"remove"`.
          name: version_id
          in: query
        - description: Name of the Environment identifying a deployed Version to base the created Version on. Only used when `action` is `"add"` or `"remove"`.
          required: false
          schema:
            type: string
            title: Environment
            description: Name of the Environment identifying a deployed Version to base the created Version on. Only used when `action` is `"add"` or `"remove"`.
          name: environment
          in: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/src__external__app__models__v5__datasets__DatasetRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /datasets/{id}:
    get:
      tags:
        - Datasets
      summary: Get
      description: |-
        Retrieve the Dataset with the given ID.

        Unless `include_datapoints` is set to `true`, the response will not include
        the Datapoints.
        Use the List Datapoints endpoint (`GET /{id}/datapoints`) to efficiently
        retrieve Datapoints for a large Dataset.

        By default, the deployed version of the Dataset is returned. Use the query parameters
        `version_id` or `environment` to target a specific version of the Dataset.
      operationId: get_datasets__id__get
      parameters:
        - description: Unique identifier for Dataset.
          required: true
          schema:
            type: string
            title: Dataset ID
            description: Unique identifier for Dataset.
          name: id
          in: path
        - description: A specific Version ID of the Dataset to retrieve.
          required: false
          schema:
            type: string
            title: Version ID
            description: A specific Version ID of the Dataset to retrieve.
          name: version_id
          in: query
        - description: Name of the Environment to retrieve a deployed Version from.
          required: false
          schema:
            type: string
            title: Environment
            description: Name of the Environment to retrieve a deployed Version from.
          name: environment
          in: query
        - description: If set to `true`, include all Datapoints in the response. Defaults to `false`. Consider using the paginated List Datapoints endpoint instead.
          required: false
          schema:
            type: boolean
            title: Include Datapoints
            description: If set to `true`, include all Datapoints in the response. Defaults to `false`. Consider using the paginated List Datapoints endpoint instead.
            default: false
          name: include_datapoints
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    delete:
      tags:
        - Datasets
      summary: Delete
      description: Delete the Dataset with the given ID.
      operationId: delete_datasets__id__delete
      parameters:
        - description: Unique identifier for Dataset.
          required: true
          schema:
            type: string
            title: Dataset ID
            description: Unique identifier for Dataset.
          name: id
          in: path
      responses:
        "204":
          description: Successful Response
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    patch:
      tags:
        - Datasets
      summary: Move
      description: Update the Dataset with the given ID.
      operationId: move_datasets__id__patch
      parameters:
        - description: Unique identifier for Dataset.
          required: true
          schema:
            type: string
            title: Dataset ID
            description: Unique identifier for Dataset.
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDatasetRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /datasets/{id}/datapoints:
    get:
      tags:
        - Datasets
      summary: List Datapoints
      description: List all Datapoints for the Dataset with the given ID.
      operationId: list_datapoints_datasets__id__datapoints_get
      parameters:
        - description: Unique identifier for Dataset.
          required: true
          schema:
            type: string
            title: Dataset ID
            description: Unique identifier for Dataset.
          name: id
          in: path
        - description: A specific Version ID of the Dataset to retrieve.
          required: false
          schema:
            type: string
            title: Version Id
            description: A specific Version ID of the Dataset to retrieve.
          name: version_id
          in: query
        - description: Name of the Environment to retrieve a deployed Version from.
          required: false
          schema:
            type: string
            title: Environment
            description: Name of the Environment to retrieve a deployed Version from.
          name: environment
          in: query
        - description: Page number for pagination.
          required: false
          schema:
            type: integer
            minimum: 1.0
            title: Page
            description: Page number for pagination.
            default: 1
          name: page
          in: query
        - description: Page size for pagination. Number of Datapoints to fetch.
          required: false
          schema:
            type: integer
            minimum: 0.0
            title: Size
            description: Page size for pagination. Number of Datapoints to fetch.
            default: 50
          name: size
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedData_DatapointResponse_"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /datasets/{id}/versions:
    get:
      tags:
        - Datasets
      summary: List Versions
      description: Get a list of the versions for a Dataset.
      operationId: list_versions_datasets__id__versions_get
      parameters:
        - description: Unique identifier for Dataset.
          required: true
          schema:
            type: string
            title: Dataset ID
            description: Unique identifier for Dataset.
          name: id
          in: path
        - description: "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned."
          required: false
          schema:
            allOf:
              - $ref: "#/components/schemas/VersionStatus"
            description: "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned."
          name: status
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDatasets"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /datasets/{id}/versions/{version_id}/commit:
    post:
      tags:
        - Datasets
      summary: Commit
      description: Commit the Dataset Version with the given ID.
      operationId: commit_datasets__id__versions__version_id__commit_post
      parameters:
        - description: Unique identifier for Dataset.
          required: true
          schema:
            type: string
            title: Dataset ID
            description: Unique identifier for Dataset.
          name: id
          in: path
        - description: Unique identifier for the specific version of the Dataset.
          required: true
          schema:
            type: string
            title: Version ID
            description: Unique identifier for the specific version of the Dataset.
          name: version_id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommitRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /datasets/{id}/datapoints/csv:
    post:
      tags:
        - Datasets
      summary: Upload Csv
      description: |-
        Add Datapoints from a CSV file to a Dataset.

        This will create a new committed version of the Dataset with the Datapoints from the CSV file.

        If either `version_id` or `environment` is provided, the new version will be based on the specified version,
        with the Datapoints from the CSV file added to the existing Datapoints in the version.
        If neither `version_id` nor `environment` is provided, the new version will be based on the version
        of the Dataset that is deployed to the default Environment.
      operationId: upload_csv_datasets__id__datapoints_csv_post
      parameters:
        - description: Unique identifier for the Dataset
          required: true
          schema:
            type: string
            title: Dataset ID
            description: Unique identifier for the Dataset
          name: id
          in: path
        - description: ID of the specific Dataset version to base the created Version on.
          required: false
          schema:
            type: string
            title: Version ID
            description: ID of the specific Dataset version to base the created Version on.
          name: version_id
          in: query
        - description: Name of the Environment identifying a deployed Version to base the created Version on.
          required: false
          schema:
            type: string
            title: Environment
            description: Name of the Environment identifying a deployed Version to base the created Version on.
          name: environment
          in: query
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Body_upload_csv_datasets__id__datapoints_csv_post"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /datasets/{id}/environments/{environment_id}:
    post:
      tags:
        - Datasets
      summary: Set Deployment
      description: |-
        Deploy Dataset to Environment.

        Set the deployed version for the specified Environment.
      operationId: set_deployment_datasets__id__environments__environment_id__post
      parameters:
        - description: Unique identifier for Dataset.
          required: true
          schema:
            type: string
            title: Dataset ID
            description: Unique identifier for Dataset.
          name: id
          in: path
        - description: Unique identifier for the Environment to deploy the Version to.
          required: true
          schema:
            type: string
            title: Environment ID
            description: Unique identifier for the Environment to deploy the Version to.
          name: environment_id
          in: path
        - description: Unique identifier for the specific version of the Dataset.
          required: true
          schema:
            type: string
            title: Version ID
            description: Unique identifier for the specific version of the Dataset.
          name: version_id
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    delete:
      tags:
        - Datasets
      summary: Remove Deployment
      description: |-
        Remove deployed Dataset from Environment.

        Remove the deployed version for the specified Environment.
      operationId: remove_deployment_datasets__id__environments__environment_id__delete
      parameters:
        - description: Unique identifier for Dataset.
          required: true
          schema:
            type: string
            title: Dataset ID
            description: Unique identifier for Dataset.
          name: id
          in: path
        - description: Unique identifier for the Environment to remove the deployment from.
          required: true
          schema:
            type: string
            title: Environment ID
            description: Unique identifier for the Environment to remove the deployment from.
          name: environment_id
          in: path
      responses:
        "204":
          description: Successful Response
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /datasets/{id}/environments:
    get:
      tags:
        - Datasets
      summary: List Environments
      description: List all Environments and their deployed versions for the Dataset.
      operationId: list_environments_datasets__id__environments_get
      parameters:
        - description: Unique identifier for Dataset.
          required: true
          schema:
            type: string
            title: Dataset ID
            description: Unique identifier for Dataset.
          name: id
          in: path
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/FileEnvironmentResponse"
                type: array
                title: Response List Environments Datasets  Id  Environments Get
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /directories:
    get:
      tags:
        - Directories
      summary: "List "
      description: Retrieve a list of all Directories.
      operationId: list__directories_get
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/DirectoryResponse"
                type: array
                title: Response List  Directories Get
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    post:
      tags:
        - Directories
      summary: Create
      description: Creates a Directory.
      operationId: create_directories_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDirectoryRequest"
        required: true
      responses:
        "201":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DirectoryResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /directories/{id}:
    get:
      tags:
        - Directories
      summary: Get
      description: Fetches a directory by ID.
      operationId: Directories_get
      parameters:
        - description: String ID of directory. Starts with `dir_`.
          required: true
          schema:
            type: string
            title: Directory ID
            description: String ID of directory. Starts with `dir_`.
          name: id
          in: path
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DirectoryWithParentsAndChildrenResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    delete:
      tags:
        - Directories
      summary: Delete
      description: |-
        Delete the Directory with the given ID.

        The Directory must be empty (i.e. contain no Directories or Files).
      operationId: Directories_delete
      parameters:
        - description: Unique identifier for Directory. Starts with `dir_`.
          required: true
          schema:
            type: string
            title: Directory ID
            description: Unique identifier for Directory. Starts with `dir_`.
          name: id
          in: path
      responses:
        "204":
          description: Successful Response
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    patch:
      tags:
        - Directories
      summary: Update
      description: Update the Directory with the given ID.
      operationId: Directories_update
      parameters:
        - description: Unique identifier for Directory. Starts with `dir_`.
          required: true
          schema:
            type: string
            title: Directory ID
            description: Unique identifier for Directory. Starts with `dir_`.
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDirectoryRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DirectoryResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /evaluations:
    get:
      tags:
        - Evaluations
      summary: List Evaluations for File
      description: |-
        List Evaluations for the given File.

        Retrieve a list of Evaluations that evaluate versions of the specified File.
      operationId: list__evaluations_get
      parameters:
        - description: Filter by File ID. If provided, only Evaluation for the specified File will be returned.
          required: true
          schema:
            type: string
            title: File ID
            description: Filter by File ID. If provided, only Evaluation for the specified File will be returned.
          name: file_id
          in: query
        - description: Page number for pagination.
          required: false
          schema:
            type: integer
            minimum: 1.0
            title: Page number
            description: Page number for pagination.
            default: 1
          name: page
          in: query
        - description: Page size for pagination. Number of Evaluations to fetch.
          required: false
          schema:
            type: integer
            minimum: 0.0
            title: Page size
            description: Page size for pagination. Number of Evaluations to fetch.
            default: 10
          name: size
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedData_EvaluationResponse_"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    post:
      tags:
        - Evaluations
      summary: Create Evaluation
      description: |-
        Create an Evaluation.

        Create a new Evaluation by specifying the Dataset, Evaluatees, and Evaluators.
        Humanloop will automatically start generating Logs and running Evaluators.

        To keep updated on the progress of the Evaluation, you can poll the Evaluation
        and check its status.
      operationId: create_evaluations_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEvaluationRequest"
        required: true
      responses:
        "201":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluationResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /evaluations/{id}:
    get:
      tags:
        - Evaluations
      summary: Get Evaluation
      description: |-
        Get an Evaluation.

        Retrieve the Evaluation with the given ID.
      operationId: get_evaluations__id__get
      parameters:
        - description: Unique identifier for Evaluation.
          required: true
          schema:
            type: string
            title: Evaluation ID
            description: Unique identifier for Evaluation.
          name: id
          in: path
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluationResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    delete:
      tags:
        - Evaluations
      summary: Delete Evaluation
      description: |-
        Delete an Evaluation.

        Remove an Evaluation from Humanloop. The Logs and Versions used in the Evaluation
        will not be deleted.
      operationId: delete_evaluations__id__delete
      parameters:
        - description: Unique identifier for Evaluation.
          required: true
          schema:
            type: string
            title: Evaluation ID
            description: Unique identifier for Evaluation.
          name: id
          in: path
      responses:
        "204":
          description: Successful Response
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    patch:
      tags:
        - Evaluations
      summary: Update Evaluation
      description: |-
        Update an Evaluation.

        Update the setup of an Evaluation by specifying the Dataset, Evaluatees, and Evaluators.
      operationId: update_evaluations__id__patch
      parameters:
        - description: Unique identifier for Evaluation.
          required: true
          schema:
            type: string
            title: Evaluation ID
            description: Unique identifier for Evaluation.
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEvaluationRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluationResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /evaluations/{id}/status:
    patch:
      tags:
        - Evaluations
      summary: Update Status
      description: |-
        Update the status of an Evaluation.

        Can be used to cancel a running Evaluation, or mark an Evaluation that uses external or human evaluators
        as completed.
      operationId: update_status_evaluations__id__status_patch
      parameters:
        - description: Unique identifier for Evaluation.
          required: true
          schema:
            type: string
            title: Evaluation ID
            description: Unique identifier for Evaluation.
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Body_update_status_evaluations__id__status_patch"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluationResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /evaluations/{id}/stats:
    get:
      tags:
        - Evaluations
      summary: Get Evaluation Stats
      description: |-
        Get Evaluation Stats.

        Retrieve aggregate stats for the specified Evaluation.
        This includes the number of generated Logs for every evaluatee and Evaluator metrics
        (such as the mean and percentiles for numeric Evaluators for every evaluatee).
      operationId: get_stats_evaluations__id__stats_get
      parameters:
        - description: Unique identifier for Evaluation.
          required: true
          schema:
            type: string
            title: Evaluation ID
            description: Unique identifier for Evaluation.
          name: id
          in: path
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluationStats"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /evaluations/{id}/logs:
    get:
      tags:
        - Evaluations
      summary: Get Logs
      description: |-
        Get Logs by Evaluation ID.

        Each Evaluation Log corresponds to a (Datapoint, Evaluated Version) pair.
        It has an optional generated Log and a list of Evaluator Logs.
      operationId: get_logs_evaluations__id__logs_get
      parameters:
        - description: String ID of evaluation. Starts with `ev_` or `evr_`.
          required: true
          schema:
            type: string
            title: Evaluation ID
            description: String ID of evaluation. Starts with `ev_` or `evr_`.
          name: id
          in: path
        - description: Page number for pagination.
          required: false
          schema:
            type: integer
            minimum: 1.0
            title: Page number
            description: Page number for pagination.
            default: 1
          name: page
          in: query
        - description: Page size for pagination. Number of Logs to fetch.
          required: false
          schema:
            type: integer
            minimum: 0.0
            title: Page size
            description: Page size for pagination. Number of Logs to fetch.
            default: 10
          name: size
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedData_EvaluationReportLogResponse_"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /evaluators:
    get:
      tags:
        - Evaluators
      summary: "List "
      description: Get a list of Evaluators.
      operationId: list__evaluators_get
      parameters:
        - description: Page offset for pagination.
          required: false
          schema:
            type: integer
            minimum: 1.0
            title: Page index
            description: Page offset for pagination.
            default: 1
          name: page
          in: query
        - description: Page size for pagination. Number of Evaluators to fetch.
          required: false
          schema:
            type: integer
            title: Page size
            description: Page size for pagination. Number of Evaluators to fetch.
            default: 10
          name: size
          in: query
        - description: Case-insensitive filter for Evaluator name.
          required: false
          schema:
            type: string
            title: Evaluator name filter
            description: Case-insensitive filter for Evaluator name.
          name: name
          in: query
        - description: Case-insensitive filter for users in the Evaluator. This filter matches against both email address and name of users.
          required: false
          schema:
            type: string
            title: User filter
            description: Case-insensitive filter for users in the Evaluator. This filter matches against both email address and name of users.
          name: user_filter
          in: query
        - description: Field to sort Evaluators by
          required: false
          schema:
            allOf:
              - $ref: "#/components/schemas/ProjectSortBy"
            title: Sort by
            description: Field to sort Evaluators by
            default: created_at
          name: sort_by
          in: query
        - description: Direction to sort by.
          required: false
          schema:
            allOf:
              - $ref: "#/components/schemas/SortOrder"
            title: Sort order
            description: Direction to sort by.
            default: desc
          name: order
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListEvaluators"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    post:
      tags:
        - Evaluators
      summary: Upsert
      description: |-
        Create an Evaluator or update it with a new version if it already exists.

        Evaluators are identified by the `ID` or their `path`. The spec provided determines the version of the Evaluator.

        If you provide a commit message, then the new version will be committed;
        otherwise it will be uncommitted. If you try to commit an already committed version,
        an exception will be raised.
      operationId: upsert_evaluators_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/src__external__app__models__v5__evaluators__EvaluatorRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluatorResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /evaluators/{id}:
    get:
      tags:
        - Evaluators
      summary: Get
      description: |-
        Retrieve the Evaluator with the given ID.

        By default, the deployed version of the Evaluator is returned. Use the query parameters
        `version_id` or `environment` to target a specific version of the Evaluator.
      operationId: get_evaluators__id__get
      parameters:
        - description: Unique identifier for Evaluator.
          required: true
          schema:
            type: string
            title: Evaluator ID
            description: Unique identifier for Evaluator.
          name: id
          in: path
        - description: A specific Version ID of the Evaluator to retrieve.
          required: false
          schema:
            type: string
            title: Version ID
            description: A specific Version ID of the Evaluator to retrieve.
          name: version_id
          in: query
        - description: Name of the Environment to retrieve a deployed Version from.
          required: false
          schema:
            type: string
            title: Environment
            description: Name of the Environment to retrieve a deployed Version from.
          name: environment
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluatorResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    delete:
      tags:
        - Evaluators
      summary: Delete
      description: Delete the Evaluator with the given ID.
      operationId: delete_evaluators__id__delete
      parameters:
        - description: Unique identifier for Evaluator.
          required: true
          schema:
            type: string
            title: Evaluator ID
            description: Unique identifier for Evaluator.
          name: id
          in: path
      responses:
        "204":
          description: Successful Response
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    patch:
      tags:
        - Evaluators
      summary: Move
      description: Move the Evaluator to a different path or change the name.
      operationId: move_evaluators__id__patch
      parameters:
        - description: Unique identifier for Evaluator.
          required: true
          schema:
            type: string
            title: Evaluator ID
            description: Unique identifier for Evaluator.
          name: id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateEvaluatorRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluatorResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /evaluators/{id}/versions:
    get:
      tags:
        - Evaluators
      summary: List Versions
      description: Get a list of all the versions of an Evaluator.
      operationId: list_versions_evaluators__id__versions_get
      parameters:
        - description: Unique identifier for the Evaluator.
          required: true
          schema:
            type: string
            title: Prompt ID
            description: Unique identifier for the Evaluator.
          name: id
          in: path
        - description: "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned."
          required: false
          schema:
            allOf:
              - $ref: "#/components/schemas/VersionStatus"
            description: "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned."
          name: status
          in: query
        - description: Whether to include Evaluator aggregate results for the versions in the response
          required: false
          schema:
            type: boolean
            title: Evaluator Aggregates
            description: Whether to include Evaluator aggregate results for the versions in the response
          name: evaluator_aggregates
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListEvaluators"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /evaluators/{id}/versions/{version_id}/commit:
    post:
      tags:
        - Evaluators
      summary: Commit
      description: Commit the Evaluator Version with the given ID.
      operationId: commit_evaluators__id__versions__version_id__commit_post
      parameters:
        - description: Unique identifier for Prompt.
          required: true
          schema:
            type: string
            title: Evaluator ID
            description: Unique identifier for Prompt.
          name: id
          in: path
        - description: Unique identifier for the specific version of the Evaluator.
          required: true
          schema:
            type: string
            title: Version ID
            description: Unique identifier for the specific version of the Evaluator.
          name: version_id
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommitRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluatorResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /evaluators/{id}/environments/{environment_id}:
    post:
      tags:
        - Evaluators
      summary: Set Deployment
      description: |-
        Deploy Evaluator to an Environment.

        Set the deployed version for the specified Environment. This Evaluator
        will be used for calls made to the Evaluator in this Environment.
      operationId: set_deployment_evaluators__id__environments__environment_id__post
      parameters:
        - description: Unique identifier for Evaluator.
          required: true
          schema:
            type: string
            title: Evaluator ID
            description: Unique identifier for Evaluator.
          name: id
          in: path
        - description: Unique identifier for the Environment to deploy the Version to.
          required: true
          schema:
            type: string
            title: Environment ID
            description: Unique identifier for the Environment to deploy the Version to.
          name: environment_id
          in: path
        - description: Unique identifier for the specific version of the Evaluator.
          required: true
          schema:
            type: string
            title: Version ID
            description: Unique identifier for the specific version of the Evaluator.
          name: version_id
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluatorResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    delete:
      tags:
        - Evaluators
      summary: Remove Deployment
      description: |-
        Remove deployed Evaluator from the Environment.

        Remove the deployed version for the specified Environment. This Evaluator
        will no longer be used for calls made to the Evaluator in this Environment.
      operationId: remove_deployment_evaluators__id__environments__environment_id__delete
      parameters:
        - description: Unique identifier for Evaluator.
          required: true
          schema:
            type: string
            title: Evaluator ID
            description: Unique identifier for Evaluator.
          name: id
          in: path
        - description: Unique identifier for the Environment to remove the deployment from.
          required: true
          schema:
            type: string
            title: Environment ID
            description: Unique identifier for the Environment to remove the deployment from.
          name: environment_id
          in: path
      responses:
        "204":
          description: Successful Response
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /evaluators/{id}/environments:
    get:
      tags:
        - Evaluators
      summary: List Environments
      description: List all Environments and their deployed versions for the Evaluator.
      operationId: list_environments_evaluators__id__environments_get
      parameters:
        - description: Unique identifier for Evaluator.
          required: true
          schema:
            type: string
            title: Evaluator ID
            description: Unique identifier for Evaluator.
          name: id
          in: path
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/FileEnvironmentResponse"
                type: array
                title: Response List Environments Evaluators  Id  Environments Get
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /logs:
    get:
      tags:
        - Logs
      summary: "List "
      description: List Logs.
      operationId: list__logs_get
      parameters:
        - description: Unique identifier for the File to list Logs for.
          required: true
          schema:
            type: string
            title: File ID
            description: Unique identifier for the File to list Logs for.
          name: file_id
          in: query
        - description: Page number for pagination.
          required: false
          schema:
            type: integer
            minimum: 1.0
            title: Page number
            description: Page number for pagination.
            default: 1
          name: page
          in: query
        - description: Page size for pagination. Number of Logs to fetch.
          required: false
          schema:
            type: integer
            minimum: 0.0
            title: Page size
            description: Page size for pagination. Number of Logs to fetch.
            default: 10
          name: size
          in: query
        - description: If provided, only Logs belonging to the specified Version will be returned.
          required: false
          schema:
            type: string
            title: Version ID
            description: If provided, only Logs belonging to the specified Version will be returned.
          name: version_id
          in: query
        - description: If provided, only Logs belonging to Versions with the specified status will be returned.
          required: false
          schema:
            allOf:
              - $ref: "#/components/schemas/VersionStatus"
            title: Version status
            description: If provided, only Logs belonging to Versions with the specified status will be returned.
          name: version_status
          in: query
        - description: If provided, only Logs that contain the provided string in its inputs and output will be returned.
          required: false
          schema:
            type: string
            title: Search
            description: If provided, only Logs that contain the provided string in its inputs and output will be returned.
          name: search
          in: query
        - description: If provided, only Logs that contain the provided string in its metadata will be returned.
          required: false
          schema:
            type: string
            title: Metadata search
            description: If provided, only Logs that contain the provided string in its metadata will be returned.
          name: metadata_search
          in: query
        - description: If provided, only Logs created after the specified date will be returned.
          required: false
          schema:
            type: string
            format: date-time
            title: Start date
            description: If provided, only Logs created after the specified date will be returned.
          name: start_date
          in: query
        - description: If provided, only Logs created before the specified date will be returned.
          required: false
          schema:
            type: string
            format: date-time
            title: End date
            description: If provided, only Logs created before the specified date will be returned.
          name: end_date
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedData_PromptLogResponse_"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    delete:
      tags:
        - Logs
      summary: Delete
      description: Delete Logs with the given IDs.
      operationId: Logs_delete
      parameters:
        - description: Unique identifiers for the Logs to delete.
          required: true
          schema:
            items:
              type: string
            type: array
            title: Log IDs
            description: Unique identifiers for the Logs to delete.
          name: id
          in: query
      responses:
        "204":
          description: Successful Response
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /logs/{id}:
    get:
      tags:
        - Logs
      summary: Get Log
      description: Retrieve the Log with the given ID.
      operationId: get_logs__id__get
      parameters:
        - description: Unique identifier for Log.
          required: true
          schema:
            type: string
            title: Log ID
            description: Unique identifier for Log.
          name: id
          in: path
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PromptLogResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /sessions/{id}:
    get:
      tags:
        - Sessions
      summary: Get
      description: Retrieve the Session with the given ID.
      operationId: get_sessions__id__get
      parameters:
        - description: Unique identifier for Session.
          required: true
          schema:
            type: string
            title: Session ID
            description: Unique identifier for Session.
          name: id
          in: path
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
    delete:
      tags:
        - Sessions
      summary: Delete
      description: Delete the Session with the given ID.
      operationId: delete_sessions__id__delete
      parameters:
        - description: Unique identifier for Session.
          required: true
          schema:
            type: string
            title: Session ID
            description: Unique identifier for Session.
          name: id
          in: path
      responses:
        "204":
          description: Successful Response
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
  /sessions:
    get:
      tags:
        - Sessions
      summary: "List "
      description: Get a list of Sessions.
      operationId: list__sessions_get
      parameters:
        - description: Unique identifier for File to return Sessions for. Sessions that contain any Logs associated to this File will be returned.
          required: false
          schema:
            type: string
            title: File ID
            description: Unique identifier for File to return Sessions for. Sessions that contain any Logs associated to this File will be returned.
          name: file_id
          in: query
        - description: Unique identifier for Version to return Sessions for. Sessions that contain any Logs associated to this Version will be returned.
          required: false
          schema:
            type: string
            title: Version ID
            description: Unique identifier for Version to return Sessions for. Sessions that contain any Logs associated to this Version will be returned.
          name: version_id
          in: query
        - description: Page number for pagination.
          required: false
          schema:
            type: integer
            minimum: 1.0
            title: Page
            description: Page number for pagination.
            default: 1
          name: page
          in: query
        - description: Page size for pagination. Number of Sessions to fetch.
          required: false
          schema:
            type: integer
            minimum: 0.0
            title: Size
            description: Page size for pagination. Number of Sessions to fetch.
            default: 10
          name: size
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedData_SessionResponse_"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
      security:
        - APIKeyHeader: []
components:
  schemas:
    AgentConfigResponse:
      properties:
        id:
          type: string
          title: Config ID
          description: String ID of config. Starts with `config_`.
        other:
          type: object
          title: Other parameters
          description: Other parameters that define the config.
        type:
          type: string
          enum:
            - agent
          title: Type
        created_by:
          allOf:
            - $ref: "#/components/schemas/src__external__app__models__v4__orgs__base_models__UserResponse"
          title: Created by
          description: The user who created the config.
        status:
          type: string
          title: Status
          description: Whether the config is committed or not.
        name:
          type: string
          title: Config name
          description: Name of config.
        description:
          type: string
          title: Config description
          description: Description of config.
        agent_class:
          type: string
          title: Agent class
          description: Class of the agent.
        tools:
          items:
            $ref: "#/components/schemas/ToolConfigRequest"
          type: array
          title: Tools
          description: Tools associated with the agent.
          default: []
        model_config:
          allOf:
            - $ref: "#/components/schemas/ModelConfigRequest"
          title: Model config
          description: Model config associated with the agent.
      type: object
      required:
        - id
        - type
        - status
        - name
        - agent_class
        - model_config
      title: AgentConfigResponse
    BaseMetricResponse:
      properties:
        id:
          type: string
          title: Metric ID
          description: ID of the metric. Starts with 'metric_'.
        name:
          type: string
          title: Metric name
          description: The name of the metric.
        description:
          type: string
          title: Metric description
          description: A description of what the metric measures.
        code:
          type: string
          title: Metric code
          description: Python code used to calculate a metric value on each logged datapoint.
        default:
          type: boolean
          title: Metric default flag
          description: Whether the metric is a global default metric. Metrics with this flag enabled cannot be deleted or modified.
        active:
          type: boolean
          title: Metric active flag
          description: If enabled, the metric is calculated for every logged datapoint.
        created_at:
          type: string
          format: date-time
          title: Created At
        updated_at:
          type: string
          format: date-time
          title: Updated At
      type: object
      required:
        - id
        - name
        - description
        - code
        - default
        - active
        - created_at
        - updated_at
      title: BaseMetricResponse
    Body_update_status_evaluations__id__status_patch:
      properties:
        status:
          $ref: "#/components/schemas/EvaluationStatus"
      type: object
      required:
        - status
      title: Body_update_status_evaluations__id__status_patch
    Body_upload_csv_datasets__id__datapoints_csv_post:
      properties:
        file:
          type: string
          format: binary
          title: File
          description: A CSV file containing Datapoints to be added to the Dataset.
        commit_message:
          type: string
          title: Commit Message
          description: Commit message for the new Dataset version.
      type: object
      required:
        - file
        - commit_message
      title: Body_upload_csv_datasets__id__datapoints_csv_post
    BooleanEvaluatorVersionStats:
      properties:
        evaluator_version_id:
          type: string
          title: Evaluator Version ID
          description: Unique identifier for the Evaluator Version.
        total_logs:
          type: integer
          title: Total Evaluator Logs
          description: The total number of Logs generated by this Evaluator Version on the Evaluated Version's Logs. This includes Nulls and Errors.
        num_judgments:
          type: integer
          title: Number of Judgments
          description: The total number of Evaluator judgments for this Evaluator Version. This excludes Nulls and Errors.
        num_nulls:
          type: integer
          title: Number of Nulls
          description: The total number of null judgments (i.e. abstentions) for this Evaluator Version.
        num_errors:
          type: integer
          title: Number of Errors
          description: The total number of errored Evaluators for this Evaluator Version.
        num_true:
          type: integer
          title: Number of True
          description: The total number of `True` judgments for this Evaluator Version.
        num_false:
          type: integer
          title: Number of False
          description: The total number of `False` judgments for this Evaluator Version.
      type: object
      required:
        - evaluator_version_id
        - total_logs
        - num_judgments
        - num_nulls
        - num_errors
        - num_true
        - num_false
      title: BooleanEvaluatorVersionStats
      description: |-
        Base attributes for stats for an Evaluator Version-Evaluated Version pair
        in the Evaluation Report.
    CategoricalFeedbackLabel:
      properties:
        value:
          type: string
          title: Label value
        sentiment:
          allOf:
            - $ref: "#/components/schemas/LabelSentiment"
          title: Feedback label sentiment
          description: Whether the feedback sentiment is positive or negative.
        status:
          allOf:
            - $ref: "#/components/schemas/FeedbackLabelStatus"
          title: Feedback label status
          description: Whether the feedback label is active or inactive.
      type: object
      required:
        - value
        - sentiment
        - status
      title: CategoricalFeedbackLabel
    ChatMessage:
      properties:
        content:
          anyOf:
            - type: string
            - items:
                anyOf:
                  - $ref: "#/components/schemas/TextChatContent"
                  - $ref: "#/components/schemas/ImageChatContent"
              type: array
          title: Content
          description: The content of the message.
          nullable: true
        name:
          type: string
          title: Name
          description: Optional name of the message author.
          nullable: true
        tool_call_id:
          type: string
          title: Tool call id
          description: Tool call that this message is responding to.
          nullable: true
        role:
          allOf:
            - $ref: "#/components/schemas/ChatRole"
          title: Role
          description: Role of the message author.
        tool_calls:
          items:
            $ref: "#/components/schemas/ToolCall"
          type: array
          title: Tool calls
          description: A list of tool calls requested by the assistant.
          nullable: true
      type: object
      required:
        - role
      title: ChatMessage
    ChatMessageWithToolCall:
      properties:
        content:
          anyOf:
            - type: string
            - items:
                anyOf:
                  - $ref: "#/components/schemas/TextChatContent"
                  - $ref: "#/components/schemas/ImageChatContent"
              type: array
          title: Content
          description: The content of the message.
          nullable: true
        name:
          type: string
          title: Name
          description: Optional name of the message author.
          nullable: true
        tool_call_id:
          type: string
          title: Tool call id
          description: Tool call that this message is responding to.
          nullable: true
        role:
          allOf:
            - $ref: "#/components/schemas/ChatRole"
          title: Role
          description: Role of the message author.
        tool_calls:
          items:
            $ref: "#/components/schemas/ToolCall"
          type: array
          title: Tool calls
          description: A list of tool calls requested by the assistant.
          nullable: true
        tool_call:
          allOf:
            - $ref: "#/components/schemas/FunctionTool"
          title: Tool call
          description: "NB: Deprecated in favour of tool_calls. A tool call requested by the assistant."
          deprecated: true
          nullable: true
      type: object
      required:
        - role
      title: ChatMessageWithToolCall
    ChatRole:
      type: string
      enum:
        - user
        - assistant
        - system
        - tool
      title: ChatRole
      description: An enumeration.
    CodeEvaluatorRequest:
      properties:
        arguments_type:
          allOf:
            - $ref: "#/components/schemas/EvaluatorArgumentsType"
          title: Arguments type
          description: Whether this evaluator is target-free or target-required.
        return_type:
          allOf:
            - $ref: "#/components/schemas/EvaluatorReturnTypeEnum"
          title: Return type
          description: The type of the return value of the evaluator.
        evaluator_type:
          type: string
          enum:
            - python
          title: Evaluator type
          description: The type of the evaluator.
          default: python
        code:
          type: string
          title: Code
          description: The code for the evaluator. This code will be executed in a sandboxed environment.
      type: object
      required:
        - arguments_type
        - return_type
      title: CodeEvaluatorRequest
    CommitRequest:
      properties:
        commit_message:
          type: string
          title: Commit message
          description: Message describing the changes made.
      type: object
      required:
        - commit_message
      title: CommitRequest
    ConfigResponse:
      oneOf:
        - $ref: "#/components/schemas/ModelConfigResponse"
        - $ref: "#/components/schemas/ToolConfigResponse"
        - $ref: "#/components/schemas/EvaluatorConfigResponse"
        - $ref: "#/components/schemas/AgentConfigResponse"
        - $ref: "#/components/schemas/GenericConfigResponse"
      title: ConfigResponse
      discriminator:
        propertyName: type
        mapping:
          model: "#/components/schemas/ModelConfigResponse"
          tool: "#/components/schemas/ToolConfigResponse"
          evaluator: "#/components/schemas/EvaluatorConfigResponse"
          agent: "#/components/schemas/AgentConfigResponse"
          generic: "#/components/schemas/GenericConfigResponse"
    CreateDatapointRequest:
      properties:
        inputs:
          additionalProperties:
            type: string
          type: object
          title: Inputs
          description: The inputs to the prompt template.
          default: {}
        messages:
          items:
            $ref: "#/components/schemas/ChatMessage"
          type: array
          title: Chat messages
          description: List of chat messages to provide to the model.
        target:
          additionalProperties:
            anyOf:
              - type: string
              - type: integer
              - type: number
              - type: boolean
              - type: object
              - items: {}
                type: array
          type: object
          title: Target
          description: Object with criteria necessary to evaluate generations with this Datapoint. This is passed in as an argument to Evaluators when used in an Evaluation.
      type: object
      title: CreateDatapointRequest
    CreateDirectoryRequest:
      properties:
        name:
          type: string
          title: Directory name
          description: Name of the directory to create.
        parent_id:
          type: string
          title: Parent directory ID
          description: ID of the parent directory. Starts with `dir_`.
      type: object
      required:
        - name
        - parent_id
      title: CreateDirectoryRequest
    CreateEvaluationRequest:
      properties:
        dataset:
          allOf:
            - $ref: "#/components/schemas/src__external__app__models__v5__evaluations__DatasetRequest"
          title: Dataset
          description: The Dataset Version to use in this Evaluation.
        evaluatees:
          items:
            $ref: "#/components/schemas/EvaluateeRequest"
          type: array
          minItems: 1
          title: Evaluated Version IDs
          description: Unique identifiers for the Prompt/Tool Versions to include in the Evaluation Report.
        evaluators:
          items:
            $ref: "#/components/schemas/src__external__app__models__v5__evaluations__EvaluatorRequest"
          type: array
          title: Evaluators
          description: The Evaluators used to evaluate.
      type: object
      required:
        - dataset
        - evaluatees
        - evaluators
      title: CreateEvaluationRequest
      description: |-
        Request model for creating an Evaluation.

        Evaluation benchmark your Prompt/Tool Versions. With the Datapoints in a Dataset Version,
        Logs corresponding to the Datapoint and each Evaluated Version are evaluated by the specified Evaluator Versions.
        Aggregated statistics are then calculated and presented in the Evaluation.
    CreatePromptLogResponse:
      properties:
        id:
          type: string
          title: Log ID
          description: String ID of log.
        prompt_id:
          type: string
          title: Prompt ID
          description: ID of the Prompt the log belongs to.
        version_id:
          type: string
          title: Prompt Version ID
          description: ID of the specific version of the Prompt.
        session_id:
          type: string
          title: Session ID
          description: String ID of session the log belongs to.
      type: object
      required:
        - id
        - prompt_id
        - version_id
      title: CreatePromptLogResponse
    CreateToolLogResponse:
      properties:
        id:
          type: string
          title: Log ID
          description: String ID of log.
        tool_id:
          type: string
          title: Tool ID
          description: ID of the Tool the log belongs to.
        version_id:
          type: string
          title: Tool Version ID
          description: ID of the specific version of the Tool.
        session_id:
          type: string
          title: Session ID
          description: String ID of session the log belongs to.
      type: object
      required:
        - id
        - tool_id
        - version_id
      title: CreateToolLogResponse
    DashboardConfiguration:
      properties:
        time_unit:
          $ref: "#/components/schemas/TimeUnit"
        time_range_days:
          type: integer
          title: Time Range Days
        model_config_ids:
          items:
            type: string
          type: array
          title: Model Config Ids
      type: object
      required:
        - time_unit
        - time_range_days
        - model_config_ids
      title: DashboardConfiguration
    DatapointResponse:
      properties:
        inputs:
          additionalProperties:
            type: string
          type: object
          title: Inputs
          description: The inputs to the prompt template.
          default: {}
        messages:
          items:
            $ref: "#/components/schemas/ChatMessage"
          type: array
          title: Chat messages
          description: List of chat messages to provide to the model.
        target:
          additionalProperties:
            anyOf:
              - type: string
              - type: integer
              - type: number
              - type: boolean
              - type: object
              - items: {}
                type: array
          type: object
          title: Target
          description: Object with criteria necessary to evaluate generations with this Datapoint. This is passed in as an argument to Evaluators when used in an Evaluation.
        id:
          type: string
          title: Datapoint ID
          description: Unique identifier for the Datapoint. Starts with `dp_`.
      type: object
      required:
        - id
      title: DatapointResponse
    DatasetResponse:
      properties:
        path:
          type: string
          title: Dataset path
          description: Path of the Dataset, including the name, which is used as a unique identifier.
        id:
          type: string
          title: Dataset ID
          description: Unique identifier for the Dataset. Starts with `ds_`.
        name:
          type: string
          title: Dataset name
          description: Name of the Dataset, which is used as a unique identifier.
        version_id:
          type: string
          title: Version ID
          description: Unique identifier for the specific Dataset Version. If no query params provided, the default deployed Dataset Version is returned. Starts with `dsv_`.
        type:
          type: string
          enum:
            - dataset
          title: Type
          default: dataset
        environments:
          items:
            $ref: "#/components/schemas/EnvironmentResponse"
          type: array
          title: Environments
          description: The list of environments the Dataset Version is deployed to.
        created_at:
          type: string
          format: date-time
          title: Created At
        updated_at:
          type: string
          format: date-time
          title: Updated At
        created_by:
          allOf:
            - $ref: "#/components/schemas/src__external__app__models__v5__users__UserResponse"
          title: Created by
          description: The user who created the Dataset.
        status:
          allOf:
            - $ref: "#/components/schemas/VersionStatus"
          title: Status
          description: The status of the Dataset Version.
        last_used_at:
          type: string
          format: date-time
          title: Last Used At
        commit_message:
          type: string
          title: Commit message
          description: Message describing the changes made. If provided, a committed version of the Dataset is created. Otherwise, an uncommitted version is created.
        datapoints_count:
          type: integer
          title: Datapoints count
          description: The number of Datapoints in this Dataset version.
        datapoints:
          items:
            $ref: "#/components/schemas/DatapointResponse"
          type: array
          title: Datapoints
          description: The list of Datapoints in this Dataset version. Only provided if explicitly requested.
      type: object
      required:
        - path
        - id
        - name
        - version_id
        - created_at
        - updated_at
        - status
        - last_used_at
        - datapoints_count
      title: DatasetResponse
      description: |-
        Base type that all File Responses should inherit from.

        Attributes defined here are common to all File Responses and should be overridden
        in the inheriting classes with documentation and appropriate Field definitions.
    DirectoryResponse:
      properties:
        name:
          type: string
          title: Directory name
          description: Name of the directory to create.
        parent_id:
          type: string
          title: Parent directory ID
          description: ID of the parent directory. Will be `None` if the directory is the root directory. Starts with `dir_`.
        id:
          type: string
          title: Directory ID
          description: String ID of directory. Starts with `dir_`.
        created_at:
          type: string
          format: date-time
          title: Created At
        updated_at:
          type: string
          format: date-time
          title: Updated At
      type: object
      required:
        - name
        - id
        - created_at
        - updated_at
      title: DirectoryResponse
    DirectoryWithParentsAndChildrenResponse:
      properties:
        name:
          type: string
          title: Directory name
          description: Name of the directory to create.
        parent_id:
          type: string
          title: Parent directory ID
          description: ID of the parent directory. Will be `None` if the directory is the root directory. Starts with `dir_`.
        id:
          type: string
          title: Directory ID
          description: String ID of directory. Starts with `dir_`.
        created_at:
          type: string
          format: date-time
          title: Created At
        updated_at:
          type: string
          format: date-time
          title: Updated At
        subdirectories:
          items:
            $ref: "#/components/schemas/DirectoryResponse"
          type: array
          title: Subdirectories
          description: List of subdirectories in the directory.
        files:
          items:
            anyOf:
              - $ref: "#/components/schemas/PromptResponse"
              - $ref: "#/components/schemas/src__external__app__models__v5__tools__ToolResponse"
              - $ref: "#/components/schemas/EvaluatorResponse"
              - $ref: "#/components/schemas/DatasetResponse"
          type: array
          title: Files
          description: List of files in the directory.
        parents:
          items:
            $ref: "#/components/schemas/DirectoryResponse"
          type: array
          title: Parent directories
          description: List of parent directories of the directory.
      type: object
      required:
        - name
        - id
        - created_at
        - updated_at
        - subdirectories
        - files
        - parents
      title: DirectoryWithParentsAndChildrenResponse
    EnvironmentResponse:
      properties:
        id:
          type: string
          title: Id
        created_at:
          type: string
          format: date-time
          title: Created At
        name:
          type: string
          title: Name
        tag:
          $ref: "#/components/schemas/EnvironmentTag"
      type: object
      required:
        - id
        - created_at
        - name
        - tag
      title: EnvironmentResponse
    EnvironmentTag:
      type: string
      enum:
        - default
        - other
      title: EnvironmentTag
      description: An enumeration.
    EvaluatedVersionResponse:
      anyOf:
        - $ref: "#/components/schemas/PromptResponse"
        - $ref: "#/components/schemas/src__external__app__models__v5__tools__ToolResponse"
        - $ref: "#/components/schemas/EvaluatorResponse"
      title: EvaluatedVersionResponse
    EvaluateeRequest:
      properties:
        version_id:
          type: string
          title: Prompt/Tool Version ID
          description: Unique identifier for the Prompt/Tool Version to include in the Evaluation Report. Starts with `pv_` for Prompts and `tv_` for Tools.
        batch_id:
          type: string
          title: Batch ID
          description: Unique identifier for the batch of Logs to include in the Evaluation Report.
        orchestrated:
          type: boolean
          title: Humanloop Orchestrated
          description: Whether the Prompt/Tool is orchestrated by Humanloop. Default is `True`. If `False`, a log for the Prompt/Tool should be submitted by the user via the API.
          default: true
      type: object
      required:
        - version_id
      title: EvaluateeRequest
    EvaluateeResponse:
      properties:
        version:
          $ref: "#/components/schemas/EvaluatedVersionResponse"
        batch_id:
          type: string
          title: Batch ID
          description: "Unique identifier for the batch of Logs to include in the Evaluation Report. "
        orchestrated:
          type: boolean
          title: Humanloop Orchestrated
          description: Whether the Prompt/Tool is orchestrated by Humanloop. Default is `True`. If `False`, a log for the Prompt/Tool should be submitted by the user via the API.
      type: object
      required:
        - version
        - orchestrated
      title: EvaluateeResponse
    EvaluationEvaluatorResponse:
      properties:
        version:
          $ref: "#/components/schemas/EvaluatorResponse"
        orchestrated:
          type: boolean
          title: Humanloop Orchestrated
          description: Whether the Evaluator is orchestrated by Humanloop. Default is `True`. If `False`, a log for the Evaluator should be submitted by the user via the API.
      type: object
      required:
        - version
        - orchestrated
      title: EvaluationEvaluatorResponse
    EvaluationReportLogResponse:
      properties:
        evaluated_version:
          $ref: "#/components/schemas/EvaluatedVersionResponse"
        datapoint:
          $ref: "#/components/schemas/DatapointResponse"
        log:
          $ref: "#/components/schemas/LogResponse"
        evaluator_logs:
          items:
            $ref: "#/components/schemas/LogResponse"
          type: array
          title: Evaluator Logs
      type: object
      required:
        - evaluated_version
        - datapoint
        - evaluator_logs
      title: EvaluationReportLogResponse
    EvaluationResponse:
      properties:
        id:
          type: string
          title: Evaluation ID
          description: Unique identifier for the Evaluation. Starts with `evr`.
        dataset:
          allOf:
            - $ref: "#/components/schemas/DatasetResponse"
          title: Dataset
          description: The Dataset Version used in the Evaluation.
        evaluatees:
          items:
            $ref: "#/components/schemas/EvaluateeResponse"
          type: array
          title: Evaluated Versions
          description: The Prompt/Tool Versions included in the Evaluation.
        evaluators:
          items:
            $ref: "#/components/schemas/EvaluationEvaluatorResponse"
          type: array
          title: Evaluator
          description: The Evaluator Versions used to evaluate.
        status:
          allOf:
            - $ref: "#/components/schemas/EvaluationStatus"
          title: Status
          description: |
            The current status of the Evaluation.

            - `"pending"`: The Evaluation has been created but is not actively being worked on by Humanloop.
            - `"running"`: Humanloop is checking for any missing Logs and Evaluator Logs, and will generate them where appropriate.
            - `"completed"`: All Logs an Evaluator Logs have been generated.
            - `"cancelled"`: The Evaluation has been cancelled by the user. Humanloop will stop generating Logs and Evaluator Logs.
        created_at:
          type: string
          format: date-time
          title: Created At
        created_by:
          $ref: "#/components/schemas/src__external__app__models__v5__users__UserResponse"
        updated_at:
          type: string
          format: date-time
          title: Updated At
      type: object
      required:
        - id
        - dataset
        - evaluatees
        - evaluators
        - status
        - created_at
        - updated_at
      title: EvaluationResponse
    EvaluationResultResponse:
      properties:
        id:
          type: string
          title: Id
        evaluator_id:
          type: string
          title: Evaluator Id
        evaluator_version_id:
          type: string
          title: Evaluator Version Id
        evaluation_id:
          type: string
          title: Evaluation Id
        log_id:
          type: string
          title: Log Id
        log:
          $ref: "#/components/schemas/LogResponse"
        version_id:
          type: string
          title: Version Id
        version:
          title: Version
        value:
          anyOf:
            - type: boolean
            - type: number
          title: Value
        error:
          type: string
          title: Error
        updated_at:
          type: string
          format: date-time
          title: Updated At
        created_at:
          type: string
          format: date-time
          title: Created At
        llm_evaluator_log:
          $ref: "#/components/schemas/LogResponse"
      type: object
      required:
        - id
        - evaluator_id
        - evaluator_version_id
        - log_id
        - updated_at
        - created_at
      title: EvaluationResultResponse
    EvaluationStats:
      properties:
        overall_stats:
          allOf:
            - $ref: "#/components/schemas/OverallStats"
          title: Overall Stats
          description: Stats for the Evaluation Report as a whole.
        version_stats:
          items:
            $ref: "#/components/schemas/VersionStats"
          type: array
          title: Version Stats
          description: Stats for each Evaluated Version in the Evaluation Report.
      type: object
      required:
        - overall_stats
        - version_stats
      title: EvaluationStats
    EvaluationStatus:
      type: string
      enum:
        - pending
        - running
        - completed
        - cancelled
        - failed
      title: EvaluationStatus
      description: Status of an evaluation.
    EvaluatorActivationDeactivationRequest:
      properties:
        activate_evaluators:
          items:
            anyOf:
              - $ref: "#/components/schemas/MonitoringEvaluatorVersionRequest"
              - $ref: "#/components/schemas/MonitoringEvaluatorEnvironmentRequest"
          type: array
          title: Evaluators to activate
          description: Evaluators to activate on Monitoring. These will be automatically run on new Logs.
        deactivate_evaluators:
          items:
            anyOf:
              - $ref: "#/components/schemas/MonitoringEvaluatorVersionRequest"
              - $ref: "#/components/schemas/MonitoringEvaluatorEnvironmentRequest"
          type: array
          title: Evaluators to deactivate
          description: Evaluators to deactivate. These will not be run on new Logs.
      type: object
      title: EvaluatorActivationDeactivationRequest
    EvaluatorAggregate:
      properties:
        value:
          type: number
          title: Aggregated value
          description: The aggregated value of the evaluator.
        evaluator_id:
          type: string
          title: Evaluator ID
          description: ID of the evaluator.
        evaluator_version_id:
          type: string
          title: Evaluator version ID
          description: ID of the evaluator version.
        created_at:
          type: string
          format: date-time
          title: Created At
        updated_at:
          type: string
          format: date-time
          title: Updated At
      type: object
      required:
        - value
        - evaluator_id
        - evaluator_version_id
        - created_at
        - updated_at
      title: EvaluatorAggregate
    EvaluatorArgumentsType:
      type: string
      enum:
        - target_free
        - target_required
      title: EvaluatorArgumentsType
      description: Enum representing the possible argument types of an evaluator.
    EvaluatorConfigResponse:
      properties:
        id:
          type: string
          title: Config ID
          description: String ID of config. Starts with `config_`.
        other:
          type: object
          title: Other parameters
          description: Other parameters that define the config.
        type:
          type: string
          enum:
            - evaluator
          title: Type
        created_by:
          allOf:
            - $ref: "#/components/schemas/src__external__app__models__v4__orgs__base_models__UserResponse"
          title: Created by
          description: The user who created the config.
        status:
          type: string
          title: Status
          description: Whether the config is committed or not.
        name:
          type: string
          title: Config name
          description: Name of config.
        description:
          type: string
          title: Config description
          description: Description of config.
        evaluator_type:
          type: string
          title: Evaluator type
          description: Type of evaluator.
        model_config:
          allOf:
            - $ref: "#/components/schemas/ModelConfigResponse"
          title: Model config
          description: The model config defining the LLM evaluator.
        code:
          type: string
          title: Code
          description: The code for the evaluator. This code will be executed in a sandboxed environment.
        arguments_type:
          allOf:
            - $ref: "#/components/schemas/EvaluatorArgumentsType"
          title: Arguments type
          description: Whether this evaluator is target-free or target-required.
        return_type:
          allOf:
            - $ref: "#/components/schemas/EvaluatorReturnTypeEnum"
          title: Return type
          description: The type of the return value of the evaluator.
      type: object
      required:
        - id
        - type
        - status
        - name
        - evaluator_type
      title: EvaluatorConfigResponse
    EvaluatorResponse:
      properties:
        path:
          type: string
          title: Dataset path
          description: Path of the Dataset including the Dataset name, which is used as a unique identifier.
        id:
          type: string
          title: Evaluator ID
          description: Unique identifier for the Evaluator.
        name:
          type: string
          title: Prompt name
          description: Name of the Evaluator, which is used as a unique identifier.
        version_id:
          type: string
          title: Version ID
          description: Unique identifier for the specific Evaluator Version. If no query params provided, the default deployed Evaluator Version is returned.
        type:
          type: string
          enum:
            - evaluator
          title: Type
          default: evaluator
        environments:
          items:
            $ref: "#/components/schemas/EnvironmentResponse"
          type: array
          title: Environments
          description: The list of environments the Prompt Version is deployed to.
        created_at:
          type: string
          format: date-time
          title: Created At
        updated_at:
          type: string
          format: date-time
          title: Updated At
        created_by:
          allOf:
            - $ref: "#/components/schemas/src__external__app__models__v5__users__UserResponse"
          title: Created by
          description: The user who created the Prompt.
        status:
          $ref: "#/components/schemas/VersionStatus"
        last_used_at:
          type: string
          format: date-time
          title: Last Used At
        commit_message:
          type: string
          title: Commit message
          description: Message describing the changes made.
        spec:
          oneOf:
            - $ref: "#/components/schemas/LLMEvaluatorRequest"
            - $ref: "#/components/schemas/CodeEvaluatorRequest"
            - $ref: "#/components/schemas/HumanEvaluatorRequest"
            - $ref: "#/components/schemas/ExternalEvaluatorRequest"
          title: Spec
          discriminator:
            propertyName: evaluator_type
            mapping:
              llm: "#/components/schemas/LLMEvaluatorRequest"
              python: "#/components/schemas/CodeEvaluatorRequest"
              human: "#/components/schemas/HumanEvaluatorRequest"
              external: "#/components/schemas/ExternalEvaluatorRequest"
        version_logs_count:
          type: integer
          title: Number of logs for this version
          description: The number of logs that have been generated for this Prompt Version
        total_logs_count:
          type: integer
          title: Total number of logs across all versions
          description: The number of logs that have been generated across all Prompt Versions
        inputs:
          items:
            $ref: "#/components/schemas/InputResponse"
          type: array
          title: Prompt inputs
          description: Inputs associated to the Prompt. Inputs correspond to any of the variables used within the Prompt template.
        evaluators:
          items:
            $ref: "#/components/schemas/MonitoringEvaluatorResponse"
          type: array
          title: Monitoring Evaluators
          description: Evaluators that have been attached to this Prompt that are used for monitoring logs.
        evaluator_aggregates:
          items:
            $ref: "#/components/schemas/EvaluatorAggregate"
          type: array
          title: Evaluator aggregates
          description: Aggregation of Evaluator results for the Evaluator Version.
      type: object
      required:
        - path
        - id
        - name
        - version_id
        - created_at
        - updated_at
        - status
        - last_used_at
        - spec
        - version_logs_count
        - total_logs_count
        - inputs
      title: EvaluatorResponse
      description: Request model for creating a new Evaluator
    EvaluatorReturnTypeEnum:
      type: string
      enum:
        - boolean
        - number
      title: EvaluatorReturnTypeEnum
      description: Enum representing the possible return types of an evaluator.
    ExperimentResponse:
      properties:
        id:
          type: string
          title: Experiment ID
          description: String ID of experiment. Starts with `exp_`.
        file_id:
          type: string
          title: File ID
          description: String ID of file the experiment belongs to.
        name:
          type: string
          title: Experiment name
          description: Name of experiment.
        status:
          allOf:
            - $ref: "#/components/schemas/ExperimentStatus"
          title: Experiment status
          description: Status of experiment.
        versions:
          items:
            $ref: "#/components/schemas/ExperimentVersionResponse"
          type: array
          title: Experiment Versions
          description: List of Versions associated to the experiment.
        metric:
          allOf:
            - $ref: "#/components/schemas/BaseMetricResponse"
          title: Experiment metric
          description: Metric used as the experiment's objective.
        positive_labels:
          items:
            $ref: "#/components/schemas/PositiveLabel"
          type: array
          title: Positive labels
          description: Feedback labels to treat as positive user feedback. Used to monitor the performance of model configs in the experiment.
        created_at:
          type: string
          format: date-time
          title: Created At
        updated_at:
          type: string
          format: date-time
          title: Updated At
      type: object
      required:
        - id
        - file_id
        - name
        - status
        - metric
        - positive_labels
        - created_at
        - updated_at
      title: ExperimentResponse
    ExperimentStatus:
      type: string
      enum:
        - Initialized
        - In progress
      title: ExperimentStatus
      description: An enumeration.
    ExperimentVersionResponse:
      properties:
        mean:
          type: number
          title: Mean of experiment's metric
          description: The mean performance of the Version.
        spread:
          type: number
          title: Spread of experiment's metric
          description: The spread of performance of the Version.
        trials_count:
          type: integer
          title: Trials count
          description: Number of datapoints with feedback associated to the experiment.
        active:
          type: boolean
          title: Version active
          description: Whether the Version is active in the experiment. Only active model configs can be sampled from the experiment.
        id:
          type: string
          title: Version ID
          description: String ID of Version.
        commit_message:
          type: string
          title: Commit message
          description: Commit message of Version.
        version_id:
          type: string
          title: Version id
          description: Version of the Prompt or Tool.
        created_at:
          type: string
          format: date-time
          title: Created At
        updated_at:
          type: string
          format: date-time
          title: Updated At
      type: object
      required:
        - trials_count
        - active
        - id
        - version_id
        - created_at
        - updated_at
      title: ExperimentVersionResponse
    ExternalEvaluatorRequest:
      properties:
        arguments_type:
          allOf:
            - $ref: "#/components/schemas/EvaluatorArgumentsType"
          title: Arguments type
          description: Whether this evaluator is target-free or target-required.
        return_type:
          allOf:
            - $ref: "#/components/schemas/EvaluatorReturnTypeEnum"
          title: Return type
          description: The type of the return value of the evaluator.
        evaluator_type:
          type: string
          enum:
            - external
          title: Evaluator type
          description: The type of the evaluator.
          default: external
        metadata:
          type: object
          title: Metadata
          description: Metadata describing the external Evaluator.
      type: object
      required:
        - arguments_type
        - return_type
      title: ExternalEvaluatorRequest
    FeedbackClass:
      type: string
      enum:
        - select
        - multi_select
        - text
        - number
      title: FeedbackClass
      description: An enumeration.
    FeedbackLabelStatus:
      type: string
      enum:
        - unset
        - active
        - inactive
      title: FeedbackLabelStatus
      description: Controls whether the label is displayed in the UI.
    FeedbackResponse:
      properties:
        type:
          anyOf:
            - $ref: "#/components/schemas/src__external__app__models__v4__feedback__FeedbackType"
            - type: string
          title: Feedback type
          description: The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'.
        value:
          anyOf:
            - type: number
            - type: string
          title: Feedback value
          description: The feedback value to set. This would be the appropriate text for 'correction' or 'comment', or a label to apply for 'rating', 'action', or 'issue'.
        data_id:
          type: string
          title: Datapoint ID
          description: ID to associate the feedback to a previously logged datapoint.
        user:
          type: string
          title: User
          description: A unique identifier to who provided the feedback.
        created_at:
          type: string
          format: date-time
          title: Created at
          description: "User defined timestamp for when the feedback was created. "
        id:
          type: string
          title: Feedback ID
          description: String ID of user feedback. Starts with `ann_`, short for annotation.
      type: object
      required:
        - type
        - value
        - id
      title: FeedbackResponse
    FeedbackTypeModel:
      properties:
        type:
          anyOf:
            - $ref: "#/components/schemas/src__external__app__models__v5__feedback__FeedbackType"
            - type: string
          title: Feedback type
          description: The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'.
        values:
          items:
            $ref: "#/components/schemas/CategoricalFeedbackLabel"
          type: array
          title: Allowed values for categorical feedback types
          description: The allowed values for categorical feedback types. Not populated for `correction` and `comment`.
      type: object
      required:
        - type
      title: FeedbackTypeModel
    FeedbackTypes:
      items:
        $ref: "#/components/schemas/FeedbackTypeModel"
      type: array
      title: FeedbackTypes
    FileEnvironmentResponse:
      properties:
        id:
          type: string
          title: Id
        created_at:
          type: string
          format: date-time
          title: Created At
        name:
          type: string
          title: Name
        tag:
          $ref: "#/components/schemas/EnvironmentTag"
        file:
          anyOf:
            - $ref: "#/components/schemas/PromptResponse"
            - $ref: "#/components/schemas/src__external__app__models__v5__tools__ToolResponse"
            - $ref: "#/components/schemas/DatasetResponse"
            - $ref: "#/components/schemas/EvaluatorResponse"
          title: File
          description: The version of the File that is deployed to the Environment, if one is deployed.
      type: object
      required:
        - id
        - created_at
        - name
        - tag
      title: FileEnvironmentResponse
      description: |-
        Response model for the List Environments endpoint under Files.

        Contains the deployed version of the File, if one is deployed to the Environment.
    FunctionTool:
      properties:
        name:
          type: string
          title: Name
        arguments:
          type: string
          title: Arguments
      type: object
      required:
        - name
      title: FunctionTool
      description: A function tool to be called by the model where user owns runtime.
    FunctionToolChoice:
      properties:
        name:
          type: string
          title: Name
      type: object
      required:
        - name
      title: FunctionToolChoice
      description: A function tool to be called by the model where user owns runtime.
    GenericConfigResponse:
      properties:
        id:
          type: string
          title: Config ID
          description: String ID of config. Starts with `config_`.
        other:
          type: object
          title: Other parameters
          description: Other parameters that define the config.
        type:
          type: string
          enum:
            - generic
          title: Type
        created_by:
          allOf:
            - $ref: "#/components/schemas/src__external__app__models__v4__orgs__base_models__UserResponse"
          title: Created by
          description: The user who created the config.
        status:
          type: string
          title: Status
          description: Whether the config is committed or not.
        name:
          type: string
          title: Config name
          description: Name of config.
        description:
          type: string
          title: Config description
          description: Description of config.
      type: object
      required:
        - id
        - type
        - status
        - name
      title: GenericConfigResponse
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: "#/components/schemas/ValidationError"
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    HumanEvaluatorRequest:
      properties:
        arguments_type:
          allOf:
            - $ref: "#/components/schemas/EvaluatorArgumentsType"
          title: Arguments type
          description: Whether this evaluator is target-free or target-required.
        return_type:
          allOf:
            - $ref: "#/components/schemas/EvaluatorReturnTypeEnum"
          title: Return type
          description: The type of the return value of the evaluator.
        evaluator_type:
          type: string
          enum:
            - human
          title: Evaluator type
          description: The type of the evaluator.
          default: human
      type: object
      required:
        - arguments_type
        - return_type
      title: HumanEvaluatorRequest
    ImageChatContent:
      properties:
        type:
          type: string
          enum:
            - image_url
          title: Type
        image_url:
          allOf:
            - $ref: "#/components/schemas/ImageUrl"
          title: Image URL
          description: The message's image content.
      type: object
      required:
        - type
        - image_url
      title: ImageChatContent
    ImageUrl:
      properties:
        url:
          type: string
          title: URL
          description: Either a URL of the image or the base64 encoded image data.
        detail:
          type: string
          enum:
            - high
            - low
            - auto
          title: Image detail level
          description: "Specify the detail level of the image provided to the model. For more details see: https://platform.openai.com/docs/guides/vision/low-or-high-fidelity-image-understanding"
      type: object
      required:
        - url
      title: ImageUrl
    InputResponse:
      properties:
        name:
          type: string
          title: Input name
          description: Type of input.
      type: object
      required:
        - name
      title: InputResponse
    LLMEvaluatorRequest:
      properties:
        arguments_type:
          allOf:
            - $ref: "#/components/schemas/EvaluatorArgumentsType"
          title: Arguments type
          description: Whether this evaluator is target-free or target-required.
        return_type:
          allOf:
            - $ref: "#/components/schemas/EvaluatorReturnTypeEnum"
          title: Return type
          description: The type of the return value of the evaluator.
        evaluator_type:
          type: string
          enum:
            - llm
          title: Evaluator type
          description: The type of the evaluator.
          default: llm
        prompt:
          allOf:
            - $ref: "#/components/schemas/PromptKernelRequest"
          title: Prompt parameters
          description: The prompt parameters used to generate.
      type: object
      required:
        - arguments_type
        - return_type
      title: LLMEvaluatorRequest
    LabelSentiment:
      type: string
      enum:
        - positive
        - negative
        - neutral
        - unset
      title: LabelSentiment
      description: |-
        How a label should be treated in calculating Version performance.

        Used by a File's PAPV (Positive Action Per View) metric.
    LinkedToolRequest:
      properties:
        id:
          type: string
          title: Tool ID
          description: The ID of the linked tool. Starts with "oc_"
        source:
          type: string
          enum:
            - organization
          title: Tool source
          description: The source of the linked tool. For a linked tool it should be `organization`
        name:
          type: string
          title: Tool name
          description: The name of the linked tool.
        description:
          type: string
          title: Tool description
          description: The description of the linked tool.
        parameters:
          type: object
          title: Tool parameters
          description: The parameters of the linked tool.
      type: object
      required:
        - id
        - source
      title: LinkedToolRequest
    LinkedToolResponse:
      properties:
        name:
          type: string
          title: Name
          description: Name for the tool referenced by the model.
        description:
          type: string
          title: Description
          description: Description of the tool referenced by the model
        parameters:
          type: object
          title: Tool parameters
          description: "Parameters needed to run the Tool, defined in JSON Schema format: https://json-schema.org/"
        id:
          type: string
          title: Tool ID
          description: Unique identifier for the Tool linked.
        version_id:
          type: string
          title: Tool Version ID
          description: Unique identifier for the Tool Version linked.
      type: object
      required:
        - name
        - description
        - id
        - version_id
      title: LinkedToolResponse
    ListDatasets:
      properties:
        records:
          items:
            $ref: "#/components/schemas/DatasetResponse"
          type: array
          title: Records
          description: The list of Datasets.
      type: object
      required:
        - records
      title: ListDatasets
    ListEvaluators:
      properties:
        records:
          items:
            $ref: "#/components/schemas/EvaluatorResponse"
          type: array
          title: Records
          description: The list of Evaluators.
      type: object
      required:
        - records
      title: ListEvaluators
    ListPrompts:
      properties:
        records:
          items:
            $ref: "#/components/schemas/PromptResponse"
          type: array
          title: Records
          description: The list of Prompts.
      type: object
      required:
        - records
      title: ListPrompts
    ListTools:
      properties:
        records:
          items:
            $ref: "#/components/schemas/src__external__app__models__v5__tools__ToolResponse"
          type: array
          title: Records
          description: The list of Tools.
      type: object
      required:
        - records
      title: ListTools
    LogResponse:
      properties:
        project:
          type: string
          title: Project name
          description: The name of the project associated with this log
        project_id:
          type: string
          title: Project ID
          description: The unique ID of the project associated with this log.
        session_id:
          type: string
          title: Session ID
          description: ID of the session to associate the datapoint.
        session_reference_id:
          type: string
          title: Session Reference ID
          description: A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`.
        parent_id:
          type: string
          title: Parent ID
          description: ID associated to the parent datapoint in a session.
        parent_reference_id:
          type: string
          title: Parent Reference ID
          description: A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request.
        inputs:
          type: object
          title: Inputs
          description: The inputs passed to the prompt template.
          default: {}
        source:
          type: string
          title: Source
          description: Identifies where the model was called from.
        metadata:
          type: object
          title: Metadata
          description: Any additional metadata to record.
        save:
          type: boolean
          title: Save
          description: Whether the request/response payloads will be stored on Humanloop.
          default: true
        source_datapoint_id:
          type: string
          title: Source datapoint ID
          description: ID of the source datapoint if this is a log derived from a datapoint in a dataset.
        id:
          type: string
          title: Datapoint ID
          description: String ID of logged datapoint. Starts with `data_`.
        reference_id:
          type: string
          title: Reference ID
          description: Unique user-provided string identifying the datapoint.
        trial_id:
          type: string
          title: Trial ID
          description: Unique ID of an experiment trial to associate to the log.
        messages:
          items:
            $ref: "#/components/schemas/ChatMessageWithToolCall"
          type: array
          title: Messages
          description: The messages passed to the to provider chat endpoint.
        output:
          type: string
          title: Model output
          description: Generated output from your model for the provided inputs. Can be `None` if logging an error, or if logging a parent datapoint with the intention to populate it later
        judgment:
          anyOf:
            - type: boolean
            - type: number
          title: Judgment
        config_id:
          type: string
          title: Config ID
          description: Unique ID of a config to associate to the log.
        config:
          $ref: "#/components/schemas/ConfigResponse"
        environment:
          type: string
          title: Environment name
          description: The environment name used to create the log.
        feedback:
          items:
            $ref: "#/components/schemas/FeedbackResponse"
          type: array
          title: Feedback
        created_at:
          type: string
          format: date-time
          title: Created at
          description: "User defined timestamp for when the log was created. "
        error:
          type: string
          title: Error
          description: Error message if the log is an error.
        duration:
          type: number
          title: Duration
          description: Duration of the logged event in seconds.
        output_message:
          allOf:
            - $ref: "#/components/schemas/ChatMessageWithToolCall"
          title: Output message
          description: The message returned by the provider.
        prompt_tokens:
          type: integer
          title: Prompt tokens
          description: Number of tokens in the prompt used to generate the output.
        output_tokens:
          type: integer
          title: Output tokens
          description: Number of tokens in the output generated by the model.
        prompt_cost:
          type: number
          title: Prompt cost
          description: Cost in dollars associated to the tokens in the prompt.
        output_cost:
          type: number
          title: Output tokens
          description: Cost in dollars associated to the tokens in the output.
        provider_request:
          type: object
          title: Provider request
          description: Raw request sent to provider.
        provider_response:
          type: object
          title: Provider response
          description: Raw response received the provider.
        user:
          type: string
          title: User
          description: User email address provided when creating the datapoint.
        provider_latency:
          type: number
          title: Provider Latency
          description: Latency of provider response.
        tokens:
          type: integer
          title: Tokens
          description: Total number of tokens in the prompt and output.
        raw_output:
          type: string
          title: Raw output
          description: Raw output from the provider.
        finish_reason:
          type: string
          title: Finish reason
          description: Reason the generation finished.
        metric_values:
          items:
            $ref: "#/components/schemas/MetricValueResponse"
          type: array
          title: Metric Values
        tools:
          items:
            $ref: "#/components/schemas/ToolResultResponse"
          type: array
          title: Tools
        tool_choice:
          anyOf:
            - type: string
              enum:
                - none
            - type: string
              enum:
                - auto
            - type: string
              enum:
                - required
            - $ref: "#/components/schemas/ToolChoice"
          title: Tool choice
          description: "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function."
        evaluation_results:
          items:
            $ref: "#/components/schemas/EvaluationResultResponse"
          type: array
          title: Evaluation Results
        observability_status:
          $ref: "#/components/schemas/ObservabilityStatus"
        updated_at:
          type: string
          format: date-time
          title: Updated At
        batch_ids:
          items:
            type: string
          type: array
          title: Batch IDs
          description: List of batch IDs the log belongs to.
      type: object
      required:
        - id
        - config
        - evaluation_results
        - observability_status
        - updated_at
      title: LogResponse
      description: Request model for logging a datapoint.
    MetricValueResponse:
      properties:
        metric_id:
          type: string
          title: Metric Id
        metric_name:
          type: string
          title: Metric Name
        metric_value:
          type: number
          title: Metric Value
      type: object
      required:
        - metric_id
        - metric_name
        - metric_value
      title: MetricValueResponse
    ModelConfigRequest:
      properties:
        name:
          type: string
          title: Model config name
          description: A friendly display name for the model config. If not provided, a name will be generated.
        description:
          type: string
          title: Model config description
          description: A description of the model config.
        provider:
          allOf:
            - $ref: "#/components/schemas/ModelProviders"
          title: Model provider
          description: The company providing the underlying model service.
          default: openai
        model:
          type: string
          title: Model instance used
          description: The model instance used. E.g. text-davinci-002.
        max_tokens:
          type: integer
          title: Maximum tokens
          description: The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt
          default: -1
        temperature:
          type: number
          title: Sampling temperature
          description: What sampling temperature to use when making a generation. Higher values means the model will be more creative.
          default: 1
        top_p:
          type: number
          title: Top p probability mass
          description: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
          default: 1
        stop:
          anyOf:
            - type: string
            - items:
                type: string
              type: array
          title: Stop sequence(s)
          description: The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.
        presence_penalty:
          type: number
          title: Penalize tokens on whether present.
          description: Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.
          default: 0
        frequency_penalty:
          type: number
          title: Penalize tokens on whether frequent.
          description: Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.
          default: 0
        other:
          type: object
          title: Other provider parameters
          description: Other parameter values to be passed to the provider call.
          default: {}
        seed:
          type: integer
          title: Seed
          description: If specified, model will make a best effort to sample deterministically, but it is not guaranteed.
        response_format:
          allOf:
            - $ref: "#/components/schemas/ResponseFormat"
          title: Response format
          description: The format of the response. Only type json_object is currently supported for chat.
        endpoint:
          allOf:
            - $ref: "#/components/schemas/ModelEndpoints"
          title: Provider endpoint
          description: The provider model endpoint used.
          default: complete
        prompt_template:
          type: string
          title: Prompt template
          description: "Prompt template that will take your specified inputs to form your final request to the model. Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}."
        chat_template:
          items:
            $ref: "#/components/schemas/ChatMessageWithToolCall"
          type: array
          title: Chat template
          description: "Messages prepended to the list of messages sent to the provider. These messages that will take your specified inputs to form your final request to the provider model. Input variables within the template should be specified with syntax: {{INPUT_NAME}}."
        tools:
          items:
            anyOf:
              - $ref: "#/components/schemas/LinkedToolRequest"
              - $ref: "#/components/schemas/ModelConfigToolRequest"
          type: array
          title: Tools - equivalent to OpenAI functions.
          description: Make tools available to OpenAIs chat model as functions.
        type:
          type: string
          enum:
            - model
          title: Type
      additionalProperties: false
      type: object
      required:
        - model
      title: ModelConfigRequest
      description: Model config used for logging both chat and completion.
    ModelConfigResponse:
      properties:
        id:
          type: string
          title: Config ID
          description: String ID of config. Starts with `config_`.
        other:
          type: object
          title: Other provider parameters
          description: Other parameter values to be passed to the provider call.
          default: {}
        type:
          type: string
          enum:
            - model
          title: Type
        name:
          type: string
          title: Model config name
          description: A friendly display name for the model config. If not provided, a name will be generated.
        description:
          type: string
          title: Model config description
          description: A description of the model config.
        provider:
          allOf:
            - $ref: "#/components/schemas/ModelProviders"
          title: Model provider
          description: The company providing the underlying model service.
          default: openai
        model:
          type: string
          title: Model instance used
          description: The model instance used. E.g. text-davinci-002.
        max_tokens:
          type: integer
          title: Maximum tokens
          description: The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt
          default: -1
        temperature:
          type: number
          title: Sampling temperature
          description: What sampling temperature to use when making a generation. Higher values means the model will be more creative.
          default: 1
        top_p:
          type: number
          title: Top p probability mass
          description: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
          default: 1
        stop:
          anyOf:
            - type: string
            - items:
                type: string
              type: array
          title: Stop sequence(s)
          description: The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.
        presence_penalty:
          type: number
          title: Penalize tokens on whether present.
          description: Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.
          default: 0
        frequency_penalty:
          type: number
          title: Penalize tokens on whether frequent.
          description: Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.
          default: 0
        seed:
          type: integer
          title: Seed
          description: If specified, model will make a best effort to sample deterministically, but it is not guaranteed.
        response_format:
          allOf:
            - $ref: "#/components/schemas/ResponseFormat"
          title: Response format
          description: The format of the response. Only type json_object is currently supported for chat.
        prompt_template:
          type: string
          title: Prompt template
          description: "Prompt template that will take your specified inputs to form your final request to the model. NB: Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}."
        chat_template:
          items:
            $ref: "#/components/schemas/ChatMessageWithToolCall"
          type: array
          title: Chat template
          description: "Messages prepended to the list of messages sent to the provider. These messages that will take your specified inputs to form your final request to the provider model. NB: Input variables within the template should be specified with syntax: {{INPUT_NAME}}."
        tool_configs:
          items:
            $ref: "#/components/schemas/ToolConfigResponse"
          type: array
          title: Tool configs
          description: "NB: Deprecated with tools field. Definition of tools shown to the model."
          deprecated: true
        tools:
          items:
            $ref: "#/components/schemas/src__external__app__models__v4__configs__ToolResponse"
          type: array
          title: Tools
          description: Tools shown to the model.
        endpoint:
          allOf:
            - $ref: "#/components/schemas/ModelEndpoints"
          title: Provider endpoint
          description: The provider model endpoint used.
      additionalProperties: false
      type: object
      required:
        - id
        - type
        - model
      title: ModelConfigResponse
      description: |-
        Model config request.

        Contains fields that are common to all (i.e. both chat and complete) endpoints.
    ModelConfigToolRequest:
      properties:
        name:
          type: string
          title: Tool name
          description: The name of the tool shown to the model.
        description:
          type: string
          title: Tool description
          description: The description of the tool shown to the model.
        parameters:
          type: object
          title: Schema of tool arguments.
          description: "Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/"
        source:
          allOf:
            - $ref: "#/components/schemas/ToolSource"
          title: Source
          description: Source of the tool. If defined at an organization level will be 'organization' else 'inline'.
        source_code:
          type: string
          title: Code source
          description: Code source of the tool.
        other:
          type: object
          title: Other parameters
          description: Other parameters that define the config.
        preset_name:
          type: string
          title: preset_name
          description: If is_preset = true, this is the name of the preset tool on Humanloop. This is used as the key to look up the Humanloop runtime of the tool
      type: object
      required:
        - name
      title: ModelConfigToolRequest
      description: |-
        Definition of tool within a model config.

        The subset of ToolConfig parameters received by the chat endpoint.
        Does not have things like the signature or setup schema.
    ModelEndpoints:
      type: string
      enum:
        - complete
        - chat
        - edit
      title: ModelEndpoints
      description: Supported model provider endpoints.
    ModelProviders:
      type: string
      enum:
        - openai
        - openai_azure
        - mock
        - anthropic
        - cohere
        - replicate
        - google
        - groq
      title: ModelProviders
      description: Supported model providers.
    MonitoringEvaluatorEnvironmentRequest:
      properties:
        evaluator_id:
          type: string
          title: Evaluator ID
          description: Unique identifier for the Evaluator to be used for monitoring.
        environment_id:
          type: string
          title: Environment ID
          description: Unique identifier for the Environment. The Evaluator Version deployed to this Environment will be used for monitoring.
      type: object
      required:
        - evaluator_id
        - environment_id
      title: MonitoringEvaluatorEnvironmentRequest
    MonitoringEvaluatorResponse:
      properties:
        version_reference:
          allOf:
            - $ref: "#/components/schemas/VersionReferenceResponse"
          title: Version reference
          description: The Evaluator Version used for monitoring. This can be a specific Version by ID, or a Version deployed to an Environment.
        version:
          allOf:
            - $ref: "#/components/schemas/EvaluatorResponse"
          title: Version
          description: The deployed Version.
        state:
          allOf:
            - $ref: "#/components/schemas/MonitoringEvaluatorState"
          title: State
          description: The state of the Monitoring Evaluator. Either `active` or `inactive`
        created_at:
          type: string
          format: date-time
          title: Created At
        updated_at:
          type: string
          format: date-time
          title: Updated At
      type: object
      required:
        - version_reference
        - state
        - created_at
        - updated_at
      title: MonitoringEvaluatorResponse
    MonitoringEvaluatorState:
      type: string
      enum:
        - active
        - inactive
      title: MonitoringEvaluatorState
      description: State of an evaluator connected to a file
    MonitoringEvaluatorVersionRequest:
      properties:
        evaluator_version_id:
          type: string
          title: Evaluator Version ID
          description: Unique identifier for the Evaluator Version to be used for monitoring.
      type: object
      required:
        - evaluator_version_id
      title: MonitoringEvaluatorVersionRequest
    NumericEvaluatorVersionStats:
      properties:
        evaluator_version_id:
          type: string
          title: Evaluator Version ID
          description: Unique identifier for the Evaluator Version.
        total_logs:
          type: integer
          title: Total Evaluator Logs
          description: The total number of Logs generated by this Evaluator Version on the Evaluated Version's Logs. This includes Nulls and Errors.
        num_judgments:
          type: integer
          title: Number of Judgments
          description: The total number of Evaluator judgments for this Evaluator Version. This excludes Nulls and Errors.
        num_nulls:
          type: integer
          title: Number of Nulls
          description: The total number of null judgments (i.e. abstentions) for this Evaluator Version.
        num_errors:
          type: integer
          title: Number of Errors
          description: The total number of errored Evaluators for this Evaluator Version.
        mean:
          type: number
          title: Mean
        std:
          type: number
          title: Std
        percentiles:
          additionalProperties:
            type: number
          type: object
          title: Percentiles
      type: object
      required:
        - evaluator_version_id
        - total_logs
        - num_judgments
        - num_nulls
        - num_errors
        - percentiles
      title: NumericEvaluatorVersionStats
      description: |-
        Base attributes for stats for an Evaluator Version-Evaluated Version pair
        in the Evaluation Report.
      example:
        mean: 0.0
        std: 1.0
        percentiles:
          "0": -2.5
          "25": -0.6745
          "50": 0
          "75": 0.6745
          "100": 2.5
    ObservabilityStatus:
      type: string
      enum:
        - pending
        - running
        - completed
        - failed
      title: ObservabilityStatus
      description: |-
        Status of a Log for observability.

        Observability is implemented by running monitoring Evaluators on Logs.
    OverallStats:
      properties:
        num_datapoints:
          type: integer
          title: Number of Datapoints
          description: The total number of Datapoints in the Evaluation Report's Dataset Version.
        total_logs:
          type: integer
          title: Total Logs
          description: The total number of Logs in the Evaluation Report.
        total_evaluator_logs:
          type: integer
          title: Total Evaluator Logs
          description: The total number of Evaluator Logs in the Evaluation Report.
      type: object
      required:
        - num_datapoints
        - total_logs
        - total_evaluator_logs
      title: OverallStats
    PaginatedData_DatapointResponse_:
      properties:
        records:
          items:
            $ref: "#/components/schemas/DatapointResponse"
          type: array
          title: Records
        page:
          type: integer
          title: Page
        size:
          type: integer
          title: Size
        total:
          type: integer
          title: Total
      type: object
      required:
        - records
        - page
        - size
        - total
      title: PaginatedData[DatapointResponse]
    PaginatedData_DatasetResponse_:
      properties:
        records:
          items:
            $ref: "#/components/schemas/DatasetResponse"
          type: array
          title: Records
        page:
          type: integer
          title: Page
        size:
          type: integer
          title: Size
        total:
          type: integer
          title: Total
      type: object
      required:
        - records
        - page
        - size
        - total
      title: PaginatedData[DatasetResponse]
    PaginatedData_EvaluationReportLogResponse_:
      properties:
        records:
          items:
            $ref: "#/components/schemas/EvaluationReportLogResponse"
          type: array
          title: Records
        page:
          type: integer
          title: Page
        size:
          type: integer
          title: Size
        total:
          type: integer
          title: Total
      type: object
      required:
        - records
        - page
        - size
        - total
      title: PaginatedData[EvaluationReportLogResponse]
    PaginatedData_EvaluationResponse_:
      properties:
        records:
          items:
            $ref: "#/components/schemas/EvaluationResponse"
          type: array
          title: Records
        page:
          type: integer
          title: Page
        size:
          type: integer
          title: Size
        total:
          type: integer
          title: Total
      type: object
      required:
        - records
        - page
        - size
        - total
      title: PaginatedData[EvaluationResponse]
    PaginatedData_PromptLogResponse_:
      properties:
        records:
          items:
            $ref: "#/components/schemas/PromptLogResponse"
          type: array
          title: Records
        page:
          type: integer
          title: Page
        size:
          type: integer
          title: Size
        total:
          type: integer
          title: Total
      type: object
      required:
        - records
        - page
        - size
        - total
      title: PaginatedData[PromptLogResponse]
    PaginatedData_SessionResponse_:
      properties:
        records:
          items:
            $ref: "#/components/schemas/SessionResponse"
          type: array
          title: Records
        page:
          type: integer
          title: Page
        size:
          type: integer
          title: Size
        total:
          type: integer
          title: Total
      type: object
      required:
        - records
        - page
        - size
        - total
      title: PaginatedData[SessionResponse]
    PlatformAccessEnum:
      type: string
      enum:
        - superadmin
        - supportadmin
        - user
      title: PlatformAccessEnum
      description: An enumeration.
    PositiveLabel:
      properties:
        type:
          type: string
          title: Feedback type
        value:
          type: string
          title: Feedback value
      type: object
      required:
        - type
        - value
      title: PositiveLabel
    ProjectSortBy:
      type: string
      enum:
        - created_at
        - updated_at
        - name
      title: ProjectSortBy
      description: An enumeration.
    PromptCallLogResponse:
      properties:
        output:
          type: string
          title: Model output
          description: Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later.
        raw_output:
          type: string
          title: Raw output
          description: Raw output from the provider.
        created_at:
          type: string
          format: date-time
          title: Created at
          description: "User defined timestamp for when the log was created. "
        error:
          type: string
          title: Error
          description: Error message if the log is an error.
        provider_latency:
          type: number
          title: Log latency
          description: Duration of the logged event in seconds.
        output_message:
          allOf:
            - $ref: "#/components/schemas/ChatMessage"
          title: Output message
          description: The message returned by the provider.
        prompt_tokens:
          type: integer
          title: Prompt tokens
          description: Number of tokens in the prompt used to generate the output.
        output_tokens:
          type: integer
          title: Output tokens
          description: Number of tokens in the output generated by the model.
        prompt_cost:
          type: number
          title: Prompt cost
          description: Cost in dollars associated to the tokens in the prompt.
        output_cost:
          type: number
          title: Output tokens
          description: Cost in dollars associated to the tokens in the output.
        finish_reason:
          type: string
          title: Finish reason
          description: Reason the generation finished.
        index:
          type: integer
          title: Index
          description: The index of the sample in the batch.
      type: object
      required:
        - index
      title: PromptCallLogResponse
      description: Sample specific response details for a Prompt call
    PromptCallRequest:
      properties:
        path:
          type: string
          title: Prompt path
          description: Path of the Prompt, including the name, which is used as a unique identifier.
        id:
          type: string
          title: Prompt ID
          description: ID for an existing Prompt to update.
        prompt:
          allOf:
            - $ref: "#/components/schemas/PromptKernelRequest"
          title: Prompt
          description: Details of your Prompt. A new Prompt version will be created if the provided details are new.
        messages:
          items:
            $ref: "#/components/schemas/ChatMessage"
          type: array
          title: Messages
          description: The messages passed to the to provider chat endpoint.
        tool_choice:
          anyOf:
            - type: string
              enum:
                - none
            - type: string
              enum:
                - auto
            - type: string
              enum:
                - required
            - $ref: "#/components/schemas/ToolChoice"
          title: Tool choice
          description: "Controls how the model uses tools. The following options are supported: \n- `'none'` means the model will not call any tool and instead generates a message; this is the default when no tools are provided as part of the Prompt. \n- `'auto'` means the model can decide to call one or more of the provided tools; this is the default when tools are provided as part of the Prompt. \n- `'required'` means the model can decide to call one or more of the provided tools. \n- `{'type': 'function', 'function': {name': <TOOL_NAME>}}` forces the model to use the named function."
        session_id:
          type: string
          title: Session ID
          description: "Unique identifier for the Session to associate the Log to. Allows you to record multiple Logs to a Session (using an ID kept by your internal systems) by passing the same `session_id` in subsequent log requests. "
        parent_id:
          type: string
          title: Parent ID
          description: Unique identifier for the parent Log in a Session. Should only be provided if `session_id` is provided. If provided, the Log will be nested under the parent Log within the Session.
        inputs:
          type: object
          title: Inputs
          description: The inputs passed to the prompt template.
          default: {}
        source:
          type: string
          title: Source
          description: Identifies where the model was called from.
        metadata:
          type: object
          title: Metadata
          description: Any additional metadata to record.
        save:
          type: boolean
          title: Save
          description: Whether the request/response payloads will be stored on Humanloop.
          default: true
        source_datapoint_id:
          type: string
          title: Source Datapoint ID
          description: Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair.
        batches:
          items:
            type: string
          type: array
          title: Batch IDs
          description: Array of Batch Ids that this log is part of. Batches are used to group Logs together for offline Evaluations
        user:
          type: string
          title: End-user identifier
          description: End-user ID related to the Log.
        environment:
          type: string
          title: Environment name
          description: The name of the Environment the Log is associated to.
        provider_api_keys:
          allOf:
            - $ref: "#/components/schemas/ProviderApiKeys"
          title: Provider API Keys
          description: API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization.
        num_samples:
          type: integer
          title: Number of samples
          description: The number of generations.
          default: 1
        stream:
          type: boolean
          title: Whether to stream partial results
          description: If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.
          default: false
        return_inputs:
          type: boolean
          title: Return inputs
          description: Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true.
          default: true
        logprobs:
          type: integer
          title: Log probabilities of most likely n tokens
          description: Include the log probabilities of the top n tokens in the provider_response
        suffix:
          type: string
          title: Completion suffix
          description: The suffix that comes after a completion of inserted text. Useful for completions that act like inserts.
      additionalProperties: false
      type: object
      title: PromptCallRequest
      description: Base request for any generations/logs.
    PromptCallResponse:
      properties:
        prompt:
          allOf:
            - $ref: "#/components/schemas/PromptResponse"
          title: Prompt
          description: Prompt details used to generate the log.
        messages:
          items:
            $ref: "#/components/schemas/ChatMessage"
          type: array
          title: Messages
          description: The messages passed to the to provider chat endpoint.
        tool_choice:
          anyOf:
            - type: string
              enum:
                - none
            - type: string
              enum:
                - auto
            - type: string
              enum:
                - required
            - $ref: "#/components/schemas/ToolChoice"
          title: Tool choice
          description: "Controls how the model uses tools. The following options are supported: \n- `'none'` means the model will not call any tool and instead generates a message; this is the default when no tools are provided as part of the Prompt. \n- `'auto'` means the model can decide to call one or more of the provided tools; this is the default when tools are provided as part of the Prompt. \n- `'required'` means the model can decide to call one or more of the provided tools. \n- `{'type': 'function', 'function': {name': <TOOL_NAME>}}` forces the model to use the named function."
        session_id:
          type: string
          title: Session ID
          description: "Unique identifier for the Session to associate the Log to. Allows you to record multiple Logs to a Session (using an ID kept by your internal systems) by passing the same `session_id` in subsequent log requests. "
        parent_id:
          type: string
          title: Parent ID
          description: Unique identifier for the parent Log in a Session. Should only be provided if `session_id` is provided. If provided, the Log will be nested under the parent Log within the Session.
        inputs:
          type: object
          title: Inputs
          description: The inputs passed to the prompt template.
          default: {}
        source:
          type: string
          title: Source
          description: Identifies where the model was called from.
        metadata:
          type: object
          title: Metadata
          description: Any additional metadata to record.
        save:
          type: boolean
          title: Save
          description: Whether the request/response payloads will be stored on Humanloop.
          default: true
        source_datapoint_id:
          type: string
          title: Source Datapoint ID
          description: Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair.
        batches:
          items:
            type: string
          type: array
          title: Batch IDs
          description: Array of Batch Ids that this log is part of. Batches are used to group Logs together for offline Evaluations
        user:
          type: string
          title: End-user identifier
          description: End-user ID related to the Log.
        environment:
          type: string
          title: Environment name
          description: The name of the Environment the Log is associated to.
        id:
          type: string
          title: Log ID
          description: ID of the log.
        logs:
          items:
            $ref: "#/components/schemas/PromptCallLogResponse"
          type: array
          title: Logs
          description: The logs generated by the Prompt call.
      additionalProperties: false
      type: object
      required:
        - prompt
        - id
        - logs
      title: PromptCallResponse
      description: Response model for a Prompt call with potentially multiple log samples.
    PromptCallStreamResponse:
      properties:
        output:
          type: string
          title: Model output
          description: Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later.
        raw_output:
          type: string
          title: Raw output
          description: Raw output from the provider.
        created_at:
          type: string
          format: date-time
          title: Created at
          description: "User defined timestamp for when the log was created. "
        error:
          type: string
          title: Error
          description: Error message if the log is an error.
        provider_latency:
          type: number
          title: Log latency
          description: Duration of the logged event in seconds.
        output_message:
          allOf:
            - $ref: "#/components/schemas/ChatMessage"
          title: Output message
          description: The message returned by the provider.
        prompt_tokens:
          type: integer
          title: Prompt tokens
          description: Number of tokens in the prompt used to generate the output.
        output_tokens:
          type: integer
          title: Output tokens
          description: Number of tokens in the output generated by the model.
        prompt_cost:
          type: number
          title: Prompt cost
          description: Cost in dollars associated to the tokens in the prompt.
        output_cost:
          type: number
          title: Output tokens
          description: Cost in dollars associated to the tokens in the output.
        finish_reason:
          type: string
          title: Finish reason
          description: Reason the generation finished.
        index:
          type: integer
          title: Index
          description: The index of the sample in the batch.
        id:
          type: string
          title: Log ID
          description: ID of the log.
        prompt_id:
          type: string
          title: Prompt ID
          description: ID of the Prompt the log belongs to.
        version_id:
          type: string
          title: Prompt Version ID
          description: ID of the specific version of the Prompt.
      type: object
      required:
        - index
        - id
        - prompt_id
        - version_id
      title: PromptCallStreamResponse
      description: Response model for calling Prompt in streaming mode.
    PromptKernelRequest:
      properties:
        model:
          type: string
          title: Model instance used
          description: The model instance used, e.g. `gpt-4`. See [supported models](https://humanloop.com/docs/supported-models)
        endpoint:
          allOf:
            - $ref: "#/components/schemas/ModelEndpoints"
          title: Provider endpoint
          description: The provider model endpoint used.
          default: chat
        template:
          anyOf:
            - type: string
            - items:
                $ref: "#/components/schemas/ChatMessage"
              type: array
          title: Template
          description: "For chat endpoint, provide a Chat template. For completion endpoint, provide a Prompt template. Input variables within the template should be specified with double curly bracket syntax: {{INPUT_NAME}}."
        provider:
          allOf:
            - $ref: "#/components/schemas/ModelProviders"
          title: Model provider
          description: The company providing the underlying model service.
          default: openai
        max_tokens:
          type: integer
          title: Maximum tokens
          description: The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt
          default: -1
        temperature:
          type: number
          title: Sampling temperature
          description: What sampling temperature to use when making a generation. Higher values means the model will be more creative.
          default: 1
        top_p:
          type: number
          title: Top p probability mass
          description: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
          default: 1
        stop:
          anyOf:
            - type: string
            - items:
                type: string
              type: array
          title: Stop sequence(s)
          description: The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.
        presence_penalty:
          type: number
          title: Presence penalty
          description: Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.
          default: 0
        frequency_penalty:
          type: number
          title: Frequency penalty
          description: Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.
          default: 0
        other:
          type: object
          title: Other provider parameters
          description: Other parameter values to be passed to the provider call.
          default: {}
        seed:
          type: integer
          title: Seed
          description: If specified, model will make a best effort to sample deterministically, but it is not guaranteed.
        response_format:
          allOf:
            - $ref: "#/components/schemas/ResponseFormat"
          title: Response format
          description: 'The format of the response. Only `{"type": "json_object"}` is currently supported for chat.'
        tools:
          items:
            $ref: "#/components/schemas/ToolFunction"
          type: array
          title: Tools
          description: The tool specification that the model can choose to call if Tool calling is supported.
        linked_tools:
          items:
            type: string
          type: array
          title: Linked tools
          description: The IDs of the Tools in your organization that the model can choose to call if Tool calling is supported. The default deployed version of that tool is called.
      type: object
      required:
        - model
      title: PromptKernelRequest
    PromptLogRequest:
      properties:
        path:
          type: string
          title: Prompt path
          description: Path of the Prompt, including the name, which is used as a unique identifier.
        id:
          type: string
          title: Prompt ID
          description: ID for an existing Prompt to update.
        output_message:
          allOf:
            - $ref: "#/components/schemas/ChatMessage"
          title: Output message
          description: The message returned by the provider.
        prompt_tokens:
          type: integer
          title: Prompt tokens
          description: Number of tokens in the prompt used to generate the output.
        output_tokens:
          type: integer
          title: Output tokens
          description: Number of tokens in the output generated by the model.
        prompt_cost:
          type: number
          title: Prompt cost
          description: Cost in dollars associated to the tokens in the prompt.
        output_cost:
          type: number
          title: Output tokens
          description: Cost in dollars associated to the tokens in the output.
        finish_reason:
          type: string
          title: Finish reason
          description: Reason the generation finished.
        prompt:
          allOf:
            - $ref: "#/components/schemas/PromptKernelRequest"
          title: Prompt
          description: Details of your Prompt. A new Prompt version will be created if the provided details are new.
        messages:
          items:
            $ref: "#/components/schemas/ChatMessage"
          type: array
          title: Messages
          description: The messages passed to the to provider chat endpoint.
        tool_choice:
          anyOf:
            - type: string
              enum:
                - none
            - type: string
              enum:
                - auto
            - type: string
              enum:
                - required
            - $ref: "#/components/schemas/ToolChoice"
          title: Tool choice
          description: "Controls how the model uses tools. The following options are supported: \n- `'none'` means the model will not call any tool and instead generates a message; this is the default when no tools are provided as part of the Prompt. \n- `'auto'` means the model can decide to call one or more of the provided tools; this is the default when tools are provided as part of the Prompt. \n- `'required'` means the model can decide to call one or more of the provided tools. \n- `{'type': 'function', 'function': {name': <TOOL_NAME>}}` forces the model to use the named function."
        output:
          type: string
          title: Model output
          description: Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later.
        raw_output:
          type: string
          title: Raw output
          description: Raw output from the provider.
        created_at:
          type: string
          format: date-time
          title: Created at
          description: "User defined timestamp for when the log was created. "
        error:
          type: string
          title: Error
          description: Error message if the log is an error.
        provider_latency:
          type: number
          title: Log latency
          description: Duration of the logged event in seconds.
        provider_request:
          type: object
          title: Provider request
          description: Raw request sent to provider.
        provider_response:
          type: object
          title: Provider response
          description: Raw response received the provider.
        session_id:
          type: string
          title: Session ID
          description: "Unique identifier for the Session to associate the Log to. Allows you to record multiple Logs to a Session (using an ID kept by your internal systems) by passing the same `session_id` in subsequent log requests. "
        parent_id:
          type: string
          title: Parent ID
          description: Unique identifier for the parent Log in a Session. Should only be provided if `session_id` is provided. If provided, the Log will be nested under the parent Log within the Session.
        inputs:
          type: object
          title: Inputs
          description: The inputs passed to the prompt template.
          default: {}
        source:
          type: string
          title: Source
          description: Identifies where the model was called from.
        metadata:
          type: object
          title: Metadata
          description: Any additional metadata to record.
        save:
          type: boolean
          title: Save
          description: Whether the request/response payloads will be stored on Humanloop.
          default: true
        source_datapoint_id:
          type: string
          title: Source Datapoint ID
          description: Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair.
        batches:
          items:
            type: string
          type: array
          title: Batch IDs
          description: Array of Batch Ids that this log is part of. Batches are used to group Logs together for offline Evaluations
        user:
          type: string
          title: End-user identifier
          description: End-user ID related to the Log.
        environment:
          type: string
          title: Environment name
          description: The name of the Environment the Log is associated to.
      additionalProperties: false
      type: object
      title: PromptLogRequest
      description: Request for creating a Prompt log.
    PromptLogResponse:
      properties:
        id:
          type: string
          title: Log ID
          description: Unique identifier for the Log.
        output_message:
          allOf:
            - $ref: "#/components/schemas/ChatMessage"
          title: Output message
          description: The message returned by the provider.
        prompt_tokens:
          type: integer
          title: Prompt tokens
          description: Number of tokens in the prompt used to generate the output.
        output_tokens:
          type: integer
          title: Output tokens
          description: Number of tokens in the output generated by the model.
        prompt_cost:
          type: number
          title: Prompt cost
          description: Cost in dollars associated to the tokens in the prompt.
        output_cost:
          type: number
          title: Output tokens
          description: Cost in dollars associated to the tokens in the output.
        finish_reason:
          type: string
          title: Finish reason
          description: Reason the generation finished.
        prompt:
          allOf:
            - $ref: "#/components/schemas/PromptResponse"
          title: Prompt
          description: Prompt details used to generate the log.
        messages:
          items:
            $ref: "#/components/schemas/ChatMessage"
          type: array
          title: Messages
          description: The messages passed to the to provider chat endpoint.
        tool_choice:
          anyOf:
            - type: string
              enum:
                - none
            - type: string
              enum:
                - auto
            - type: string
              enum:
                - required
            - $ref: "#/components/schemas/ToolChoice"
          title: Tool choice
          description: "Controls how the model uses tools. The following options are supported: \n- `'none'` means the model will not call any tool and instead generates a message; this is the default when no tools are provided as part of the Prompt. \n- `'auto'` means the model can decide to call one or more of the provided tools; this is the default when tools are provided as part of the Prompt. \n- `'required'` means the model can decide to call one or more of the provided tools. \n- `{'type': 'function', 'function': {name': <TOOL_NAME>}}` forces the model to use the named function."
        output:
          type: string
          title: Model output
          description: Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later.
        raw_output:
          type: string
          title: Raw output
          description: Raw output from the provider.
        created_at:
          type: string
          format: date-time
          title: Created at
          description: "User defined timestamp for when the log was created. "
        error:
          type: string
          title: Error
          description: Error message if the log is an error.
        provider_latency:
          type: number
          title: Log latency
          description: Duration of the logged event in seconds.
        provider_request:
          type: object
          title: Provider request
          description: Raw request sent to provider.
        provider_response:
          type: object
          title: Provider response
          description: Raw response received the provider.
        session_id:
          type: string
          title: Session ID
          description: "Unique identifier for the Session to associate the Log to. Allows you to record multiple Logs to a Session (using an ID kept by your internal systems) by passing the same `session_id` in subsequent log requests. "
        parent_id:
          type: string
          title: Parent ID
          description: Unique identifier for the parent Log in a Session. Should only be provided if `session_id` is provided. If provided, the Log will be nested under the parent Log within the Session.
        inputs:
          type: object
          title: Inputs
          description: The inputs passed to the prompt template.
          default: {}
        source:
          type: string
          title: Source
          description: Identifies where the model was called from.
        metadata:
          type: object
          title: Metadata
          description: Any additional metadata to record.
        save:
          type: boolean
          title: Save
          description: Whether the request/response payloads will be stored on Humanloop.
          default: true
        source_datapoint_id:
          type: string
          title: Source Datapoint ID
          description: Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair.
        batches:
          items:
            type: string
          type: array
          title: Batch IDs
          description: Array of Batch Ids that this log is part of. Batches are used to group Logs together for offline Evaluations
        user:
          type: string
          title: End-user identifier
          description: End-user ID related to the Log.
        environment:
          type: string
          title: Environment name
          description: The name of the Environment the Log is associated to.
      additionalProperties: false
      type: object
      required:
        - id
        - prompt
      title: PromptLogResponse
      description: Request for creating a Prompt log.
    PromptRequest:
      properties:
        path:
          type: string
          title: Prompt path
          description: Path of the Prompt, including the name, which is used as a unique identifier.
        id:
          type: string
          title: Prompt ID
          description: ID for an existing Prompt to update.
        model:
          type: string
          title: Model instance used
          description: The model instance used, e.g. `gpt-4`. See [supported models](https://humanloop.com/docs/supported-models)
        endpoint:
          allOf:
            - $ref: "#/components/schemas/ModelEndpoints"
          title: Provider endpoint
          description: The provider model endpoint used.
          default: chat
        template:
          anyOf:
            - type: string
            - items:
                $ref: "#/components/schemas/ChatMessage"
              type: array
          title: Template
          description: "For chat endpoint, provide a Chat template. For completion endpoint, provide a Prompt template. Input variables within the template should be specified with double curly bracket syntax: {{INPUT_NAME}}."
        provider:
          allOf:
            - $ref: "#/components/schemas/ModelProviders"
          title: Model provider
          description: The company providing the underlying model service.
          default: openai
        max_tokens:
          type: integer
          title: Maximum tokens
          description: The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt
          default: -1
        temperature:
          type: number
          title: Sampling temperature
          description: What sampling temperature to use when making a generation. Higher values means the model will be more creative.
          default: 1
        top_p:
          type: number
          title: Top p probability mass
          description: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
          default: 1
        stop:
          anyOf:
            - type: string
            - items:
                type: string
              type: array
          title: Stop sequence(s)
          description: The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.
        presence_penalty:
          type: number
          title: Presence penalty
          description: Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.
          default: 0
        frequency_penalty:
          type: number
          title: Frequency penalty
          description: Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.
          default: 0
        other:
          type: object
          title: Other provider parameters
          description: Other parameter values to be passed to the provider call.
          default: {}
        seed:
          type: integer
          title: Seed
          description: If specified, model will make a best effort to sample deterministically, but it is not guaranteed.
        response_format:
          allOf:
            - $ref: "#/components/schemas/ResponseFormat"
          title: Response format
          description: 'The format of the response. Only `{"type": "json_object"}` is currently supported for chat.'
        tools:
          items:
            $ref: "#/components/schemas/ToolFunction"
          type: array
          title: Tools
          description: The tool specification that the model can choose to call if Tool calling is supported.
        linked_tools:
          items:
            type: string
          type: array
          title: Linked tools
          description: The IDs of the Tools in your organization that the model can choose to call if Tool calling is supported. The default deployed version of that tool is called.
        commit_message:
          type: string
          title: Commit message
          description: Message describing the changes made.
      type: object
      required:
        - model
      title: PromptRequest
      description: Request model for creating a new Prompt
    PromptResponse:
      properties:
        path:
          type: string
          title: Prompt path
          description: Path of the Prompt, including the name, which is used as a unique identifier.
        id:
          type: string
          title: Prompt ID
          description: Unique identifier for the Prompt.
        name:
          type: string
          title: Prompt name
          description: Name of the Prompt.
        version_id:
          type: string
          title: Version ID
          description: Unique identifier for the specific Prompt Version. If no query params provided, the default deployed Prompt Version is returned.
        type:
          type: string
          enum:
            - prompt
          title: Type
          default: prompt
        environments:
          items:
            $ref: "#/components/schemas/EnvironmentResponse"
          type: array
          title: Environments
          description: The list of environments the Prompt Version is deployed to.
        created_at:
          type: string
          format: date-time
          title: Created At
        updated_at:
          type: string
          format: date-time
          title: Updated At
        created_by:
          allOf:
            - $ref: "#/components/schemas/src__external__app__models__v5__users__UserResponse"
          title: Created by
          description: The user who created the Prompt.
        status:
          allOf:
            - $ref: "#/components/schemas/VersionStatus"
          title: Status
          description: The status of the Prompt Version.
        last_used_at:
          type: string
          format: date-time
          title: Last Used At
        model:
          type: string
          title: Model instance used
          description: The model instance used, e.g. `gpt-4`. See [supported models](https://humanloop.com/docs/supported-models)
        endpoint:
          allOf:
            - $ref: "#/components/schemas/ModelEndpoints"
          title: Provider endpoint
          description: The provider model endpoint used.
          default: chat
        template:
          anyOf:
            - type: string
            - items:
                $ref: "#/components/schemas/ChatMessage"
              type: array
          title: Template
          description: "For chat endpoint, provide a Chat template. For completion endpoint, provide a Prompt template. Input variables within the template should be specified with double curly bracket syntax: {{INPUT_NAME}}."
        provider:
          allOf:
            - $ref: "#/components/schemas/ModelProviders"
          title: Model provider
          description: The company providing the underlying model service.
          default: openai
        max_tokens:
          type: integer
          title: Maximum tokens
          description: The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt
          default: -1
        temperature:
          type: number
          title: Sampling temperature
          description: What sampling temperature to use when making a generation. Higher values means the model will be more creative.
          default: 1
        top_p:
          type: number
          title: Top p probability mass
          description: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
          default: 1
        stop:
          anyOf:
            - type: string
            - items:
                type: string
              type: array
          title: Stop sequence(s)
          description: The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.
        presence_penalty:
          type: number
          title: Presence penalty
          description: Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.
          default: 0
        frequency_penalty:
          type: number
          title: Frequency penalty
          description: Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.
          default: 0
        other:
          type: object
          title: Other provider parameters
          description: Other parameter values to be passed to the provider call.
          default: {}
        seed:
          type: integer
          title: Seed
          description: If specified, model will make a best effort to sample deterministically, but it is not guaranteed.
        response_format:
          allOf:
            - $ref: "#/components/schemas/ResponseFormat"
          title: Response format
          description: 'The format of the response. Only `{"type": "json_object"}` is currently supported for chat.'
        tools:
          items:
            $ref: "#/components/schemas/ToolFunction"
          type: array
          title: Tools
          description: The tool specification that the model can choose to call if Tool calling is supported.
        linked_tools:
          items:
            $ref: "#/components/schemas/LinkedToolResponse"
          type: array
          title: Linked Tools
          description: The tools linked to your prompt that the model can call.
        commit_message:
          type: string
          title: Commit message
          description: Message describing the changes made.
        version_logs_count:
          type: integer
          title: Number of logs for this version
          description: The number of logs that have been generated for this Prompt Version
        total_logs_count:
          type: integer
          title: Total number of logs across all versions
          description: The number of logs that have been generated across all Prompt Versions
        inputs:
          items:
            $ref: "#/components/schemas/InputResponse"
          type: array
          title: Prompt inputs
          description: Inputs associated to the Prompt. Inputs correspond to any of the variables used within the Prompt template.
        evaluators:
          items:
            $ref: "#/components/schemas/MonitoringEvaluatorResponse"
          type: array
          title: Monitoring Evaluators
          description: Evaluators that have been attached to this Prompt that are used for monitoring logs.
        evaluator_aggregates:
          items:
            $ref: "#/components/schemas/EvaluatorAggregate"
          type: array
          title: Evaluator aggregates
          description: Aggregation of Evaluator results for the Prompt Version.
      type: object
      required:
        - path
        - id
        - name
        - version_id
        - created_at
        - updated_at
        - status
        - last_used_at
        - model
        - version_logs_count
        - total_logs_count
        - inputs
      title: PromptResponse
      description: Request model for creating a new Prompt
    ProviderApiKeys:
      properties:
        openai:
          type: string
          title: Openai
        ai21:
          type: string
          title: Ai21
        mock:
          type: string
          title: Mock
        anthropic:
          type: string
          title: Anthropic
        cohere:
          type: string
          title: Cohere
        openai_azure:
          type: string
          title: Openai Azure
        openai_azure_endpoint:
          type: string
          title: Openai Azure Endpoint
      type: object
      title: ProviderApiKeys
    ResponseFormat:
      properties:
        type:
          type: string
          enum:
            - json_object
          title: Type
      type: object
      required:
        - type
      title: ResponseFormat
      description: Response format of the model.
    SessionResponse:
      properties:
        id:
          type: string
          title: Session ID
          description: Unique identifier for the Session.
        created_at:
          type: string
          format: date-time
          title: Created At
        updated_at:
          type: string
          format: date-time
          title: Updated At
        logs:
          items:
            $ref: "#/components/schemas/PromptLogResponse"
          type: array
          title: Logs
          description: List of Logs associated with this Session.
      type: object
      required:
        - id
        - created_at
        - updated_at
        - logs
      title: SessionResponse
    SortOrder:
      type: string
      enum:
        - asc
        - desc
      title: SortOrder
      description: An enumeration.
    TextChatContent:
      properties:
        type:
          type: string
          enum:
            - text
          title: Type
        text:
          type: string
          title: Text
          description: The message's text content.
      type: object
      required:
        - type
        - text
      title: TextChatContent
    TimeUnit:
      type: string
      enum:
        - day
        - week
        - month
      title: TimeUnit
      description: An enumeration.
    ToolCall:
      properties:
        id:
          type: string
          title: Id
        type:
          $ref: "#/components/schemas/src__domain__chat_types__enums__ToolType"
        function:
          $ref: "#/components/schemas/FunctionTool"
      type: object
      required:
        - id
        - type
        - function
      title: ToolCall
      description: A tool call to be made.
    ToolChoice:
      properties:
        type:
          $ref: "#/components/schemas/src__domain__chat_types__enums__ToolType"
        function:
          $ref: "#/components/schemas/FunctionToolChoice"
      type: object
      required:
        - type
        - function
      title: ToolChoice
      description: Tool choice to force the model to use a tool.
    ToolConfigRequest:
      properties:
        name:
          type: string
          title: Tool name
          description: The name of the tool shown to the model.
        description:
          type: string
          title: Tool description
          description: The description of the tool shown to the model.
        parameters:
          type: object
          title: Schema of tool arguments.
          description: "Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/"
        source:
          allOf:
            - $ref: "#/components/schemas/ToolSource"
          title: Source
          description: Source of the tool. If defined at an organization level will be 'organization' else 'inline'.
        source_code:
          type: string
          title: Code source
          description: Code source of the tool.
        other:
          type: object
          title: Other parameters
          description: Other parameters that define the config.
        preset_name:
          type: string
          title: preset_name
          description: If is_preset = true, this is the name of the preset tool on Humanloop. This is used as the key to look up the Humanloop runtime of the tool
        type:
          type: string
          enum:
            - tool
          title: Type
      type: object
      required:
        - name
        - type
      title: ToolConfigRequest
      description: |-
        Definition of tool within a model config.

        The subset of ToolConfig parameters received by the chat endpoint.
        Does not have things like the signature or setup schema.
    ToolConfigResponse:
      properties:
        id:
          type: string
          title: Config ID
          description: String ID of config. Starts with `config_`.
        other:
          type: object
          title: Other parameters
          description: Other parameters that define the config.
        type:
          type: string
          enum:
            - tool
          title: Type
        created_by:
          allOf:
            - $ref: "#/components/schemas/src__external__app__models__v4__orgs__base_models__UserResponse"
          title: Created by
          description: The user who created the config.
        status:
          type: string
          title: Status
          description: Whether the config is committed or not.
        name:
          type: string
          title: Name
          description: Name for the tool referenced by the model.
        description:
          type: string
          title: Description
          description: Description of the tool referenced by the model
        source:
          allOf:
            - $ref: "#/components/schemas/ToolSource"
          title: Source
          description: Source of the tool. If defined at an organization level will be 'organization' else 'inline'.
        source_code:
          type: string
          title: Source Code
          description: Code source of the tool.
        setup_schema:
          type: object
          title: Setup arguments schema.
          description: "Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/"
        parameters:
          type: object
          title: Run arguments schema.
          description: "Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/"
        signature:
          type: string
          title: Signature
          description: The function signature of the tool when being called.
        is_preset:
          type: boolean
          title: Is preset
          description: Whether the tool is one where Humanloop defines runtime or not.
        preset_name:
          type: string
          title: preset_name
          description: If is_preset = true, this is the name of the preset tool on Humanloop. This is used as the key to lookup the Humanloop runtime of the tool
      type: object
      required:
        - id
        - type
        - status
        - name
      title: ToolConfigResponse
    ToolFunction:
      properties:
        name:
          type: string
          title: Name
          description: Name for the tool referenced by the model.
        description:
          type: string
          title: Description
          description: Description of the tool referenced by the model
        parameters:
          type: object
          title: Tool parameters
          description: "Parameters needed to run the Tool, defined in JSON Schema format: https://json-schema.org/"
      type: object
      required:
        - name
        - description
      title: ToolFunction
    ToolKernelRequest:
      properties:
        function:
          allOf:
            - $ref: "#/components/schemas/ToolFunction"
          title: Function
          description: Callable function specification of the Tool shown to the model for tool calling.
        source_code:
          type: string
          title: Source Code
          description: Code source of the Tool.
        setup_values:
          type: object
          title: Setup values
          description: "Values needed to setup the Tool, defined in JSON Schema format: https://json-schema.org/"
      type: object
      title: ToolKernelRequest
    ToolLogRequest:
      properties:
        path:
          type: string
          title: Tool path
          description: Path of the Tool, including the name, which is used as a unique identifier.
        id:
          type: string
          title: Tool ID
          description: ID for an existing Tool to update.
        output:
          type: string
          title: Model output
          description: Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later.
        raw_output:
          type: string
          title: Raw output
          description: Raw output from the provider.
        created_at:
          type: string
          format: date-time
          title: Created at
          description: "User defined timestamp for when the log was created. "
        error:
          type: string
          title: Error
          description: Error message if the log is an error.
        provider_latency:
          type: number
          title: Log latency
          description: Duration of the logged event in seconds.
        provider_request:
          type: object
          title: Provider request
          description: Raw request sent to provider.
        provider_response:
          type: object
          title: Provider response
          description: Raw response received the provider.
        session_id:
          type: string
          title: Session ID
          description: "Unique identifier for the Session to associate the Log to. Allows you to record multiple Logs to a Session (using an ID kept by your internal systems) by passing the same `session_id` in subsequent log requests. "
        parent_id:
          type: string
          title: Parent ID
          description: Unique identifier for the parent Log in a Session. Should only be provided if `session_id` is provided. If provided, the Log will be nested under the parent Log within the Session.
        inputs:
          type: object
          title: Inputs
          description: The inputs passed to the prompt template.
          default: {}
        source:
          type: string
          title: Source
          description: Identifies where the model was called from.
        metadata:
          type: object
          title: Metadata
          description: Any additional metadata to record.
        save:
          type: boolean
          title: Save
          description: Whether the request/response payloads will be stored on Humanloop.
          default: true
        source_datapoint_id:
          type: string
          title: Source Datapoint ID
          description: Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair.
        batches:
          items:
            type: string
          type: array
          title: Batch IDs
          description: Array of Batch Ids that this log is part of. Batches are used to group Logs together for offline Evaluations
        user:
          type: string
          title: End-user identifier
          description: End-user ID related to the Log.
        environment:
          type: string
          title: Environment name
          description: The name of the Environment the Log is associated to.
        tool:
          allOf:
            - $ref: "#/components/schemas/ToolKernelRequest"
          title: Tool
          description: Details of your Tool. A new Tool version will be created if the provided details are new.
      additionalProperties: false
      type: object
      title: ToolLogRequest
      description: Request for creating a Tool log.
    ToolRequest:
      properties:
        path:
          type: string
          title: Tool path
          description: Path of the Tool, including the name, which is used as a unique identifier.
        id:
          type: string
          title: Tool ID
          description: ID for an existing Tool to update.
        function:
          allOf:
            - $ref: "#/components/schemas/ToolFunction"
          title: Function
          description: Callable function specification of the Tool shown to the model for tool calling.
        source_code:
          type: string
          title: Source Code
          description: Code source of the Tool.
        setup_values:
          type: object
          title: Setup values
          description: "Values needed to setup the Tool, defined in JSON Schema format: https://json-schema.org/"
        tool_type:
          allOf:
            - $ref: "#/components/schemas/src__domain__files__tool__ToolType"
          title: Tool Type
          description: Type of Tool.
          default: json_schema
        commit_message:
          type: string
          title: Commit message
          description: Message describing the changes made.
      type: object
      title: ToolRequest
      description: Request to create a new Tool.
    ToolResultResponse:
      properties:
        id:
          type: string
          title: Id
        name:
          type: string
          title: Name
        signature:
          type: string
          title: Signature
        result:
          type: string
          title: Result
      type: object
      required:
        - id
        - name
        - signature
        - result
      title: ToolResultResponse
      description: A result from a tool used to populate the prompt template
    ToolSource:
      type: string
      enum:
        - organization
        - inline
      title: ToolSource
      description: |-
        Source of tool. Used to differentiate between tools and tool versions when they are combined in a list.

        V4 uses organization and inline. Those are deprecated and will be removed in favour of tool and tool_version.
    UpdateDatasetRequest:
      properties:
        path:
          type: string
          title: Dataset path
          description: Path of the Dataset including the Dataset name, which is used as a unique identifier.
        name:
          type: string
          title: Dataset name
          description: Name of the Dataset, which is used as a unique identifier.
      type: object
      title: UpdateDatasetRequest
    UpdateDatesetAction:
      type: string
      enum:
        - set
        - add
        - remove
      title: UpdateDatesetAction
      description: An enumeration.
    UpdateDirectoryRequest:
      properties:
        name:
          type: string
          title: Directory name
          description: Name to set for the directory.
        parent_id:
          type: string
          title: Parent directory ID
          description: ID of the parent directory. Specify this to move directories. Starts with `dir_`.
      type: object
      title: UpdateDirectoryRequest
    UpdateEvaluatorRequest:
      properties:
        path:
          type: string
          title: Evaluator path
          description: Path of the Evaluator including the Evaluator name, which is used as a unique identifier.
        name:
          type: string
          title: Evaluator Name
          description: Name of the Evaluator, which is used as a unique identifier.
      type: object
      title: UpdateEvaluatorRequest
    UpdatePromptRequest:
      properties:
        path:
          type: string
          title: Prompt path
          description: Path of the Prompt including the Prompt name, which is used as a unique identifier.
        name:
          type: string
          title: Prompt name
          description: Name of the Prompt.
      type: object
      title: UpdatePromptRequest
    UpdateToolRequest:
      properties:
        path:
          type: string
          title: Tool path
          description: Path of the Tool including the Tool name, which is used as a unique identifier.
        name:
          type: string
          title: Tool Name
          description: Name of the Tool, which is used as a unique identifier.
      type: object
      title: UpdateToolRequest
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError
    VersionDeploymentResponse:
      properties:
        file:
          anyOf:
            - $ref: "#/components/schemas/PromptResponse"
            - $ref: "#/components/schemas/src__external__app__models__v5__tools__ToolResponse"
            - $ref: "#/components/schemas/DatasetResponse"
            - $ref: "#/components/schemas/EvaluatorResponse"
          title: File
          description: The File that the deployed Version belongs to.
        environment:
          allOf:
            - $ref: "#/components/schemas/EnvironmentResponse"
          title: Environment
          description: The Environment that the Version is deployed to.
        type:
          type: string
          enum:
            - environment
          title: Type
      type: object
      required:
        - file
        - environment
        - type
      title: VersionDeploymentResponse
      description: A variable reference to the Version deployed to an Environment
    VersionIdResponse:
      properties:
        version:
          anyOf:
            - $ref: "#/components/schemas/PromptResponse"
            - $ref: "#/components/schemas/src__external__app__models__v5__tools__ToolResponse"
            - $ref: "#/components/schemas/DatasetResponse"
            - $ref: "#/components/schemas/EvaluatorResponse"
          title: Version
          description: The specific Version being referenced.
        type:
          type: string
          enum:
            - version
          title: Type
      type: object
      required:
        - version
        - type
      title: VersionIdResponse
      description: A reference to a specific Version by its ID
    VersionReferenceResponse:
      oneOf:
        - $ref: "#/components/schemas/VersionDeploymentResponse"
        - $ref: "#/components/schemas/VersionIdResponse"
      title: VersionReferenceResponse
      discriminator:
        propertyName: type
        mapping:
          environment: "#/components/schemas/VersionDeploymentResponse"
          version: "#/components/schemas/VersionIdResponse"
    VersionStats:
      properties:
        version_id:
          type: string
          title: Version ID
          description: Unique identifier for the Evaluated Version.
        num_logs:
          type: integer
          title: Number of Logs
          description: The total number of existing Logs for this Evaluated Version within the Evaluation Report. These are Logs that have been generated by this Evaluated Version on a Datapoint belonging to the Evaluation Report's Dataset Version.
        evaluator_version_stats:
          items:
            anyOf:
              - $ref: "#/components/schemas/NumericEvaluatorVersionStats"
              - $ref: "#/components/schemas/BooleanEvaluatorVersionStats"
          type: array
          title: Evaluator Version Stats
          description: Stats for each Evaluator Version used to evaluate this Evaluated Version.
      type: object
      required:
        - version_id
        - num_logs
        - evaluator_version_stats
      title: VersionStats
      description: Stats for an Evaluated Version in the Evaluation Report.
    VersionStatus:
      type: string
      enum:
        - uncommitted
        - committed
        - deleted
      title: VersionStatus
      description: An enumeration.
    src__domain__chat_types__enums__ToolType:
      type: string
      enum:
        - function
      title: ToolType
      description: The type of tool to call.
    src__domain__files__tool__ToolType:
      type: string
      enum:
        - pinecone_search
        - google
        - mock
        - snippet
        - json_schema
        - get_api_call
      title: ToolType
      description: Type of tool.
    src__external__app__models__v4__configs__ToolResponse:
      properties:
        id:
          type: string
          title: Tool ID
          description: The ID of the tool. Starts with either `config_` or `oc_`.
        name:
          type: string
          title: Name
          description: Name for the tool referenced by the model.
        description:
          type: string
          title: Description
          description: Description of the tool referenced by the model
        parameters:
          type: object
          title: Run arguments schema.
          description: "Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/"
        source:
          type: string
          title: Origin
          description: The origin of the tool
      type: object
      required:
        - id
        - name
      title: ToolResponse
    src__external__app__models__v4__feedback__FeedbackType:
      type: string
      enum:
        - rating
        - action
        - issue
        - correction
        - comment
      title: FeedbackType
      description: An enumeration.
    src__external__app__models__v4__orgs__base_models__UserResponse:
      properties:
        id:
          type: string
          title: User ID
          description: String ID of user. Starts with `usr_`.
        email_address:
          type: string
          title: Email address
          description: The user's email address.
        full_name:
          type: string
          title: Full name
          description: The user's full name.
        verified:
          type: boolean
          title: Verified
          description: Whether the user has verified their email address.
      type: object
      required:
        - id
        - email_address
        - verified
      title: UserResponse
    src__external__app__models__v5__datasets__DatasetRequest:
      properties:
        path:
          type: string
          title: Dataset path
          description: Path of the Dataset, including the name, which is used as a unique identifier.
        id:
          type: string
          title: Dataset ID
          description: ID for an existing Dataset to update.
        datapoints:
          items:
            $ref: "#/components/schemas/CreateDatapointRequest"
          type: array
          title: Datapoints
          description: The Datapoints to create this Dataset version with. Modify the `action` field to determine how these Datapoints are used.
        action:
          allOf:
            - $ref: "#/components/schemas/UpdateDatesetAction"
          title: Action
          description: "The action to take with the provided Datapoints.\n\n - If `\"set\"`, the created version will only contain the Datapoints provided in this request. \n - If `\"add\"`, the created version will contain the Datapoints provided in this request in addition to the Datapoints in the target version. \n - If `\"remove\"`, the created version will contain the Datapoints in the target version except for the Datapoints provided in this request. \n\nIf `\"add\"` or `\"remove\"`, one of the `version_id` or `environment` query parameters may be provided."
          default: set
        commit_message:
          type: string
          title: Commit message
          description: Message describing the changes made. If provided, a committed version of the Dataset is created. Otherwise, an uncommitted version is created.
      type: object
      required:
        - datapoints
      title: DatasetRequest
    src__external__app__models__v5__evaluations__DatasetRequest:
      properties:
        version_id:
          type: string
          title: Dataset Version ID
          description: Unique identifier for the Dataset Version to use in this evaluation. Starts with `dsv_`.
      type: object
      required:
        - version_id
      title: DatasetRequest
    src__external__app__models__v5__evaluations__EvaluatorRequest:
      properties:
        version_id:
          type: string
          title: Evaluator Version ID
          description: Unique identifier for the Evaluator Version to use in this evaluation. Starts with `evv_`.
        orchestrated:
          type: boolean
          title: Humanloop Orchestrated
          description: Whether the Evaluator is orchestrated by Humanloop. Default is `True`. If `False`, a log for the Evaluator should be submitted by the user via the API.
          default: true
      type: object
      required:
        - version_id
      title: EvaluatorRequest
    src__external__app__models__v5__evaluators__EvaluatorRequest:
      properties:
        path:
          type: string
          title: Evaluator path
          description: Path of the Evaluator, including the name, which is used as a unique identifier.
        id:
          type: string
          title: Evaluator ID
          description: ID for an existing Evaluator to update.
        commit_message:
          type: string
          title: Commit message
          description: Message describing the changes made.
        spec:
          oneOf:
            - $ref: "#/components/schemas/LLMEvaluatorRequest"
            - $ref: "#/components/schemas/CodeEvaluatorRequest"
            - $ref: "#/components/schemas/HumanEvaluatorRequest"
            - $ref: "#/components/schemas/ExternalEvaluatorRequest"
          title: Spec
          discriminator:
            propertyName: evaluator_type
            mapping:
              llm: "#/components/schemas/LLMEvaluatorRequest"
              python: "#/components/schemas/CodeEvaluatorRequest"
              human: "#/components/schemas/HumanEvaluatorRequest"
              external: "#/components/schemas/ExternalEvaluatorRequest"
      type: object
      required:
        - spec
      title: EvaluatorRequest
      description: Request model for creating a new Evaluator
    src__external__app__models__v5__feedback__FeedbackType:
      type: string
      enum:
        - rating
        - action
        - issue
        - correction
        - comment
      title: FeedbackType
      description: An enumeration.
    src__external__app__models__v5__tools__ToolResponse:
      properties:
        path:
          type: string
          title: Tool path
          description: Path of the Tool, including the name, which is used as a unique identifier.
        id:
          type: string
          title: Tool ID
          description: Unique identifier for the Tool.
        name:
          type: string
          title: Tool name
          description: Name of the Tool, which is used as a unique identifier.
        version_id:
          type: string
          title: Version ID
          description: Unique identifier for the specific Tool Version. If no query params provided, the default deployed Tool Version is returned.
        type:
          type: string
          enum:
            - tool
          title: Type
          default: tool
        environments:
          items:
            $ref: "#/components/schemas/EnvironmentResponse"
          type: array
          title: Environments
          description: The list of environments the Tool Version is deployed to.
        created_at:
          type: string
          format: date-time
          title: Created At
        updated_at:
          type: string
          format: date-time
          title: Updated At
        created_by:
          allOf:
            - $ref: "#/components/schemas/src__external__app__models__v5__users__UserResponse"
          title: Created by
          description: The user who created the Tool.
        status:
          allOf:
            - $ref: "#/components/schemas/VersionStatus"
          title: Status
          description: The status of the Tool Version.
        last_used_at:
          type: string
          format: date-time
          title: Last Used At
        function:
          allOf:
            - $ref: "#/components/schemas/ToolFunction"
          title: Function
          description: Callable function specification of the Tool shown to the model for tool calling.
        source_code:
          type: string
          title: Source Code
          description: Code source of the Tool.
        setup_values:
          type: object
          title: Setup values
          description: "Values needed to setup the Tool, defined in JSON Schema format: https://json-schema.org/"
        tool_type:
          allOf:
            - $ref: "#/components/schemas/src__domain__files__tool__ToolType"
          title: Tool Type
          description: Type of Tool.
          default: json_schema
        commit_message:
          type: string
          title: Commit message
          description: Message describing the changes made.
        version_logs_count:
          type: integer
          title: Number of logs for this version
          description: The number of logs that have been generated for this Tool Version
        total_logs_count:
          type: integer
          title: Total number of logs across all versions
          description: The number of logs that have been generated across all Tool Versions
        inputs:
          items:
            $ref: "#/components/schemas/InputResponse"
          type: array
          title: Prompt inputs
          description: Inputs associated to the Prompt. Inputs correspond to any of the variables used within the Tool template.
        evaluators:
          items:
            $ref: "#/components/schemas/MonitoringEvaluatorResponse"
          type: array
          title: Monitoring Evaluators
          description: Evaluators that have been attached to this Tool that are used for monitoring logs.
        signature:
          type: string
          title: Signature
          description: Signature of the Tool.
        evaluator_aggregates:
          items:
            $ref: "#/components/schemas/EvaluatorAggregate"
          type: array
          title: Evaluator aggregates
          description: Aggregation of Evaluator results for the Tool Version.
      type: object
      required:
        - path
        - id
        - name
        - version_id
        - created_at
        - updated_at
        - status
        - last_used_at
        - version_logs_count
        - total_logs_count
        - inputs
      title: ToolResponse
      description: Request to create a new Tool.
    src__external__app__models__v5__users__UserResponse:
      properties:
        id:
          type: string
          title: User ID
          description: Unique identifier for User. Starts with `usr`.
        email_address:
          type: string
          title: Email address
          description: The User's email address.
        full_name:
          type: string
          title: Full name
          description: The User's full name.
      type: object
      required:
        - id
        - email_address
      title: UserResponse
  securitySchemes:
    APIKeyHeader:
      type: apiKey
      in: header
      name: X-API-KEY
      description: |-
        The Humanloop API uses API keys for authentication. Visit your
        [API Keys](https://app.humanloop.com/account/api-keys) page to retrieve the
        API key you'll use in your requests.

        This key allows full access and control over your projects, so keep this secret
        and take care to not expose it in any client-side code.

        To use your API key, include it under the `X-API-KEY` header in your HTTP request.

        ```bash
        curl https://api.humanloop.com/v5/projects -H 'X-API-KEY: YOUR_API_KEY'
        ```

        If you're using the Python SDK, initialize the client with your API key before
        using other SDK methods:

        ```python
        from humanloop import Humanloop
        humanloop = Humanloop(api_key="YOUR_API_KEY")
        ```

        If you're using the TypeScript SDK, initialize the client with your API key before
        using other SDK methods:

        ```js
        import { Humanloop } from "humanloop";
        const humanloop = new Humanloop({apiKey: "YOUR_API_KEY"});
        ```
tags:
  - name: Authentication
    description: |-
      The Humanloop API uses API keys for authentication. Visit your
      [API Keys](https://app.humanloop.com/account/api-keys) page to retrieve the
      API key you'll use in your requests.

      This key allows full access and control over your projects, so keep this secret
      and take care to not expose it in any client-side code.

      To use your API key, include it under the `X-API-KEY` header in your HTTP request.

      ```bash
      curl https://api.humanloop.com/v5/projects -H 'X-API-KEY: YOUR_API_KEY'
      ```

      If you're using the Python SDK, initialize the client with your API key before
      using other SDK methods:

      ```python
      from humanloop import Humanloop
      humanloop = Humanloop(api_key="YOUR_API_KEY")
      ```

      If you're using the TypeScript SDK, initialize the client with your API key before
      using other SDK methods:

      ```js
      import { Humanloop } from "humanloop";
      const humanloop = new Humanloop({apiKey: "YOUR_API_KEY"});
      ```
  - name: Prompts
    description: |+
      Prompts define how a large language model behaves.

      #### What is a Prompt?

      A Prompt on Humanloop encapsulates the base instructions and other configuration for how a large language model should
      perform a specific task.

      Prompts have immutable versions that you can **Commit** and **Deploy**.
      To use a Prompt, you can **Call** it to create a generation and you can **Log** generations manually.

      #### Referencing Prompts

      Prompts are referenced by their unique ID or path.

      You can perform actions on a specific Prompt version by specifying either the `version_id`
      or `environment` query parameter in the request. If you provide a `version_id`, Humanloop will
      use the specified version of the Prompt. If you provide an `environment`, Humanloop will use the
      version of the Prompt that is currently deployed to that Environment.
      If you do not provide either a `version_id` or `environment`, Humanloop will use the Prompt version
      that is deployed to the default Environment.

  - name: Datasets
    description: |+
      Datasets are collections of input-output pairs that you can use within Humanloop for Evaluations.

      #### What is a Dataset?

      A Dataset is a collection of unique Datapoints. These Datapoints contain `inputs` and `target` fields. The `inputs`
      are used to populate a Prompt's template and the `target` can be referenced by Evaluators to evaluate the quality of
      the generated output.

      Note that Humanloop automatically deduplicates Datapoints. If you try to add a Datapoint that already exists, it will
      be ignored. If you intentionally want to add a duplicate Datapoint, you can add a unique identifier to the Datapoint's
      inputs such as `{_dedupe_id: <unique ID>}`.

      #### Creating Dataset versions

      Datasets have immutable versions. To add/remove Datapoint to/from an existing version, use the **Create** endpoint
      and specify `action` as `"add"` or `"remove"` respectively. You may also specify the `version_id` or `environment`
      query parameters to identify the existing version to base the new version on. If neither is provided, the version
      deployed to the default Environment will be used.

  - name: Evaluations
    description: |+
      Evaluations help you measure the performance of your Prompts, Tools and LLM Evaluators.

      An Evaluation consists of a Dataset, Evaluatees (i.e. Versions to evaluate), and Evaluators.
      When an Evaluation is created, Humanloop will start generating Logs, iterating through Datapoints in the Dataset,
      for each Evaluatee. The Evaluators will then be run on these Logs.

      Aggregate stats can be viewed in the Humanloop app or retrieved with the **Get Evaluation Stats** endpoint.

      Note that when an Evaluation is created, Humanloop will attempt to reuse any existing Logs for each Datapoint-Evaluatee
      pair. This means that you can create multiple Evaluations without generating new Logs unnecessarily.

  - name: Logs
    description: |+
      Logs contain the inputs and outputs of each time a Prompt, Tool or Evaluator is called.

      Humanloop automatically records the inputs and outputs when you Call a Prompt or Tool and saves a Log.
      Evaluator Logs are also created when an Evaluator is run on a Log.

      You can manually create Logs through the API.

      ...


  - name: Sessions
    description: |+
      Sessions are groups of Logs that track sequences of LLM actions.

      Sessions enable you to trace through related Logs across different Files. For
      example, a Session can contain a Prompt Log recording an LLM generation, a Tool
      Log recording a retrieval step, and Evaluator Logs measuring the quality of the
      generated text.

      Logs within a Session may be nested within each other. When Evaluators are run
      for monitoring, the Evaluator Logs are added to the Session that the evaluated
      Log is in, nested within the evaluated Log.

x-readme:
  samples-languages:
    - python
    - javascript
    - curl
