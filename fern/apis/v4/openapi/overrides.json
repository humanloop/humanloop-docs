{
  "paths": {
    "/completion": {
      "post": {
        "x-fern-examples": [
          {
            "name": "Simple",
            "request": {
              "model_config": {
                "model": "gpt-4o",
                "endpoint": "complete",
                "prompt_template": "write a limerick about {{topic}}"
              },
              "inputs": {
                "topic": "AI"
              },
              "project": "limerick"
            },
            "response": {
              "body": {
                "project_id": "pr_eJgRt5K1zivoFgHVlRnFv",
                "num_samples": 1,
                "logprobs": null,
                "suffix": null,
                "user": "jordan@humanloop.com",
                "data": [
                  {
                    "id": "data_hdsujCtCep4W5L7XwYpnn",
                    "index": 0,
                    "output": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                    "raw_output": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                    "inputs": {
                      "topic": "AI"
                    },
                    "finish_reason": "stop",
                    "model_config_id": "prv_AkObw2O2rquayfWHyJbqw",
                    "tool_results": []
                  }
                ],
                "usage": {
                  "prompt_tokens": 14,
                  "generation_tokens": 36,
                  "total_tokens": 50
                },
                "metadata": null,
                "provider_responses": [
                  {
                    "id": "chatcmpl-9SY6mNMWrL5gxtyL7xUOTIYZOjguD",
                    "choices": [
                      {
                        "finish_reason": "stop",
                        "index": 0,
                        "logprobs": null,
                        "message": {
                          "content": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                          "role": "assistant",
                          "function_call": null,
                          "tool_calls": null
                        }
                      }
                    ],
                    "created": 1716591324,
                    "model": "gpt-4o-2024-05-13",
                    "object": "chat.completion",
                    "system_fingerprint": "fp_3196d36131",
                    "usage": {
                      "completion_tokens": 36,
                      "prompt_tokens": 14,
                      "total_tokens": 50
                    }
                  }
                ],
                "provider_request": {
                  "messages": [
                    {
                      "content": "write a limerick about AI",
                      "role": "user"
                    }
                  ],
                  "stream": false,
                  "n": 1,
                  "model": "gpt-4o",
                  "temperature": 0.7,
                  "top_p": 1,
                  "presence_penalty": 0,
                  "frequency_penalty": 0,
                  "user": "jordan@humanloop.com"
                },
                "session_id": null
              }
            }
          },
          {
            "name": "Project ID and Session",
            "request": {
              "model_config": {
                "model": "gpt-4o",
                "endpoint": "complete",
                "prompt_template": "write a limerick about {{topic}}"
              },
              "inputs": {
                "topic": "AI"
              },
              "project_id": "pr_eJgRt5K1zivoFgHVlRnFv",
              "session_reference_id": "my_external_session_id"
            },
            "response": {
              "body": {
                "project_id": "pr_eJgRt5K1zivoFgHVlRnFv",
                "num_samples": 1,
                "logprobs": null,
                "suffix": null,
                "user": "jordan@humanloop.com",
                "data": [
                  {
                    "id": "data_hdsujCtCep4W5L7XwYpnn",
                    "index": 0,
                    "output": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                    "raw_output": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                    "inputs": {
                      "topic": "AI"
                    },
                    "finish_reason": "stop",
                    "model_config_id": "prv_AkObw2O2rquayfWHyJbqw",
                    "tool_results": []
                  }
                ],
                "usage": {
                  "prompt_tokens": 14,
                  "generation_tokens": 36,
                  "total_tokens": 50
                },
                "metadata": null,
                "provider_responses": [
                  {
                    "id": "chatcmpl-9SY6mNMWrL5gxtyL7xUOTIYZOjguD",
                    "choices": [
                      {
                        "finish_reason": "stop",
                        "index": 0,
                        "logprobs": null,
                        "message": {
                          "content": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                          "role": "assistant",
                          "function_call": null,
                          "tool_calls": null
                        }
                      }
                    ],
                    "created": 1716591324,
                    "model": "gpt-4o-2024-05-13",
                    "object": "chat.completion",
                    "system_fingerprint": "fp_3196d36131",
                    "usage": {
                      "completion_tokens": 36,
                      "prompt_tokens": 14,
                      "total_tokens": 50
                    }
                  }
                ],
                "provider_request": {
                  "messages": [
                    {
                      "content": "write a limerick about AI",
                      "role": "user"
                    }
                  ],
                  "stream": false,
                  "n": 1,
                  "model": "gpt-4o",
                  "temperature": 0.7,
                  "top_p": 1,
                  "presence_penalty": 0,
                  "frequency_penalty": 0,
                  "user": "jordan@humanloop.com"
                },
                "session_id": null
              }
            }
          }
        ]
      }
    },
    "/completion-deployed": {
      "post": {}
    },
    "/completion-experiment": {
      "post": {}
    },
    "/completion-model-config": {
      "post": {}
    },
    "/chat": {
      "post": {}
    },
    "/chat-deployed": {
      "post": {}
    },
    "/chat-experiment": {
      "post": {}
    },
    "/chat-model-config": {
      "post": {}
    },
    "/logs": {
      "get": {},
      "post": {},
      "delete": {},
      "patch": {}
    },
    "/logs/{id}": {
      "get": {},
      "patch": {}
    },
    "/feedback": {
      "post": {}
    },
    "/projects": {
      "get": {},
      "post": {}
    },
    "/projects/{id}": {
      "get": {},
      "delete": {},
      "patch": {}
    },
    "/projects/{id}/configs": {
      "get": {}
    },
    "/projects/{id}/active-config": {
      "get": {},
      "delete": {}
    },
    "/projects/{id}/active-experiment": {
      "delete": {}
    },
    "/projects/{id}/feedback-types": {
      "post": {},
      "patch": {}
    },
    "/projects/{id}/export": {
      "post": {}
    },
    "/projects/{id}/deployed-configs": {
      "get": {}
    },
    "/projects/{project_id}/deploy-config": {
      "patch": {}
    },
    "/projects/{project_id}/deployed-config/{environment_id}": {
      "delete": {}
    },
    "/model-configs": {
      "post": {}
    },
    "/model-configs/{id}": {
      "get": {}
    },
    "/model-configs/{id}/export": {
      "post": {}
    },
    "/model-configs/serialize": {
      "post": {}
    },
    "/model-configs/deserialize": {
      "post": {}
    },
    "/projects/{project_id}/experiments": {
      "get": {},
      "post": {}
    },
    "/experiments/{experiment_id}": {
      "delete": {},
      "patch": {}
    },
    "/experiments/{experiment_id}/model-config": {
      "get": {}
    },
    "/sessions": {
      "get": {},
      "post": {}
    },
    "/sessions/{id}": {
      "get": {}
    },
    "/evaluators": {
      "get": {},
      "post": {}
    },
    "/evaluators/{id}": {
      "get": {},
      "delete": {},
      "patch": {}
    },
    "/datapoints/{id}": {
      "get": {},
      "patch": {}
    },
    "/datapoints": {
      "delete": {}
    },
    "/projects/{project_id}/datasets": {
      "get": {},
      "post": {}
    },
    "/datasets": {
      "get": {}
    },
    "/datasets/{id}": {
      "get": {},
      "delete": {},
      "patch": {}
    },
    "/datasets/{dataset_id}/datapoints": {
      "get": {},
      "post": {}
    },
    "/evaluations/{id}": {
      "get": {}
    },
    "/evaluations/{id}/datapoints": {
      "get": {}
    },
    "/projects/{project_id}/evaluations": {
      "get": {},
      "post": {}
    },
    "/evaluations/{evaluation_id}/log": {
      "post": {}
    },
    "/evaluations/{evaluation_id}/result": {
      "post": {}
    },
    "/evaluations/{id}/status": {
      "patch": {}
    },
    "/evaluations/{id}/evaluators": {
      "patch": {}
    },
    "/evaluations": {
      "get": {}
    }
  },
  "components": {
    "schemas": {
      "AddEvaluatorsRequest": {
        "properties": {
          "evaluator_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Evaluators",
            "description": "IDs of evaluators to add to the evaluation run. IDs start with `evfn_`"
          }
        },
        "type": "object",
        "required": ["evaluator_ids"],
        "title": "AddEvaluatorsRequest"
      },
      "AgentConfigResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Config ID",
            "description": "String ID of config. Starts with `config_`."
          },
          "other": {
            "type": "object",
            "title": "Other parameters",
            "description": "Other parameters that define the config."
          },
          "type": {
            "type": "string",
            "enum": ["agent"],
            "title": "Type"
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              }
            ],
            "title": "Created by",
            "description": "The user who created the config."
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Whether the config is committed or not."
          },
          "name": {
            "type": "string",
            "title": "Config name",
            "description": "Name of config."
          },
          "description": {
            "type": "string",
            "title": "Config description",
            "description": "Description of config."
          },
          "agent_class": {
            "type": "string",
            "title": "Agent class",
            "description": "Class of the agent."
          },
          "tools": {
            "items": {
              "$ref": "#/components/schemas/ToolConfigRequest"
            },
            "type": "array",
            "title": "Tools",
            "description": "Tools associated with the agent.",
            "default": []
          },
          "model_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelConfigRequest"
              }
            ],
            "title": "Model config",
            "description": "Model config associated with the agent."
          }
        },
        "type": "object",
        "required": [
          "id",
          "type",
          "status",
          "name",
          "agent_class",
          "model_config"
        ],
        "title": "AgentConfigResponse"
      },
      "BaseMetricResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Metric ID",
            "description": "ID of the metric. Starts with 'metric_'."
          },
          "name": {
            "type": "string",
            "title": "Metric name",
            "description": "The name of the metric."
          },
          "description": {
            "type": "string",
            "title": "Metric description",
            "description": "A description of what the metric measures."
          },
          "code": {
            "type": "string",
            "title": "Metric code",
            "description": "Python code used to calculate a metric value on each logged datapoint."
          },
          "default": {
            "type": "boolean",
            "title": "Metric default flag",
            "description": "Whether the metric is a global default metric. Metrics with this flag enabled cannot be deleted or modified."
          },
          "active": {
            "type": "boolean",
            "title": "Metric active flag",
            "description": "If enabled, the metric is calculated for every logged datapoint."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "code",
          "default",
          "active",
          "created_at",
          "updated_at"
        ],
        "title": "BaseMetricResponse"
      },
      "Body_ModelConfigs_deserialize": {
        "properties": {
          "config": {
            "type": "string",
            "title": "Config"
          }
        },
        "type": "object",
        "required": ["config"],
        "title": "Body_ModelConfigs_deserialize"
      },
      "CategoricalFeedbackLabel": {
        "properties": {
          "value": {
            "type": "string",
            "title": "Label value"
          },
          "sentiment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LabelSentiment"
              }
            ],
            "title": "Feedback label sentiment",
            "description": "Whether the feedback sentiment is positive or negative."
          }
        },
        "type": "object",
        "required": ["value", "sentiment"],
        "title": "CategoricalFeedbackLabel"
      },
      "ChatDataResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Log ID",
            "description": "Unique ID for the model inputs and output logged to Humanloop. Use this when recording feedback later."
          },
          "index": {
            "type": "integer",
            "title": "Sample index",
            "description": "The index for the sampled generation for a given input. The num_samples request parameter controls how many samples are generated."
          },
          "output": {
            "type": "string",
            "title": "Sanitized output text",
            "description": "Output text returned from the provider model with leading and trailing whitespaces stripped."
          },
          "raw_output": {
            "type": "string",
            "title": "Provider's output text",
            "description": "Raw output text returned from the provider model."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the chat template."
          },
          "finish_reason": {
            "type": "string",
            "title": "Finish reason",
            "description": "Why the generation ended. One of 'stop' (indicating a stop token was encountered), or 'length' (indicating the max tokens limit has been reached), or 'tool_call' (indicating that the model has chosen to call a tool - in which case the tool_call parameter of the response will be populated). It will be set as null for the intermediary responses during a stream, and will only be set as non-null for the final streamed token."
          },
          "model_config_id": {
            "type": "string",
            "title": "The ID of your model configuration",
            "description": "The model configuration used to create the generation."
          },
          "tool_results": {
            "items": {
              "$ref": "#/components/schemas/ToolResultResponse"
            },
            "type": "array",
            "title": "Tool results",
            "description": "Results of any tools run during the generation."
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ChatMessageWithToolCall"
            },
            "type": "array",
            "title": "Messages",
            "description": "The messages passed to the to provider chat endpoint."
          },
          "tool_call": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FunctionTool"
              }
            ],
            "title": "Tool call",
            "description": "Deprecated: Please use tool_calls field within the output_message.JSON definition of the tool to call and the corresponding argument values. Will be populated when finish_reason='tool_call'.",
            "deprecated": true
          },
          "tool_calls": {
            "items": {
              "$ref": "#/components/schemas/ToolCall"
            },
            "type": "array",
            "title": "Tool call",
            "description": "Deprecated: Please use tool_calls field within the output_message.JSON definition of the tools to call and the corresponding argument values. Will be populated when finish_reason='tool_call'."
          },
          "output_message": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatMessageWithToolCall"
              }
            ],
            "title": "Output message",
            "description": "The message returned by the provider."
          }
        },
        "type": "object",
        "required": [
          "id",
          "index",
          "output",
          "raw_output",
          "model_config_id",
          "output_message"
        ],
        "title": "ChatDataResponse",
        "description": "Overwrite DataResponse for chat."
      },
      "ChatDeployedRequest": {
        "properties": {
          "project": {
            "type": "string",
            "title": "Project name",
            "description": "Unique project name. If no project exists with this name, a new project will be created."
          },
          "project_id": {
            "type": "string",
            "title": "Project ID",
            "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided."
          },
          "session_id": {
            "type": "string",
            "title": "Session ID",
            "description": "ID of the session to associate the datapoint."
          },
          "session_reference_id": {
            "type": "string",
            "title": "Session Reference ID",
            "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
          },
          "parent_id": {
            "type": "string",
            "title": "Parent ID",
            "description": "ID associated to the parent datapoint in a session."
          },
          "parent_reference_id": {
            "type": "string",
            "title": "Parent Reference ID",
            "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "save": {
            "type": "boolean",
            "title": "Save",
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "default": true
          },
          "source_datapoint_id": {
            "type": "string",
            "title": "Source datapoint ID",
            "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
          },
          "provider_api_keys": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProviderApiKeys"
              }
            ],
            "title": "Provider API Keys",
            "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
          },
          "num_samples": {
            "type": "integer",
            "title": "Number of samples",
            "description": "The number of generations.",
            "default": 1
          },
          "stream": {
            "type": "boolean",
            "title": "Whether to stream partial results",
            "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.",
            "default": false
          },
          "user": {
            "type": "string",
            "title": "End-user identifier",
            "description": "End-user ID passed through to provider call."
          },
          "seed": {
            "type": "integer",
            "title": "Seed",
            "description": "Deprecated field: the seed is instead set as part of the request.config object.",
            "deprecated": true
          },
          "return_inputs": {
            "type": "boolean",
            "title": "Return inputs",
            "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true.",
            "default": true
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ChatMessageWithToolCall"
            },
            "type": "array",
            "title": "Messages",
            "description": "The messages passed to the to provider chat endpoint."
          },
          "tool_choice": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["none"]
              },
              {
                "type": "string",
                "enum": ["auto"]
              },
              {
                "$ref": "#/components/schemas/ToolChoice"
              }
            ],
            "title": "Tool choice",
            "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function."
          },
          "tool_call": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              }
            ],
            "title": "Tool call",
            "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
            "deprecated": true
          },
          "response_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseFormat"
              }
            ],
            "title": "Response format",
            "description": "The format of the response. Only type json_object is currently supported for chat."
          },
          "environment": {
            "type": "string",
            "title": "Environment name",
            "description": "The environment name used to create a chat response. If not specified, the default environment will be used."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["messages"],
        "title": "ChatDeployedRequest",
        "description": "Chat request for active deployment."
      },
      "ChatExperimentRequest": {
        "properties": {
          "project": {
            "type": "string",
            "title": "Project name",
            "description": "Unique project name. If no project exists with this name, a new project will be created."
          },
          "project_id": {
            "type": "string",
            "title": "Project ID",
            "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided."
          },
          "session_id": {
            "type": "string",
            "title": "Session ID",
            "description": "ID of the session to associate the datapoint."
          },
          "session_reference_id": {
            "type": "string",
            "title": "Session Reference ID",
            "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
          },
          "parent_id": {
            "type": "string",
            "title": "Parent ID",
            "description": "ID associated to the parent datapoint in a session."
          },
          "parent_reference_id": {
            "type": "string",
            "title": "Parent Reference ID",
            "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "save": {
            "type": "boolean",
            "title": "Save",
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "default": true
          },
          "source_datapoint_id": {
            "type": "string",
            "title": "Source datapoint ID",
            "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
          },
          "provider_api_keys": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProviderApiKeys"
              }
            ],
            "title": "Provider API Keys",
            "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
          },
          "num_samples": {
            "type": "integer",
            "title": "Number of samples",
            "description": "The number of chat responses, where each chat response will use a model configuration sampled from the experiment.",
            "default": 1
          },
          "stream": {
            "type": "boolean",
            "title": "Whether to stream partial results",
            "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.",
            "default": false
          },
          "user": {
            "type": "string",
            "title": "End-user identifier",
            "description": "End-user ID passed through to provider call."
          },
          "seed": {
            "type": "integer",
            "title": "Seed",
            "description": "Deprecated field: the seed is instead set as part of the request.config object.",
            "deprecated": true
          },
          "return_inputs": {
            "type": "boolean",
            "title": "Return inputs",
            "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true.",
            "default": true
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ChatMessageWithToolCall"
            },
            "type": "array",
            "title": "Messages",
            "description": "The messages passed to the to provider chat endpoint."
          },
          "tool_choice": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["none"]
              },
              {
                "type": "string",
                "enum": ["auto"]
              },
              {
                "$ref": "#/components/schemas/ToolChoice"
              }
            ],
            "title": "Tool choice",
            "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function."
          },
          "tool_call": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              }
            ],
            "title": "Tool call",
            "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
            "deprecated": true
          },
          "response_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseFormat"
              }
            ],
            "title": "Response format",
            "description": "The format of the response. Only type json_object is currently supported for chat."
          },
          "experiment_id": {
            "type": "string",
            "title": "Experiment ID",
            "description": "If an experiment ID is provided a model configuration will be sampled from the experiments active model configurations."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["messages", "experiment_id"],
        "title": "ChatExperimentRequest",
        "description": "Base chat request."
      },
      "ChatMessageWithToolCall": {
        "properties": {
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/TextChatContent"
                    },
                    {
                      "$ref": "#/components/schemas/ImageChatContent"
                    }
                  ]
                },
                "type": "array"
              }
            ],
            "title": "Content",
            "description": "The content of the message.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Optional name of the message author.",
            "nullable": true
          },
          "tool_call_id": {
            "type": "string",
            "title": "Tool call id",
            "description": "Tool call that this message is responding to.",
            "nullable": true
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatRole"
              }
            ],
            "title": "Role",
            "description": "Role of the message author."
          },
          "tool_calls": {
            "items": {
              "$ref": "#/components/schemas/ToolCall"
            },
            "type": "array",
            "title": "Tool calls",
            "description": "A list of tool calls requested by the assistant.",
            "nullable": true
          },
          "tool_call": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FunctionTool"
              }
            ],
            "title": "Tool call",
            "description": "NB: Deprecated in favour of tool_calls. A tool call requested by the assistant.",
            "deprecated": true,
            "nullable": true
          }
        },
        "type": "object",
        "required": ["role"],
        "title": "ChatMessageWithToolCall"
      },
      "ChatModelConfigRequest": {
        "properties": {
          "project": {
            "type": "string",
            "title": "Project name",
            "description": "Unique project name. If no project exists with this name, a new project will be created."
          },
          "project_id": {
            "type": "string",
            "title": "Project ID",
            "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided."
          },
          "session_id": {
            "type": "string",
            "title": "Session ID",
            "description": "ID of the session to associate the datapoint."
          },
          "session_reference_id": {
            "type": "string",
            "title": "Session Reference ID",
            "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
          },
          "parent_id": {
            "type": "string",
            "title": "Parent ID",
            "description": "ID associated to the parent datapoint in a session."
          },
          "parent_reference_id": {
            "type": "string",
            "title": "Parent Reference ID",
            "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "save": {
            "type": "boolean",
            "title": "Save",
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "default": true
          },
          "source_datapoint_id": {
            "type": "string",
            "title": "Source datapoint ID",
            "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
          },
          "provider_api_keys": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProviderApiKeys"
              }
            ],
            "title": "Provider API Keys",
            "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
          },
          "num_samples": {
            "type": "integer",
            "title": "Number of samples",
            "description": "The number of generations.",
            "default": 1
          },
          "stream": {
            "type": "boolean",
            "title": "Whether to stream partial results",
            "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.",
            "default": false
          },
          "user": {
            "type": "string",
            "title": "End-user identifier",
            "description": "End-user ID passed through to provider call."
          },
          "seed": {
            "type": "integer",
            "title": "Seed",
            "description": "Deprecated field: the seed is instead set as part of the request.config object.",
            "deprecated": true
          },
          "return_inputs": {
            "type": "boolean",
            "title": "Return inputs",
            "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true.",
            "default": true
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ChatMessageWithToolCall"
            },
            "type": "array",
            "title": "Messages",
            "description": "The messages passed to the to provider chat endpoint."
          },
          "tool_choice": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["none"]
              },
              {
                "type": "string",
                "enum": ["auto"]
              },
              {
                "$ref": "#/components/schemas/ToolChoice"
              }
            ],
            "title": "Tool choice",
            "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function."
          },
          "tool_call": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              }
            ],
            "title": "Tool call",
            "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
            "deprecated": true
          },
          "response_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseFormat"
              }
            ],
            "title": "Response format",
            "description": "The format of the response. Only type json_object is currently supported for chat."
          },
          "model_config_id": {
            "type": "string",
            "title": "Model config ID",
            "description": "Identifies the model configuration used to create a chat response."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["messages", "model_config_id"],
        "title": "ChatModelConfigRequest",
        "description": "Base chat request."
      },
      "ChatRequest": {
        "properties": {
          "project": {
            "type": "string",
            "title": "Project name",
            "description": "Unique project name. If no project exists with this name, a new project will be created."
          },
          "project_id": {
            "type": "string",
            "title": "Project ID",
            "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided."
          },
          "session_id": {
            "type": "string",
            "title": "Session ID",
            "description": "ID of the session to associate the datapoint."
          },
          "session_reference_id": {
            "type": "string",
            "title": "Session Reference ID",
            "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
          },
          "parent_id": {
            "type": "string",
            "title": "Parent ID",
            "description": "ID associated to the parent datapoint in a session."
          },
          "parent_reference_id": {
            "type": "string",
            "title": "Parent Reference ID",
            "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "save": {
            "type": "boolean",
            "title": "Save",
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "default": true
          },
          "source_datapoint_id": {
            "type": "string",
            "title": "Source datapoint ID",
            "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
          },
          "provider_api_keys": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProviderApiKeys"
              }
            ],
            "title": "Provider API Keys",
            "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
          },
          "num_samples": {
            "type": "integer",
            "title": "Number of samples",
            "description": "The number of generations.",
            "default": 1
          },
          "stream": {
            "type": "boolean",
            "title": "Whether to stream partial results",
            "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.",
            "default": false
          },
          "user": {
            "type": "string",
            "title": "End-user identifier",
            "description": "End-user ID passed through to provider call."
          },
          "seed": {
            "type": "integer",
            "title": "Seed",
            "description": "Deprecated field: the seed is instead set as part of the request.config object.",
            "deprecated": true
          },
          "return_inputs": {
            "type": "boolean",
            "title": "Return inputs",
            "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true.",
            "default": true
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ChatMessageWithToolCall"
            },
            "type": "array",
            "title": "Messages",
            "description": "The messages passed to the to provider chat endpoint."
          },
          "tool_choice": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["none"]
              },
              {
                "type": "string",
                "enum": ["auto"]
              },
              {
                "$ref": "#/components/schemas/ToolChoice"
              }
            ],
            "title": "Tool choice",
            "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function."
          },
          "tool_call": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              }
            ],
            "title": "Tool call",
            "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
            "deprecated": true
          },
          "response_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseFormat"
              }
            ],
            "title": "Response format",
            "description": "The format of the response. Only type json_object is currently supported for chat."
          },
          "model_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelConfigChatRequest"
              }
            ],
            "title": "Model configuration",
            "description": "The model configuration used to create a chat response."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["messages", "model_config"],
        "title": "ChatRequest",
        "description": "Base chat request."
      },
      "ChatResponse": {
        "properties": {
          "project_id": {
            "type": "string",
            "title": "Project ID",
            "description": "Unique identifier of the parent project. Will not be provided if the request was made without providing a project name or id"
          },
          "num_samples": {
            "type": "integer",
            "title": "Number of samples",
            "description": "The number of chat responses.",
            "default": 1
          },
          "logprobs": {
            "type": "integer",
            "title": "Log probabilities",
            "description": "Include the log probabilities of the top n tokens in the provider_response"
          },
          "suffix": {
            "type": "string",
            "title": "Completion suffix",
            "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts."
          },
          "user": {
            "type": "string",
            "title": "End-user identifier",
            "description": "End-user ID passed through to provider call."
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/ChatDataResponse"
            },
            "type": "array",
            "title": "Logged data",
            "description": "Array containing the chat responses."
          },
          "usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Usage"
              }
            ],
            "title": "Usage",
            "description": "Counts of the number of tokens used and related stats."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "provider_responses": {
            "items": {},
            "type": "array",
            "title": "Provider responses",
            "description": "The raw responses returned by the model provider."
          },
          "provider_request": {
            "type": "object",
            "title": "Provider request",
            "description": "The raw request sent to the model provider."
          },
          "session_id": {
            "type": "string",
            "title": "Session ID",
            "description": "ID of the session if it belongs to one."
          },
          "tool_choice": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["none"]
              },
              {
                "type": "string",
                "enum": ["auto"]
              },
              {
                "$ref": "#/components/schemas/ToolChoice"
              }
            ],
            "title": "Tool choice",
            "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function."
          }
        },
        "type": "object",
        "required": ["data", "provider_responses"],
        "title": "ChatResponse",
        "description": "Overwrite GenerateResponse for chat."
      },
      "ChatRole": {
        "type": "string",
        "enum": ["user", "assistant", "system", "tool"],
        "title": "ChatRole",
        "description": "An enumeration."
      },
      "CompletionDeployedRequest": {
        "properties": {
          "project": {
            "type": "string",
            "title": "Project name",
            "description": "Unique project name. If no project exists with this name, a new project will be created."
          },
          "project_id": {
            "type": "string",
            "title": "Project ID",
            "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided."
          },
          "session_id": {
            "type": "string",
            "title": "Session ID",
            "description": "ID of the session to associate the datapoint."
          },
          "session_reference_id": {
            "type": "string",
            "title": "Session Reference ID",
            "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
          },
          "parent_id": {
            "type": "string",
            "title": "Parent ID",
            "description": "ID associated to the parent datapoint in a session."
          },
          "parent_reference_id": {
            "type": "string",
            "title": "Parent Reference ID",
            "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "save": {
            "type": "boolean",
            "title": "Save",
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "default": true
          },
          "source_datapoint_id": {
            "type": "string",
            "title": "Source datapoint ID",
            "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
          },
          "provider_api_keys": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProviderApiKeys"
              }
            ],
            "title": "Provider API Keys",
            "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
          },
          "num_samples": {
            "type": "integer",
            "title": "Number of samples",
            "description": "The number of generations.",
            "default": 1
          },
          "stream": {
            "type": "boolean",
            "title": "Whether to stream partial results",
            "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.",
            "default": false
          },
          "user": {
            "type": "string",
            "title": "End-user identifier",
            "description": "End-user ID passed through to provider call."
          },
          "seed": {
            "type": "integer",
            "title": "Seed",
            "description": "Deprecated field: the seed is instead set as part of the request.config object.",
            "deprecated": true
          },
          "return_inputs": {
            "type": "boolean",
            "title": "Return inputs",
            "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true.",
            "default": true
          },
          "logprobs": {
            "type": "integer",
            "title": "Log probabilities of most likely n tokens",
            "description": "Include the log probabilities of the top n tokens in the provider_response"
          },
          "suffix": {
            "type": "string",
            "title": "Completion suffix",
            "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts."
          },
          "environment": {
            "type": "string",
            "title": "Environment name",
            "description": "The environment name used to create a chat response. If not specified, the default environment will be used."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "CompletionDeployedRequest",
        "description": "Completion request using the project's active deployment."
      },
      "CompletionExperimentRequest": {
        "properties": {
          "project": {
            "type": "string",
            "title": "Project name",
            "description": "Unique project name. If no project exists with this name, a new project will be created."
          },
          "project_id": {
            "type": "string",
            "title": "Project ID",
            "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided."
          },
          "session_id": {
            "type": "string",
            "title": "Session ID",
            "description": "ID of the session to associate the datapoint."
          },
          "session_reference_id": {
            "type": "string",
            "title": "Session Reference ID",
            "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
          },
          "parent_id": {
            "type": "string",
            "title": "Parent ID",
            "description": "ID associated to the parent datapoint in a session."
          },
          "parent_reference_id": {
            "type": "string",
            "title": "Parent Reference ID",
            "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "save": {
            "type": "boolean",
            "title": "Save",
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "default": true
          },
          "source_datapoint_id": {
            "type": "string",
            "title": "Source datapoint ID",
            "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
          },
          "provider_api_keys": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProviderApiKeys"
              }
            ],
            "title": "Provider API Keys",
            "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
          },
          "num_samples": {
            "type": "integer",
            "title": "Number of samples",
            "description": "The number of chat responses, where each chat response will use a model configuration sampled from the experiment.",
            "default": 1
          },
          "stream": {
            "type": "boolean",
            "title": "Whether to stream partial results",
            "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.",
            "default": false
          },
          "user": {
            "type": "string",
            "title": "End-user identifier",
            "description": "End-user ID passed through to provider call."
          },
          "seed": {
            "type": "integer",
            "title": "Seed",
            "description": "Deprecated field: the seed is instead set as part of the request.config object.",
            "deprecated": true
          },
          "return_inputs": {
            "type": "boolean",
            "title": "Return inputs",
            "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true.",
            "default": true
          },
          "logprobs": {
            "type": "integer",
            "title": "Log probabilities of most likely n tokens",
            "description": "Include the log probabilities of the top n tokens in the provider_response"
          },
          "suffix": {
            "type": "string",
            "title": "Completion suffix",
            "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts."
          },
          "experiment_id": {
            "type": "string",
            "title": "Experiment ID",
            "description": "If an experiment ID is provided a model configuration will be sampled from the experiments active model configurations."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["experiment_id"],
        "title": "CompletionExperimentRequest",
        "description": "Completion request for a specific experiment."
      },
      "CompletionModelConfigRequest": {
        "properties": {
          "project": {
            "type": "string",
            "title": "Project name",
            "description": "Unique project name. If no project exists with this name, a new project will be created."
          },
          "project_id": {
            "type": "string",
            "title": "Project ID",
            "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided."
          },
          "session_id": {
            "type": "string",
            "title": "Session ID",
            "description": "ID of the session to associate the datapoint."
          },
          "session_reference_id": {
            "type": "string",
            "title": "Session Reference ID",
            "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
          },
          "parent_id": {
            "type": "string",
            "title": "Parent ID",
            "description": "ID associated to the parent datapoint in a session."
          },
          "parent_reference_id": {
            "type": "string",
            "title": "Parent Reference ID",
            "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "save": {
            "type": "boolean",
            "title": "Save",
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "default": true
          },
          "source_datapoint_id": {
            "type": "string",
            "title": "Source datapoint ID",
            "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
          },
          "provider_api_keys": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProviderApiKeys"
              }
            ],
            "title": "Provider API Keys",
            "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
          },
          "num_samples": {
            "type": "integer",
            "title": "Number of samples",
            "description": "The number of generations.",
            "default": 1
          },
          "stream": {
            "type": "boolean",
            "title": "Whether to stream partial results",
            "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.",
            "default": false
          },
          "user": {
            "type": "string",
            "title": "End-user identifier",
            "description": "End-user ID passed through to provider call."
          },
          "seed": {
            "type": "integer",
            "title": "Seed",
            "description": "Deprecated field: the seed is instead set as part of the request.config object.",
            "deprecated": true
          },
          "return_inputs": {
            "type": "boolean",
            "title": "Return inputs",
            "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true.",
            "default": true
          },
          "logprobs": {
            "type": "integer",
            "title": "Log probabilities of most likely n tokens",
            "description": "Include the log probabilities of the top n tokens in the provider_response"
          },
          "suffix": {
            "type": "string",
            "title": "Completion suffix",
            "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts."
          },
          "model_config_id": {
            "type": "string",
            "title": "Model config ID",
            "description": "Identifies the model configuration used to create a chat response."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["model_config_id"],
        "title": "CompletionModelConfigRequest",
        "description": "Completion request for a specific model config."
      },
      "CompletionRequest": {
        "properties": {
          "project": {
            "type": "string",
            "title": "Project name",
            "description": "Unique project name. If no project exists with this name, a new project will be created."
          },
          "project_id": {
            "type": "string",
            "title": "Project ID",
            "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided."
          },
          "session_id": {
            "type": "string",
            "title": "Session ID",
            "description": "ID of the session to associate the datapoint."
          },
          "session_reference_id": {
            "type": "string",
            "title": "Session Reference ID",
            "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
          },
          "parent_id": {
            "type": "string",
            "title": "Parent ID",
            "description": "ID associated to the parent datapoint in a session."
          },
          "parent_reference_id": {
            "type": "string",
            "title": "Parent Reference ID",
            "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "save": {
            "type": "boolean",
            "title": "Save",
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "default": true
          },
          "source_datapoint_id": {
            "type": "string",
            "title": "Source datapoint ID",
            "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
          },
          "provider_api_keys": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProviderApiKeys"
              }
            ],
            "title": "Provider API Keys",
            "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
          },
          "num_samples": {
            "type": "integer",
            "title": "Number of samples",
            "description": "The number of generations.",
            "default": 1
          },
          "stream": {
            "type": "boolean",
            "title": "Whether to stream partial results",
            "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.",
            "default": false
          },
          "user": {
            "type": "string",
            "title": "End-user identifier",
            "description": "End-user ID passed through to provider call."
          },
          "seed": {
            "type": "integer",
            "title": "Seed",
            "description": "Deprecated field: the seed is instead set as part of the request.config object.",
            "deprecated": true
          },
          "return_inputs": {
            "type": "boolean",
            "title": "Return inputs",
            "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true.",
            "default": true
          },
          "logprobs": {
            "type": "integer",
            "title": "Log probabilities of most likely n tokens",
            "description": "Include the log probabilities of the top n tokens in the provider_response"
          },
          "suffix": {
            "type": "string",
            "title": "Completion suffix",
            "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts."
          },
          "model_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelConfigCompletionRequest"
              }
            ],
            "title": "Model configuration",
            "description": "The model configuration used to generate."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["model_config"],
        "title": "CompletionRequest",
        "description": "Completion request with a provided model config."
      },
      "CompletionResponse": {
        "properties": {
          "project_id": {
            "type": "string",
            "title": "Project ID",
            "description": "Unique identifier of the parent project. Will not be provided if the request was made without providing a project name or id"
          },
          "num_samples": {
            "type": "integer",
            "title": "Number of samples",
            "description": "How many completions to make for each set of inputs.",
            "default": 1
          },
          "logprobs": {
            "type": "integer",
            "title": "Log probabilities",
            "description": "Include the log probabilities of the top n tokens in the provider_response"
          },
          "suffix": {
            "type": "string",
            "title": "Completion suffix",
            "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts."
          },
          "user": {
            "type": "string",
            "title": "End-user identifier",
            "description": "End-user ID passed through to provider call."
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/DataResponse"
            },
            "type": "array",
            "title": "Logged data",
            "description": "Array containing the generation responses."
          },
          "usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Usage"
              }
            ],
            "title": "Usage",
            "description": "Counts of the number of tokens used and related stats."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "provider_responses": {
            "items": {},
            "type": "array",
            "title": "Provider responses",
            "description": "The raw responses returned by the model provider."
          },
          "provider_request": {
            "type": "object",
            "title": "Provider request",
            "description": "The raw request sent to the model provider."
          },
          "session_id": {
            "type": "string",
            "title": "Session ID",
            "description": "ID of the session if it belongs to one."
          }
        },
        "type": "object",
        "required": ["data", "provider_responses"],
        "title": "CompletionResponse"
      },
      "ConfigResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ModelConfigResponse"
          },
          {
            "$ref": "#/components/schemas/ToolConfigResponse"
          },
          {
            "$ref": "#/components/schemas/AgentConfigResponse"
          },
          {
            "$ref": "#/components/schemas/GenericConfigResponse"
          }
        ],
        "title": "ConfigResponse",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "model": "#/components/schemas/ModelConfigResponse",
            "tool": "#/components/schemas/ToolConfigResponse",
            "agent": "#/components/schemas/AgentConfigResponse",
            "generic": "#/components/schemas/GenericConfigResponse"
          }
        }
      },
      "ConfigType": {
        "type": "string",
        "enum": ["generic", "model", "tool", "agent"],
        "title": "ConfigType",
        "description": "An enumeration."
      },
      "CreateDatapointRequest": {
        "properties": {
          "inputs": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Inputs",
            "description": "The inputs to the prompt template for this datapoint."
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ChatMessageWithToolCall"
            },
            "type": "array",
            "title": "Chat messages",
            "description": "The chat messages for this datapoint."
          },
          "target": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "object"
                },
                {
                  "items": {},
                  "type": "array"
                }
              ]
            },
            "type": "object",
            "title": "Target",
            "description": "Object with criteria necessary to evaluate this datapoint."
          }
        },
        "type": "object",
        "title": "CreateDatapointRequest"
      },
      "CreateDatapointsByLogsRequest": {
        "properties": {
          "log_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Log IDs",
            "description": "The IDs of the logs to create datapoints from."
          }
        },
        "type": "object",
        "required": ["log_ids"],
        "title": "CreateDatapointsByLogsRequest"
      },
      "CreateDatasetRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "Name",
            "description": "The name of the dataset."
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "title": "Description",
            "description": "The description of the dataset."
          }
        },
        "type": "object",
        "required": ["name", "description"],
        "title": "CreateDatasetRequest"
      },
      "CreateEvaluationLogRequest": {
        "properties": {
          "datapoint_id": {
            "type": "string",
            "title": "Datapoint ID",
            "description": "The datapoint for which a log was generated. Must be one of the datapoints in the dataset being evaluated."
          },
          "log": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LogRequest"
              }
            ],
            "title": "Log",
            "description": "The log generated for the datapoint."
          }
        },
        "type": "object",
        "required": ["datapoint_id", "log"],
        "title": "CreateEvaluationLogRequest",
        "description": "An externally generated log for an evaluation."
      },
      "CreateEvaluationRequest": {
        "properties": {
          "config_id": {
            "type": "string",
            "title": "Config",
            "description": "ID of the config to evaluate. Starts with `config_`."
          },
          "evaluator_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Evaluators",
            "description": "IDs of evaluators to run on the dataset. IDs start with `evfn_`"
          },
          "dataset_id": {
            "type": "string",
            "title": "Evaluation dataset",
            "description": "ID of the dataset to use in this evaluation. Starts with `evts_`."
          },
          "provider_api_keys": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProviderApiKeys"
              }
            ],
            "title": "Provider API Keys",
            "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization. Ensure you provide an API key for the provider for the model config you are evaluating, or have one saved to your organization."
          },
          "max_concurrency": {
            "type": "integer",
            "title": "Maximum concurrency",
            "description": "The maximum number of concurrent generations to run. A higher value will result in faster completion of the evaluation but may place higher load on your provider rate-limits. ",
            "default": 5
          },
          "hl_generated": {
            "type": "boolean",
            "title": "Humanloop generated",
            "description": "Whether the log generations for this evaluation should be performed by Humanloop. If `False`, the log generations should be submitted by the user via the API.",
            "default": true
          }
        },
        "type": "object",
        "required": ["config_id", "evaluator_ids", "dataset_id"],
        "title": "CreateEvaluationRequest"
      },
      "CreateEvaluationResultLogRequest": {
        "properties": {
          "log_id": {
            "type": "string",
            "title": "Log ID",
            "description": "The log that was evaluated. Must have as its `source_datapoint_id` one of the datapoints in the dataset being evaluated."
          },
          "evaluator_id": {
            "type": "string",
            "title": "Evaluator ID",
            "description": "ID of the evaluator that evaluated the log. Starts with `evfn_`. Must be one of the evaluator IDs associated with the evaluation run being logged to."
          },
          "result": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              }
            ],
            "description": "The result value of the evaluation."
          },
          "error": {
            "type": "string",
            "title": "Error",
            "description": "An error that occurred during evaluation."
          }
        },
        "type": "object",
        "required": ["log_id", "evaluator_id"],
        "title": "CreateEvaluationResultLogRequest",
        "description": "Provide an externally performed evaluation result for a log in an evaluation."
      },
      "CreateEvaluatorRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Name",
            "description": "The name of the evaluator."
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "title": "Description",
            "description": "The description of the evaluator."
          },
          "arguments_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatorArgumentsType"
              }
            ],
            "title": "Arguments type",
            "description": "Whether this evaluator is target-free or target-required."
          },
          "return_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatorReturnTypeEnum"
              }
            ],
            "title": "Return type",
            "description": "The type of the return value of the evaluator."
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "The code for the evaluator. This code will be executed in a sandboxed environment."
          },
          "model_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelConfigCompletionRequest"
              }
            ],
            "title": "Model configuration",
            "description": "The model configuration used to generate."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatorType"
              }
            ],
            "title": "Evaluator type",
            "description": "The type of the evaluator."
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "arguments_type",
          "return_type",
          "type"
        ],
        "title": "CreateEvaluatorRequest"
      },
      "CreateExperimentRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Experiment name",
            "description": "Name of experiment."
          },
          "config_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Config IDs",
            "description": "Configs to add to this experiment. Further configs can be added later."
          },
          "positive_labels": {
            "items": {
              "$ref": "#/components/schemas/PositiveLabel"
            },
            "type": "array",
            "title": "Positive labels",
            "description": "Feedback labels to treat as positive user feedback. Used to monitor the performance of model configs in the experiment."
          },
          "set_active": {
            "type": "boolean",
            "title": "Set as project's active experiment",
            "description": "Whether to set the created project as the project's active experiment.",
            "default": false
          }
        },
        "type": "object",
        "required": ["name", "positive_labels"],
        "title": "CreateExperimentRequest"
      },
      "CreateLogResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Datapoint ID",
            "description": "String ID of logged datapoint. Starts with `data_`."
          },
          "project_id": {
            "type": "string",
            "title": "Project ID",
            "description": "String ID of project the datapoint belongs to. Starts with `pr_`."
          },
          "session_id": {
            "type": "string",
            "title": "Session ID",
            "description": "String ID of session the datapoint belongs to. Populated only if the datapoint was logged with `session_id` or `session_reference_id`, and is `None` otherwise. Starts with `sesh_`."
          }
        },
        "type": "object",
        "required": ["id", "project_id"],
        "title": "CreateLogResponse"
      },
      "CreateProjectRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Project name",
            "description": "Unique project name."
          },
          "feedback_types": {
            "items": {
              "$ref": "#/components/schemas/FeedbackTypeRequest"
            },
            "type": "array",
            "title": "Feedback types",
            "description": "Feedback types to be created."
          },
          "directory_id": {
            "type": "string",
            "title": "Directory ID",
            "description": "ID of directory to assign project to. Starts with `dir_`. If not provided, the project will be created in the root directory."
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "CreateProjectRequest"
      },
      "CreateSessionResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Session ID",
            "description": "String ID of session. Starts with `sesh_`."
          }
        },
        "type": "object",
        "required": ["id"],
        "title": "CreateSessionResponse"
      },
      "DashboardConfiguration": {
        "properties": {
          "time_unit": {
            "$ref": "#/components/schemas/TimeUnit"
          },
          "time_range_days": {
            "type": "integer",
            "title": "Time Range Days"
          },
          "model_config_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Model Config Ids"
          }
        },
        "type": "object",
        "required": ["time_unit", "time_range_days", "model_config_ids"],
        "title": "DashboardConfiguration"
      },
      "DataResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Log ID",
            "description": "Unique ID for the model inputs and output logged to Humanloop. Use this when recording feedback later."
          },
          "index": {
            "type": "integer",
            "title": "Sample index",
            "description": "The index for the sampled generation for a given input. The num_samples request parameter controls how many samples are generated."
          },
          "output": {
            "type": "string",
            "title": "Sanitized output text",
            "description": "Output text returned from the provider model with leading and trailing whitespaces stripped."
          },
          "raw_output": {
            "type": "string",
            "title": "Provider's output text",
            "description": "Raw output text returned from the provider model."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template."
          },
          "finish_reason": {
            "type": "string",
            "title": "Finish reason",
            "description": "Why the generation ended. One of 'stop' (indicating a stop token was encountered), or 'length' (indicating the max tokens limit has been reached), or 'tool_call' (indicating that the model has chosen to call a tool - in which case the tool_call parameter of the response will be populated). It will be set as null for the intermediary responses during a stream, and will only be set as non-null for the final streamed token."
          },
          "model_config_id": {
            "type": "string",
            "title": "The ID of your model configuration",
            "description": "The model configuration used to create the generation."
          },
          "tool_results": {
            "items": {
              "$ref": "#/components/schemas/ToolResultResponse"
            },
            "type": "array",
            "title": "Tool results",
            "description": "Results of any tools run during the generation."
          }
        },
        "type": "object",
        "required": [
          "id",
          "index",
          "output",
          "raw_output",
          "inputs",
          "model_config_id"
        ],
        "title": "DataResponse"
      },
      "DatapointResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "dataset_id": {
            "type": "string",
            "title": "Dataset Id"
          },
          "inputs": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Inputs"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ChatMessageWithToolCall"
            },
            "type": "array",
            "title": "Messages"
          },
          "target": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "object"
                },
                {
                  "items": {},
                  "type": "array"
                }
              ]
            },
            "type": "object",
            "title": "Target"
          }
        },
        "type": "object",
        "required": ["id"],
        "title": "DatapointResponse"
      },
      "DatasetResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "project_id": {
            "type": "string",
            "title": "Project Id",
            "description": "Datasets are now files and do not belong to projects. If this dataset was created before that change, the legacy project ID will be provided here, otherwise an empty string will be returned.",
            "deprecated": true
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "datapoint_count": {
            "type": "integer",
            "title": "Datapoint Count"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "project_id",
          "name",
          "datapoint_count",
          "created_at",
          "updated_at"
        ],
        "title": "DatasetResponse"
      },
      "EnvironmentProjectConfigRequest": {
        "properties": {
          "config_id": {
            "type": "string",
            "title": "Model config ID",
            "description": "Model config unique identifier generated by Humanloop."
          },
          "experiment_id": {
            "type": "string",
            "title": "Experiment ID",
            "description": "String ID of experiment. Starts with `exp_`."
          },
          "environments": {
            "items": {
              "$ref": "#/components/schemas/EnvironmentRequest"
            },
            "type": "array",
            "title": "Environments",
            "description": "List of environments to associate with the model config."
          }
        },
        "type": "object",
        "title": "EnvironmentProjectConfigRequest"
      },
      "EnvironmentProjectConfigResponse": {
        "properties": {
          "project_id": {
            "type": "string",
            "title": "Project ID",
            "description": "String ID of project the model config belongs to. Starts with `pr_`."
          },
          "project_name": {
            "type": "string",
            "title": "Project name",
            "description": "Name of the project the model config belongs to."
          },
          "model_config_id": {
            "type": "string",
            "title": "Model config ID",
            "description": "Model config unique identifier generated by Humanloop."
          },
          "model_config_name": {
            "type": "string",
            "title": "Model config name",
            "description": "A friendly display name for the model config."
          },
          "experiment_id": {
            "type": "string",
            "title": "Experiment ID",
            "description": "String ID of experiment. Starts with `exp_`."
          },
          "experiment_name": {
            "type": "string",
            "title": "Experiment Display name",
            "description": "Display name of experiment."
          },
          "environment_id": {
            "type": "string",
            "title": "Environment ID",
            "description": "The ID of the environment."
          },
          "environment_name": {
            "type": "string",
            "title": "Environment name",
            "description": "The name of the environment."
          },
          "environment_tag": {
            "type": "string",
            "title": "Environment tag",
            "description": "Tag for the environment e.g. 'default' or 'other'."
          }
        },
        "type": "object",
        "required": [
          "project_id",
          "project_name",
          "environment_id",
          "environment_name",
          "environment_tag"
        ],
        "title": "EnvironmentProjectConfigResponse"
      },
      "EnvironmentRequest": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Environment ID",
            "description": "String ID of the environment. Starts with `env_`."
          },
          "name": {
            "type": "string",
            "title": "Environment name",
            "description": "The environment name."
          }
        },
        "type": "object",
        "required": ["id"],
        "title": "EnvironmentRequest"
      },
      "EvaluationDatapointSnapshotResponse": {
        "properties": {
          "datapoint": {
            "$ref": "#/components/schemas/DatapointResponse"
          },
          "log": {
            "$ref": "#/components/schemas/LogResponse"
          },
          "evaluation_results": {
            "items": {
              "$ref": "#/components/schemas/EvaluationResultResponse"
            },
            "type": "array",
            "title": "Evaluation Results"
          }
        },
        "type": "object",
        "required": ["datapoint", "evaluation_results"],
        "title": "EvaluationDatapointSnapshotResponse"
      },
      "EvaluationResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Evaluation ID",
            "description": "Unique ID for the evaluation. Starts with `ev_`."
          },
          "status": {
            "$ref": "#/components/schemas/EvaluationStatus"
          },
          "config": {
            "$ref": "#/components/schemas/ConfigResponse"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "evaluators": {
            "items": {
              "$ref": "#/components/schemas/EvaluatorResponse"
            },
            "type": "array",
            "title": "Evaluators"
          },
          "dataset": {
            "$ref": "#/components/schemas/DatasetResponse"
          },
          "dataset_version_id": {
            "type": "string",
            "title": "Dataset Version Id"
          },
          "dataset_snapshot": {
            "$ref": "#/components/schemas/DatasetResponse"
          },
          "evaluator_aggregates": {
            "items": {
              "$ref": "#/components/schemas/ModelConfigEvaluatorAggregateResponse"
            },
            "type": "array",
            "title": "Evaluator Aggregates"
          },
          "feedback_aggregates": {
            "$ref": "#/components/schemas/FeedbackAggregateResponse"
          }
        },
        "type": "object",
        "required": [
          "id",
          "status",
          "config",
          "created_at",
          "updated_at",
          "evaluators",
          "dataset",
          "dataset_version_id"
        ],
        "title": "EvaluationResponse"
      },
      "EvaluationResultResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "evaluator_id": {
            "type": "string",
            "title": "Evaluator Id"
          },
          "evaluation_id": {
            "type": "string",
            "title": "Evaluation Id"
          },
          "log_id": {
            "type": "string",
            "title": "Log Id"
          },
          "value": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "number"
              }
            ],
            "title": "Value"
          },
          "error": {
            "type": "string",
            "title": "Error"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["id", "evaluator_id", "log_id", "updated_at"],
        "title": "EvaluationResultResponse"
      },
      "EvaluationStatus": {
        "type": "string",
        "enum": ["pending", "running", "completed", "failed", "cancelled"],
        "title": "EvaluationStatus",
        "description": "Status of an evaluation."
      },
      "EvaluatorArgumentsType": {
        "type": "string",
        "enum": ["target_free", "target_required"],
        "title": "EvaluatorArgumentsType",
        "description": "Enum representing the possible argument types of an evaluator."
      },
      "EvaluatorResponse": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Name",
            "description": "The name of the evaluator."
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "title": "Description",
            "description": "The description of the evaluator."
          },
          "arguments_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatorArgumentsType"
              }
            ],
            "title": "Arguments type",
            "description": "Whether this evaluator is target-free or target-required."
          },
          "return_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatorReturnTypeEnum"
              }
            ],
            "title": "Return type",
            "description": "The type of the return value of the evaluator."
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "The code for the evaluator. This code will be executed in a sandboxed environment."
          },
          "model_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelConfigResponse"
              }
            ],
            "title": "Model config",
            "description": "The model config defining the LLM evaluator."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatorType"
              }
            ],
            "title": "Evaluator type",
            "description": "The type of the evaluator."
          },
          "id": {
            "type": "string",
            "title": "Evaluator ID",
            "description": "Unique ID for the evaluator. Starts with `evfn_`."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "logging_project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectResponse"
              }
            ],
            "title": "Logging project",
            "description": "The project where the evaluator logs are stored."
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "arguments_type",
          "return_type",
          "type",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "EvaluatorResponse"
      },
      "EvaluatorReturnTypeEnum": {
        "type": "string",
        "enum": ["boolean", "number"],
        "title": "EvaluatorReturnTypeEnum",
        "description": "Enum representing the possible return types of an evaluator."
      },
      "EvaluatorType": {
        "type": "string",
        "enum": ["python", "llm", "human", "external"],
        "title": "EvaluatorType",
        "description": "An enumeration."
      },
      "ExperimentConfigResponse": {
        "properties": {
          "mean": {
            "type": "number",
            "title": "Mean of experiment's metric",
            "description": "The mean performance of the model config."
          },
          "spread": {
            "type": "number",
            "title": "Spread of experiment's metric",
            "description": "The spread of performance of the model config."
          },
          "trials_count": {
            "type": "integer",
            "title": "Trials count",
            "description": "Number of datapoints with feedback associated to the experiment."
          },
          "active": {
            "type": "boolean",
            "title": "Model config active",
            "description": "Whether the model config is active in the experiment. Only active model configs can be sampled from the experiment."
          },
          "id": {
            "type": "string",
            "title": "Model config ID",
            "description": "String ID of model config. Starts with `config_`."
          },
          "display_name": {
            "type": "string",
            "title": "Display name",
            "description": "Display name of model config. If this is not set by the user, a friendly name is generated."
          },
          "config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConfigResponse"
              }
            ],
            "title": "Config",
            "description": "Definition of the config used in the experiment."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "trials_count",
          "active",
          "id",
          "display_name",
          "config",
          "created_at",
          "updated_at"
        ],
        "title": "ExperimentConfigResponse"
      },
      "ExperimentResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Experiment ID",
            "description": "String ID of experiment. Starts with `exp_`."
          },
          "project_id": {
            "type": "string",
            "title": "Project ID",
            "description": "String ID of project the experiment belongs to. Starts with `pr_`."
          },
          "name": {
            "type": "string",
            "title": "Experiment name",
            "description": "Name of experiment."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExperimentStatus"
              }
            ],
            "title": "Experiment status",
            "description": "Status of experiment."
          },
          "configs": {
            "items": {
              "$ref": "#/components/schemas/ExperimentConfigResponse"
            },
            "type": "array",
            "title": "Experiment configs",
            "description": "List of configs associated to the experiment."
          },
          "metric": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseMetricResponse"
              }
            ],
            "title": "Experiment metric",
            "description": "Metric used as the experiment's objective."
          },
          "positive_labels": {
            "items": {
              "$ref": "#/components/schemas/PositiveLabel"
            },
            "type": "array",
            "title": "Positive labels",
            "description": "Feedback labels to treat as positive user feedback. Used to monitor the performance of model configs in the experiment."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "project_id",
          "name",
          "status",
          "metric",
          "positive_labels",
          "created_at",
          "updated_at"
        ],
        "title": "ExperimentResponse"
      },
      "ExperimentStatus": {
        "type": "string",
        "enum": ["Initialized", "In progress"],
        "title": "ExperimentStatus",
        "description": "An enumeration."
      },
      "Feedback": {
        "properties": {
          "type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FeedbackType"
              },
              {
                "type": "string"
              }
            ],
            "title": "Feedback type",
            "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'."
          },
          "value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Feedback value",
            "description": "The feedback value to set. This would be the appropriate text for 'correction' or 'comment', or a label to apply for 'rating', 'action', or 'issue'."
          },
          "data_id": {
            "type": "string",
            "title": "Datapoint ID",
            "description": "ID to associate the feedback to a previously logged datapoint."
          },
          "user": {
            "type": "string",
            "title": "User",
            "description": "A unique identifier to who provided the feedback."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created at",
            "description": "User defined timestamp for when the feedback was created. "
          }
        },
        "type": "object",
        "required": ["type", "value"],
        "title": "Feedback"
      },
      "FeedbackAggregateResponse": {
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/FeedbackSelectAggregate"
            },
            {
              "$ref": "#/components/schemas/FeedbackMultiSelectAggregate"
            },
            {
              "$ref": "#/components/schemas/FeedbackTextAggregate"
            },
            {
              "$ref": "#/components/schemas/FeedbackNumberAggregate"
            }
          ]
        },
        "type": "array",
        "title": "FeedbackAggregateResponse"
      },
      "FeedbackClass": {
        "type": "string",
        "enum": ["select", "multi_select", "text", "number"],
        "title": "FeedbackClass",
        "description": "An enumeration."
      },
      "FeedbackLabelRequest": {
        "properties": {
          "value": {
            "type": "string",
            "title": "Value"
          },
          "sentiment": {
            "$ref": "#/components/schemas/LabelSentiment"
          }
        },
        "type": "object",
        "required": ["value"],
        "title": "FeedbackLabelRequest"
      },
      "FeedbackMultiSelectAggregate": {
        "properties": {
          "feedback_type": {
            "$ref": "#/components/schemas/FeedbackTypeModel"
          },
          "values": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Feedback values",
            "description": "The number of times each value exists in the aggregation."
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "The total number of feedbacks provided."
          }
        },
        "type": "object",
        "required": ["feedback_type", "values", "total"],
        "title": "FeedbackMultiSelectAggregate"
      },
      "FeedbackNumberAggregate": {
        "properties": {
          "feedback_type": {
            "$ref": "#/components/schemas/FeedbackTypeModel"
          },
          "mean": {
            "type": "number",
            "title": "Mean",
            "description": "The mean of all feedback values."
          }
        },
        "type": "object",
        "required": ["feedback_type", "mean"],
        "title": "FeedbackNumberAggregate"
      },
      "FeedbackRequest": {
        "properties": {
          "type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FeedbackType"
              },
              {
                "type": "string"
              }
            ],
            "title": "Feedback type",
            "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'."
          },
          "value": {
            "type": "string",
            "title": "Feedback value",
            "description": "The feedback value to be set. This field should be left blank when unsetting 'rating', 'correction' or 'comment', but is required otherwise."
          },
          "data_id": {
            "type": "string",
            "title": "Datapoint ID",
            "description": "ID to associate the feedback to a previously logged datapoint."
          },
          "user": {
            "type": "string",
            "title": "User",
            "description": "A unique identifier to who provided the feedback."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created at",
            "description": "User defined timestamp for when the feedback was created. "
          },
          "unset": {
            "type": "boolean",
            "title": "Unset",
            "description": "If true, the value for this feedback is unset."
          }
        },
        "type": "object",
        "required": ["type"],
        "title": "FeedbackRequest"
      },
      "FeedbackResponse": {
        "properties": {
          "type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FeedbackType"
              },
              {
                "type": "string"
              }
            ],
            "title": "Feedback type",
            "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'."
          },
          "value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Feedback value",
            "description": "The feedback value to set. This would be the appropriate text for 'correction' or 'comment', or a label to apply for 'rating', 'action', or 'issue'."
          },
          "data_id": {
            "type": "string",
            "title": "Datapoint ID",
            "description": "ID to associate the feedback to a previously logged datapoint."
          },
          "user": {
            "type": "string",
            "title": "User",
            "description": "A unique identifier to who provided the feedback."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created at",
            "description": "User defined timestamp for when the feedback was created. "
          },
          "id": {
            "type": "string",
            "title": "Feedback ID",
            "description": "String ID of user feedback. Starts with `ann_`, short for annotation."
          }
        },
        "type": "object",
        "required": ["type", "value", "id"],
        "title": "FeedbackResponse"
      },
      "FeedbackSelectAggregate": {
        "properties": {
          "feedback_type": {
            "$ref": "#/components/schemas/FeedbackTypeModel"
          },
          "values": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Feedback values",
            "description": "The number of times each value exists in the aggregation."
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "The total number of feedbacks provided."
          }
        },
        "type": "object",
        "required": ["feedback_type", "values", "total"],
        "title": "FeedbackSelectAggregate"
      },
      "FeedbackTextAggregate": {
        "properties": {
          "feedback_type": {
            "$ref": "#/components/schemas/FeedbackTypeModel"
          }
        },
        "type": "object",
        "required": ["feedback_type"],
        "title": "FeedbackTextAggregate"
      },
      "FeedbackType": {
        "type": "string",
        "enum": ["rating", "action", "issue", "correction", "comment"],
        "title": "FeedbackType",
        "description": "An enumeration."
      },
      "FeedbackTypeModel": {
        "properties": {
          "type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FeedbackType"
              },
              {
                "type": "string"
              }
            ],
            "title": "Feedback type",
            "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'."
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/CategoricalFeedbackLabel"
            },
            "type": "array",
            "title": "Allowed values for categorical feedback types",
            "description": "The allowed values for categorical feedback types. Not populated for `correction` and `comment`."
          }
        },
        "type": "object",
        "required": ["type"],
        "title": "FeedbackTypeModel"
      },
      "FeedbackTypeRequest": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Feedback type",
            "description": "The type of feedback to update."
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/FeedbackLabelRequest"
            },
            "type": "array",
            "title": "Feedback label values",
            "description": "The feedback values to be available. This field should only be populated when updating a 'select' or 'multi_select' feedback class."
          },
          "class": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FeedbackClass"
              }
            ],
            "title": "Feedback class",
            "description": "The data type associated to this feedback type; whether it is a 'text'/'select'/'multi_select'. This is optional when updating the default feedback types (i.e. when `type` is 'rating', 'action' or 'issue')."
          }
        },
        "type": "object",
        "required": ["type"],
        "title": "FeedbackTypeRequest"
      },
      "FeedbackTypes": {
        "items": {
          "$ref": "#/components/schemas/FeedbackTypeModel"
        },
        "type": "array",
        "title": "FeedbackTypes"
      },
      "FileType": {
        "type": "string",
        "enum": ["prompt", "tool", "dataset"],
        "title": "FileType",
        "description": "Enum for File types."
      },
      "FunctionTool": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "arguments": {
            "type": "string",
            "title": "Arguments"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "FunctionTool",
        "description": "A function tool to be called by the model where user owns runtime."
      },
      "FunctionToolChoice": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "FunctionToolChoice",
        "description": "A function tool to be called by the model where user owns runtime."
      },
      "GenericConfigResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Config ID",
            "description": "String ID of config. Starts with `config_`."
          },
          "other": {
            "type": "object",
            "title": "Other parameters",
            "description": "Other parameters that define the config."
          },
          "type": {
            "type": "string",
            "enum": ["generic"],
            "title": "Type"
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              }
            ],
            "title": "Created by",
            "description": "The user who created the config."
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Whether the config is committed or not."
          },
          "name": {
            "type": "string",
            "title": "Config name",
            "description": "Name of config."
          },
          "description": {
            "type": "string",
            "title": "Config description",
            "description": "Description of config."
          }
        },
        "type": "object",
        "required": ["id", "type", "status", "name"],
        "title": "GenericConfigResponse"
      },
      "GetModelConfigResponse": {
        "properties": {
          "project_id": {
            "type": "string",
            "title": "Project ID",
            "description": "String ID of project the model config belongs to. Starts with `pr_`."
          },
          "project_name": {
            "type": "string",
            "title": "Project name",
            "description": "Name of the project the model config belongs to."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "last_used": {
            "type": "string",
            "format": "date-time",
            "title": "Last Used"
          },
          "feedback_stats": {
            "items": {
              "$ref": "#/components/schemas/ProjectModelConfigFeedbackStatsResponse"
            },
            "type": "array",
            "title": "Feedback statistics",
            "description": "Feedback statistics for the project model config."
          },
          "num_datapoints": {
            "type": "integer",
            "title": "Number of datapoints",
            "description": "Number of datapoints associated with this project model config."
          },
          "experiment_id": {
            "type": "string",
            "title": "Experiment ID",
            "description": "The ID of the experiment the model config has been registered to. Only populated when registering a model config to an experiment."
          },
          "evaluation_aggregates": {
            "items": {
              "$ref": "#/components/schemas/ModelConfigEvaluatorAggregateResponse"
            },
            "type": "array",
            "title": "Evaluator aggregates",
            "description": "Aggregates of evaluators for the model config."
          },
          "config": {
            "$ref": "#/components/schemas/ConfigResponse"
          },
          "trial_id": {
            "type": "string",
            "title": "Trial ID",
            "description": "ID of trial to reference in subsequent log calls."
          },
          "environment_id": {
            "type": "string",
            "title": "Environment ID",
            "description": "ID of environment to reference in subsequent log calls."
          }
        },
        "type": "object",
        "required": [
          "project_id",
          "project_name",
          "created_at",
          "updated_at",
          "last_used",
          "config"
        ],
        "title": "GetModelConfigResponse",
        "description": "A selected model configuration.\n\nIf the model configuration was selected in the context of an experiment,\nthe response will include a trial_id to associate a subsequent log() call."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "ImageChatContent": {
        "properties": {
          "type": {
            "type": "string",
            "enum": ["image_url"],
            "title": "Type"
          },
          "image_url": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ImageUrl"
              }
            ],
            "title": "Image URL",
            "description": "The message's image content."
          }
        },
        "type": "object",
        "required": ["type", "image_url"],
        "title": "ImageChatContent"
      },
      "ImageUrl": {
        "properties": {
          "url": {
            "type": "string",
            "title": "URL",
            "description": "Either a URL of the image or the base64 encoded image data."
          },
          "detail": {
            "type": "string",
            "enum": ["high", "low", "auto"],
            "title": "Image detail level",
            "description": "Specify the detail level of the image provided to the model. For more details see: https://platform.openai.com/docs/guides/vision/low-or-high-fidelity-image-understanding"
          }
        },
        "type": "object",
        "required": ["url"],
        "title": "ImageUrl"
      },
      "LabelSentiment": {
        "type": "string",
        "enum": ["positive", "negative", "neutral", "unset"],
        "title": "LabelSentiment",
        "description": "How a label should be treated in calculating Version performance.\n\nUsed by a File's PAPV (Positive Action Per View) metric."
      },
      "LinkedToolRequest": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Tool ID",
            "description": "The ID of the linked tool. Starts with \"oc_\""
          },
          "source": {
            "type": "string",
            "enum": ["organization"],
            "title": "Tool source",
            "description": "The source of the linked tool. For a linked tool it should be `organization`"
          },
          "name": {
            "type": "string",
            "title": "Tool name",
            "description": "The name of the linked tool."
          },
          "description": {
            "type": "string",
            "title": "Tool description",
            "description": "The description of the linked tool."
          },
          "parameters": {
            "type": "object",
            "title": "Tool parameters",
            "description": "The parameters of the linked tool."
          }
        },
        "type": "object",
        "required": ["id", "source"],
        "title": "LinkedToolRequest"
      },
      "LogRequest": {
        "properties": {
          "project": {
            "type": "string",
            "title": "Project name",
            "description": "Unique project name. If no project exists with this name, a new project will be created."
          },
          "project_id": {
            "type": "string",
            "title": "Project ID",
            "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided."
          },
          "session_id": {
            "type": "string",
            "title": "Session ID",
            "description": "ID of the session to associate the datapoint."
          },
          "session_reference_id": {
            "type": "string",
            "title": "Session Reference ID",
            "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
          },
          "parent_id": {
            "type": "string",
            "title": "Parent ID",
            "description": "ID associated to the parent datapoint in a session."
          },
          "parent_reference_id": {
            "type": "string",
            "title": "Parent Reference ID",
            "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "save": {
            "type": "boolean",
            "title": "Save",
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "default": true
          },
          "source_datapoint_id": {
            "type": "string",
            "title": "Source datapoint ID",
            "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
          },
          "reference_id": {
            "type": "string",
            "title": "Reference ID",
            "description": "A unique string to reference the datapoint. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a subsequent log request."
          },
          "trial_id": {
            "type": "string",
            "title": "Trial ID",
            "description": "Unique ID of an experiment trial to associate to the log."
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ChatMessageWithToolCall"
            },
            "type": "array",
            "title": "Messages",
            "description": "The messages passed to the to provider chat endpoint."
          },
          "output": {
            "type": "string",
            "title": "Model output",
            "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if logging a parent datapoint with the intention to populate it later"
          },
          "config_id": {
            "type": "string",
            "title": "Config ID",
            "description": "Unique ID of a config to associate to the log."
          },
          "config": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ModelConfigRequest"
              },
              {
                "$ref": "#/components/schemas/ToolConfigRequest"
              }
            ],
            "title": "Config",
            "description": "The model config used for this generation. Required unless `config_id` or `trial_id` is provided.",
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "model": "#/components/schemas/ModelConfigRequest",
                "tool": "#/components/schemas/ToolConfigRequest"
              }
            }
          },
          "environment": {
            "type": "string",
            "title": "Environment name",
            "description": "The environment name used to create the log."
          },
          "feedback": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Feedback"
              },
              {
                "items": {
                  "$ref": "#/components/schemas/Feedback"
                },
                "type": "array"
              }
            ],
            "title": "Feedback labels",
            "description": "Optional parameter to provide feedback with your logged datapoint."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created at",
            "description": "User defined timestamp for when the log was created. "
          },
          "error": {
            "type": "string",
            "title": "Error",
            "description": "Error message if the log is an error."
          },
          "duration": {
            "type": "number",
            "title": "Duration",
            "description": "Duration of the logged event in seconds."
          },
          "output_message": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatMessageWithToolCall"
              }
            ],
            "title": "Output message",
            "description": "The message returned by the provider."
          },
          "prompt_tokens": {
            "type": "integer",
            "title": "Prompt tokens",
            "description": "Number of tokens in the prompt used to generate the output."
          },
          "output_tokens": {
            "type": "integer",
            "title": "Output tokens",
            "description": "Number of tokens in the output generated by the model."
          },
          "provider_request": {
            "type": "object",
            "title": "Provider request",
            "description": "Raw request sent to provider."
          },
          "provider_response": {
            "type": "object",
            "title": "Provider response",
            "description": "Raw response received the provider."
          }
        },
        "type": "object",
        "title": "LogRequest",
        "description": "Request model for logging a datapoint."
      },
      "LogResponse": {
        "properties": {
          "project": {
            "type": "string",
            "title": "Project name",
            "description": "The name of the project associated with this log"
          },
          "project_id": {
            "type": "string",
            "title": "Project ID",
            "description": "The unique ID of the project associated with this log."
          },
          "session_id": {
            "type": "string",
            "title": "Session ID",
            "description": "ID of the session to associate the datapoint."
          },
          "session_reference_id": {
            "type": "string",
            "title": "Session Reference ID",
            "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
          },
          "parent_id": {
            "type": "string",
            "title": "Parent ID",
            "description": "ID associated to the parent datapoint in a session."
          },
          "parent_reference_id": {
            "type": "string",
            "title": "Parent Reference ID",
            "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "The inputs passed to the prompt template.",
            "default": {}
          },
          "source": {
            "type": "string",
            "title": "Source",
            "description": "Identifies where the model was called from."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Any additional metadata to record."
          },
          "save": {
            "type": "boolean",
            "title": "Save",
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "default": true
          },
          "source_datapoint_id": {
            "type": "string",
            "title": "Source datapoint ID",
            "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
          },
          "id": {
            "type": "string",
            "title": "Datapoint ID",
            "description": "String ID of logged datapoint. Starts with `data_`."
          },
          "reference_id": {
            "type": "string",
            "title": "Reference ID",
            "description": "Unique user-provided string identifying the datapoint."
          },
          "trial_id": {
            "type": "string",
            "title": "Trial ID",
            "description": "Unique ID of an experiment trial to associate to the log."
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/ChatMessageWithToolCall"
            },
            "type": "array",
            "title": "Messages",
            "description": "The messages passed to the to provider chat endpoint."
          },
          "output": {
            "type": "string",
            "title": "Model output",
            "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if logging a parent datapoint with the intention to populate it later"
          },
          "config_id": {
            "type": "string",
            "title": "Config ID",
            "description": "Unique ID of a config to associate to the log."
          },
          "config": {
            "$ref": "#/components/schemas/ConfigResponse"
          },
          "environment": {
            "type": "string",
            "title": "Environment name",
            "description": "The environment name used to create the log."
          },
          "feedback": {
            "items": {
              "$ref": "#/components/schemas/FeedbackResponse"
            },
            "type": "array",
            "title": "Feedback"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created at",
            "description": "User defined timestamp for when the log was created. "
          },
          "error": {
            "type": "string",
            "title": "Error",
            "description": "Error message if the log is an error."
          },
          "duration": {
            "type": "number",
            "title": "Duration",
            "description": "Duration of the logged event in seconds."
          },
          "output_message": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChatMessageWithToolCall"
              }
            ],
            "title": "Output message",
            "description": "The message returned by the provider."
          },
          "prompt_tokens": {
            "type": "integer",
            "title": "Prompt tokens",
            "description": "Number of tokens in the prompt used to generate the output."
          },
          "output_tokens": {
            "type": "integer",
            "title": "Output tokens",
            "description": "Number of tokens in the output generated by the model."
          },
          "provider_request": {
            "type": "object",
            "title": "Provider request",
            "description": "Raw request sent to provider."
          },
          "provider_response": {
            "type": "object",
            "title": "Provider response",
            "description": "Raw response received the provider."
          },
          "user": {
            "type": "string",
            "title": "User",
            "description": "User email address provided when creating the datapoint."
          },
          "provider_latency": {
            "type": "number",
            "title": "Provider Latency",
            "description": "Latency of provider response."
          },
          "tokens": {
            "type": "integer",
            "title": "Tokens",
            "description": "Total number of tokens in the prompt and output."
          },
          "raw_output": {
            "type": "string",
            "title": "Raw output",
            "description": "Raw output from the provider."
          },
          "finish_reason": {
            "type": "string",
            "title": "Finish reason",
            "description": "Reason the generation finished."
          },
          "metric_values": {
            "items": {
              "$ref": "#/components/schemas/MetricValueResponse"
            },
            "type": "array",
            "title": "Metric Values"
          },
          "tools": {
            "items": {
              "$ref": "#/components/schemas/ToolResultResponse"
            },
            "type": "array",
            "title": "Tools"
          },
          "tool_choice": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["none"]
              },
              {
                "type": "string",
                "enum": ["auto"]
              },
              {
                "$ref": "#/components/schemas/ToolChoice"
              }
            ],
            "title": "Tool choice",
            "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function."
          },
          "evaluation_results": {
            "items": {
              "$ref": "#/components/schemas/EvaluationResultResponse"
            },
            "type": "array",
            "title": "Evaluation Results"
          },
          "observability_status": {
            "$ref": "#/components/schemas/ObservabilityStatus"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "config",
          "evaluation_results",
          "observability_status",
          "updated_at"
        ],
        "title": "LogResponse",
        "description": "Request model for logging a datapoint."
      },
      "MetricValueResponse": {
        "properties": {
          "metric_id": {
            "type": "string",
            "title": "Metric Id"
          },
          "metric_name": {
            "type": "string",
            "title": "Metric Name"
          },
          "metric_value": {
            "type": "number",
            "title": "Metric Value"
          }
        },
        "type": "object",
        "required": ["metric_id", "metric_name", "metric_value"],
        "title": "MetricValueResponse"
      },
      "ModelConfigChatRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Model config name",
            "description": "A friendly display name for the model config. If not provided, a name will be generated."
          },
          "description": {
            "type": "string",
            "title": "Model config description",
            "description": "A description of the model config."
          },
          "provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelProviders"
              }
            ],
            "title": "Model provider",
            "description": "The company providing the underlying model service.",
            "default": "openai"
          },
          "model": {
            "type": "string",
            "title": "Model instance used",
            "description": "The model instance used. E.g. text-davinci-002."
          },
          "max_tokens": {
            "type": "integer",
            "title": "Maximum tokens",
            "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt",
            "default": -1
          },
          "temperature": {
            "type": "number",
            "title": "Sampling temperature",
            "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
            "default": 1
          },
          "top_p": {
            "type": "number",
            "title": "Top p probability mass",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
            "default": 1
          },
          "stop": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Stop sequence(s)",
            "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence."
          },
          "presence_penalty": {
            "type": "number",
            "title": "Penalize tokens on whether present.",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
            "default": 0
          },
          "frequency_penalty": {
            "type": "number",
            "title": "Penalize tokens on whether frequent.",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
            "default": 0
          },
          "other": {
            "type": "object",
            "title": "Other provider parameters",
            "description": "Other parameter values to be passed to the provider call.",
            "default": {}
          },
          "seed": {
            "type": "integer",
            "title": "Seed",
            "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed."
          },
          "response_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseFormat"
              }
            ],
            "title": "Response format",
            "description": "The format of the response. Only type json_object is currently supported for chat."
          },
          "endpoint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelEndpoints"
              }
            ],
            "title": "Provider endpoint",
            "description": "The provider model endpoint used.",
            "default": "chat"
          },
          "chat_template": {
            "items": {
              "$ref": "#/components/schemas/ChatMessageWithToolCall"
            },
            "type": "array",
            "title": "Chat template",
            "description": "Messages prepended to the list of messages sent to the provider. These messages that will take your specified inputs to form your final request to the provider model. Input variables within the template should be specified with syntax: {{INPUT_NAME}}."
          },
          "tools": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/LinkedToolRequest"
                },
                {
                  "$ref": "#/components/schemas/ModelConfigToolRequest"
                }
              ]
            },
            "type": "array",
            "title": "Tools - equivalent to OpenAI functions.",
            "description": "Make tools available to OpenAIs chat model as functions."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["model"],
        "title": "ModelConfigChatRequest",
        "description": "Chat model config request."
      },
      "ModelConfigCompletionRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Model config name",
            "description": "A friendly display name for the model config. If not provided, a name will be generated."
          },
          "description": {
            "type": "string",
            "title": "Model config description",
            "description": "A description of the model config."
          },
          "provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelProviders"
              }
            ],
            "title": "Model provider",
            "description": "The company providing the underlying model service.",
            "default": "openai"
          },
          "model": {
            "type": "string",
            "title": "Model instance used",
            "description": "The model instance used. E.g. text-davinci-002."
          },
          "max_tokens": {
            "type": "integer",
            "title": "Maximum tokens",
            "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt",
            "default": -1
          },
          "temperature": {
            "type": "number",
            "title": "Sampling temperature",
            "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
            "default": 1
          },
          "top_p": {
            "type": "number",
            "title": "Top p probability mass",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
            "default": 1
          },
          "stop": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Stop sequence(s)",
            "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence."
          },
          "presence_penalty": {
            "type": "number",
            "title": "Penalize tokens on whether present.",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
            "default": 0
          },
          "frequency_penalty": {
            "type": "number",
            "title": "Penalize tokens on whether frequent.",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
            "default": 0
          },
          "other": {
            "type": "object",
            "title": "Other provider parameters",
            "description": "Other parameter values to be passed to the provider call.",
            "default": {}
          },
          "seed": {
            "type": "integer",
            "title": "Seed",
            "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed."
          },
          "response_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseFormat"
              }
            ],
            "title": "Response format",
            "description": "The format of the response. Only type json_object is currently supported for chat."
          },
          "endpoint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelEndpoints"
              }
            ],
            "title": "Provider endpoint",
            "description": "The provider model endpoint used.",
            "default": "complete"
          },
          "prompt_template": {
            "type": "string",
            "title": "Prompt template",
            "description": "Prompt template that will take your specified inputs to form your final request to the model. Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["model"],
        "title": "ModelConfigCompletionRequest",
        "description": "Completion model config request"
      },
      "ModelConfigEvaluatorAggregateResponse": {
        "properties": {
          "model_config_id": {
            "type": "string",
            "title": "Model Config Id"
          },
          "evaluator_id": {
            "type": "string",
            "title": "Evaluator Id"
          },
          "aggregate_value": {
            "type": "number",
            "title": "Aggregate Value"
          }
        },
        "type": "object",
        "required": ["model_config_id", "evaluator_id"],
        "title": "ModelConfigEvaluatorAggregateResponse"
      },
      "ModelConfigRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Model config name",
            "description": "A friendly display name for the model config. If not provided, a name will be generated."
          },
          "description": {
            "type": "string",
            "title": "Model config description",
            "description": "A description of the model config."
          },
          "provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelProviders"
              }
            ],
            "title": "Model provider",
            "description": "The company providing the underlying model service.",
            "default": "openai"
          },
          "model": {
            "type": "string",
            "title": "Model instance used",
            "description": "The model instance used. E.g. text-davinci-002."
          },
          "max_tokens": {
            "type": "integer",
            "title": "Maximum tokens",
            "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt",
            "default": -1
          },
          "temperature": {
            "type": "number",
            "title": "Sampling temperature",
            "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
            "default": 1
          },
          "top_p": {
            "type": "number",
            "title": "Top p probability mass",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
            "default": 1
          },
          "stop": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Stop sequence(s)",
            "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence."
          },
          "presence_penalty": {
            "type": "number",
            "title": "Penalize tokens on whether present.",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
            "default": 0
          },
          "frequency_penalty": {
            "type": "number",
            "title": "Penalize tokens on whether frequent.",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
            "default": 0
          },
          "other": {
            "type": "object",
            "title": "Other provider parameters",
            "description": "Other parameter values to be passed to the provider call.",
            "default": {}
          },
          "seed": {
            "type": "integer",
            "title": "Seed",
            "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed."
          },
          "response_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseFormat"
              }
            ],
            "title": "Response format",
            "description": "The format of the response. Only type json_object is currently supported for chat."
          },
          "endpoint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelEndpoints"
              }
            ],
            "title": "Provider endpoint",
            "description": "The provider model endpoint used.",
            "default": "complete"
          },
          "prompt_template": {
            "type": "string",
            "title": "Prompt template",
            "description": "Prompt template that will take your specified inputs to form your final request to the model. Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}."
          },
          "chat_template": {
            "items": {
              "$ref": "#/components/schemas/ChatMessageWithToolCall"
            },
            "type": "array",
            "title": "Chat template",
            "description": "Messages prepended to the list of messages sent to the provider. These messages that will take your specified inputs to form your final request to the provider model. Input variables within the template should be specified with syntax: {{INPUT_NAME}}."
          },
          "tools": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/LinkedToolRequest"
                },
                {
                  "$ref": "#/components/schemas/ModelConfigToolRequest"
                }
              ]
            },
            "type": "array",
            "title": "Tools - equivalent to OpenAI functions.",
            "description": "Make tools available to OpenAIs chat model as functions."
          },
          "type": {
            "type": "string",
            "enum": ["model"],
            "title": "Type"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["model"],
        "title": "ModelConfigRequest",
        "description": "Model config used for logging both chat and completion."
      },
      "ModelConfigResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Config ID",
            "description": "String ID of config. Starts with `config_`."
          },
          "other": {
            "type": "object",
            "title": "Other provider parameters",
            "description": "Other parameter values to be passed to the provider call.",
            "default": {}
          },
          "type": {
            "type": "string",
            "enum": ["model"],
            "title": "Type"
          },
          "name": {
            "type": "string",
            "title": "Model config name",
            "description": "A friendly display name for the model config. If not provided, a name will be generated."
          },
          "description": {
            "type": "string",
            "title": "Model config description",
            "description": "A description of the model config."
          },
          "provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelProviders"
              }
            ],
            "title": "Model provider",
            "description": "The company providing the underlying model service.",
            "default": "openai"
          },
          "model": {
            "type": "string",
            "title": "Model instance used",
            "description": "The model instance used. E.g. text-davinci-002."
          },
          "max_tokens": {
            "type": "integer",
            "title": "Maximum tokens",
            "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt",
            "default": -1
          },
          "temperature": {
            "type": "number",
            "title": "Sampling temperature",
            "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
            "default": 1
          },
          "top_p": {
            "type": "number",
            "title": "Top p probability mass",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
            "default": 1
          },
          "stop": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Stop sequence(s)",
            "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence."
          },
          "presence_penalty": {
            "type": "number",
            "title": "Penalize tokens on whether present.",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
            "default": 0
          },
          "frequency_penalty": {
            "type": "number",
            "title": "Penalize tokens on whether frequent.",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
            "default": 0
          },
          "seed": {
            "type": "integer",
            "title": "Seed",
            "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed."
          },
          "response_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseFormat"
              }
            ],
            "title": "Response format",
            "description": "The format of the response. Only type json_object is currently supported for chat."
          },
          "prompt_template": {
            "type": "string",
            "title": "Prompt template",
            "description": "Prompt template that will take your specified inputs to form your final request to the model. NB: Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}."
          },
          "chat_template": {
            "items": {
              "$ref": "#/components/schemas/ChatMessageWithToolCall"
            },
            "type": "array",
            "title": "Chat template",
            "description": "Messages prepended to the list of messages sent to the provider. These messages that will take your specified inputs to form your final request to the provider model. NB: Input variables within the template should be specified with syntax: {{INPUT_NAME}}."
          },
          "tool_configs": {
            "items": {
              "$ref": "#/components/schemas/ToolConfigResponse"
            },
            "type": "array",
            "title": "Tool configs",
            "description": "NB: Deprecated with tools field. Definition of tools shown to the model.",
            "deprecated": true
          },
          "tools": {
            "items": {
              "$ref": "#/components/schemas/ToolResponse"
            },
            "type": "array",
            "title": "Tools",
            "description": "Tools shown to the model."
          },
          "endpoint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelEndpoints"
              }
            ],
            "title": "Provider endpoint",
            "description": "The provider model endpoint used."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["id", "type", "model"],
        "title": "ModelConfigResponse",
        "description": "Model config request.\n\nContains fields that are common to all (i.e. both chat and complete) endpoints."
      },
      "ModelConfigToolRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Tool name",
            "description": "The name of the tool shown to the model."
          },
          "description": {
            "type": "string",
            "title": "Tool description",
            "description": "The description of the tool shown to the model."
          },
          "parameters": {
            "type": "object",
            "title": "Schema of tool arguments.",
            "description": "Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/"
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ToolSource"
              }
            ],
            "title": "Source",
            "description": "Source of the tool. If defined at an organization level will be 'organization' else 'inline'."
          },
          "source_code": {
            "type": "string",
            "title": "Code source",
            "description": "Code source of the tool."
          },
          "other": {
            "type": "object",
            "title": "Other parameters",
            "description": "Other parameters that define the config."
          },
          "preset_name": {
            "type": "string",
            "title": "preset_name",
            "description": "If is_preset = true, this is the name of the preset tool on Humanloop. This is used as the key to look up the Humanloop runtime of the tool"
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "ModelConfigToolRequest",
        "description": "Definition of tool within a model config.\n\nThe subset of ToolConfig parameters received by the chat endpoint.\nDoes not have things like the signature or setup schema."
      },
      "ModelEndpoints": {
        "type": "string",
        "enum": ["complete", "chat", "edit"],
        "title": "ModelEndpoints",
        "description": "Supported model provider endpoints."
      },
      "ModelProviders": {
        "type": "string",
        "enum": [
          "openai",
          "openai_azure",
          "ai21",
          "mock",
          "anthropic",
          "langchain",
          "cohere",
          "replicate",
          "google"
        ],
        "title": "ModelProviders",
        "description": "Supported model providers."
      },
      "ObservabilityStatus": {
        "type": "string",
        "enum": ["pending", "running", "completed", "failed"],
        "title": "ObservabilityStatus",
        "description": "Status of a project datum for observability."
      },
      "PaginatedData_DatapointResponse_": {
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/DatapointResponse"
            },
            "type": "array",
            "title": "Records"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": ["records", "page", "size", "total"],
        "title": "PaginatedData[DatapointResponse]"
      },
      "PaginatedData_EvaluationDatapointSnapshotResponse_": {
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/EvaluationDatapointSnapshotResponse"
            },
            "type": "array",
            "title": "Records"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": ["records", "page", "size", "total"],
        "title": "PaginatedData[EvaluationDatapointSnapshotResponse]"
      },
      "PaginatedData_EvaluationResponse_": {
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/EvaluationResponse"
            },
            "type": "array",
            "title": "Records"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": ["records", "page", "size", "total"],
        "title": "PaginatedData[EvaluationResponse]"
      },
      "PaginatedData_LogResponse_": {
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/LogResponse"
            },
            "type": "array",
            "title": "Records"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": ["records", "page", "size", "total"],
        "title": "PaginatedData[LogResponse]"
      },
      "PaginatedData_ProjectResponse_": {
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/ProjectResponse"
            },
            "type": "array",
            "title": "Records"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": ["records", "page", "size", "total"],
        "title": "PaginatedData[ProjectResponse]"
      },
      "PaginatedData_SessionResponse_": {
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/SessionResponse"
            },
            "type": "array",
            "title": "Records"
          },
          "page": {
            "type": "integer",
            "title": "Page"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": ["records", "page", "size", "total"],
        "title": "PaginatedData[SessionResponse]"
      },
      "PlatformAccessEnum": {
        "type": "string",
        "enum": ["superadmin", "user"],
        "title": "PlatformAccessEnum",
        "description": "An enumeration."
      },
      "PositiveLabel": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Feedback type"
          },
          "value": {
            "type": "string",
            "title": "Feedback value"
          }
        },
        "type": "object",
        "required": ["type", "value"],
        "title": "PositiveLabel"
      },
      "ProjectConfigResponse": {
        "properties": {
          "project_id": {
            "type": "string",
            "title": "Project ID",
            "description": "String ID of project the model config belongs to. Starts with `pr_`."
          },
          "project_name": {
            "type": "string",
            "title": "Project name",
            "description": "Name of the project the model config belongs to."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "last_used": {
            "type": "string",
            "format": "date-time",
            "title": "Last Used"
          },
          "feedback_stats": {
            "items": {
              "$ref": "#/components/schemas/ProjectModelConfigFeedbackStatsResponse"
            },
            "type": "array",
            "title": "Feedback statistics",
            "description": "Feedback statistics for the project model config."
          },
          "num_datapoints": {
            "type": "integer",
            "title": "Number of datapoints",
            "description": "Number of datapoints associated with this project model config."
          },
          "experiment_id": {
            "type": "string",
            "title": "Experiment ID",
            "description": "The ID of the experiment the model config has been registered to. Only populated when registering a model config to an experiment."
          },
          "evaluation_aggregates": {
            "items": {
              "$ref": "#/components/schemas/ModelConfigEvaluatorAggregateResponse"
            },
            "type": "array",
            "title": "Evaluator aggregates",
            "description": "Aggregates of evaluators for the model config."
          },
          "config": {
            "$ref": "#/components/schemas/ConfigResponse"
          }
        },
        "type": "object",
        "required": [
          "project_id",
          "project_name",
          "created_at",
          "updated_at",
          "last_used",
          "config"
        ],
        "title": "ProjectConfigResponse"
      },
      "ProjectInputResponse": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Input name",
            "description": "Type of input."
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "ProjectInputResponse"
      },
      "ProjectModelConfigFeedbackStatsResponse": {
        "properties": {
          "feedback_type_id": {
            "type": "integer",
            "title": "Feedback Type Id"
          },
          "feedback_type": {
            "type": "string",
            "title": "Feedback Type"
          },
          "feedback_value": {
            "type": "string",
            "title": "Feedback Value"
          },
          "feedback_count": {
            "type": "integer",
            "title": "Feedback Count"
          }
        },
        "type": "object",
        "required": [
          "feedback_type_id",
          "feedback_type",
          "feedback_value",
          "feedback_count"
        ],
        "title": "ProjectModelConfigFeedbackStatsResponse"
      },
      "ProjectModelConfigRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Model config name",
            "description": "A friendly display name for the model config. If not provided, a name will be generated."
          },
          "description": {
            "type": "string",
            "title": "Model config description",
            "description": "A description of the model config."
          },
          "provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelProviders"
              }
            ],
            "title": "Model provider",
            "description": "The company providing the underlying model service.",
            "default": "openai"
          },
          "model": {
            "type": "string",
            "title": "Model instance used",
            "description": "The model instance used. E.g. text-davinci-002."
          },
          "max_tokens": {
            "type": "integer",
            "title": "Maximum tokens",
            "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt",
            "default": -1
          },
          "temperature": {
            "type": "number",
            "title": "Sampling temperature",
            "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
            "default": 1
          },
          "top_p": {
            "type": "number",
            "title": "Top p probability mass",
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
            "default": 1
          },
          "stop": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Stop sequence(s)",
            "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence."
          },
          "presence_penalty": {
            "type": "number",
            "title": "Penalize tokens on whether present.",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
            "default": 0
          },
          "frequency_penalty": {
            "type": "number",
            "title": "Penalize tokens on whether frequent.",
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
            "default": 0
          },
          "other": {
            "type": "object",
            "title": "Other provider parameters",
            "description": "Other parameter values to be passed to the provider call.",
            "default": {}
          },
          "seed": {
            "type": "integer",
            "title": "Seed",
            "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed."
          },
          "response_format": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResponseFormat"
              }
            ],
            "title": "Response format",
            "description": "The format of the response. Only type json_object is currently supported for chat."
          },
          "project": {
            "type": "string",
            "title": "Project name",
            "description": "Unique project name. If it does not exist, a new project will be created."
          },
          "project_id": {
            "type": "string",
            "title": "Project ID",
            "description": "Unique project ID"
          },
          "experiment": {
            "type": "string",
            "title": "Experiment name",
            "description": "If specified, the model config will be added to this experiment. Experiments are used for A/B testing and optimizing hyperparameters."
          },
          "prompt_template": {
            "type": "string",
            "title": "Prompt template",
            "description": "Prompt template that will take your specified inputs to form your final request to the provider model. NB: Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}."
          },
          "chat_template": {
            "items": {
              "$ref": "#/components/schemas/ChatMessageWithToolCall"
            },
            "type": "array",
            "title": "Chat template",
            "description": "Messages prepended to the list of messages sent to the provider. These messages that will take your specified inputs to form your final request to the provider model. NB: Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}."
          },
          "endpoint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelEndpoints"
              }
            ],
            "title": "Provider endpoint",
            "description": "Which of the providers model endpoints to use. For example Complete or Edit.",
            "default": "complete"
          },
          "tools": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/LinkedToolRequest"
                },
                {
                  "$ref": "#/components/schemas/ModelConfigToolRequest"
                }
              ]
            },
            "type": "array",
            "title": "Tools - equivalent to OpenAI functions.",
            "description": "Make tools available to OpenAIs chat model as functions."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": ["model"],
        "title": "ProjectModelConfigRequest",
        "description": "Model config request.\n\nContains fields that are common to all (i.e. both chat and complete) endpoints."
      },
      "ProjectResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Project ID",
            "description": "Project ID"
          },
          "name": {
            "type": "string",
            "title": "Project name",
            "description": "Unique project name."
          },
          "active_experiment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExperimentResponse"
              }
            ],
            "title": "Active experiment",
            "description": "Experiment that has been set as the project's active deployment. At most one of active_experiment and active_model_config can be set."
          },
          "active_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectConfigResponse"
              }
            ],
            "title": "Active config",
            "description": "Config that has been set as the project's active deployment. At most one of active_experiment and active_model_config can be set."
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/ProjectUserResponse"
            },
            "type": "array",
            "title": "Project users",
            "description": "Users associated to the project."
          },
          "data_count": {
            "type": "integer",
            "title": "Number of datapoints",
            "description": "The count of datapoints that have been logged to the project."
          },
          "feedback_types": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FeedbackTypes"
              }
            ],
            "title": "Feedback types",
            "description": "The feedback types that have been defined in the project."
          },
          "team_id": {
            "type": "string",
            "title": "Team ID",
            "description": "Unique ID of the team the project belongs to. Starts with `tm_`."
          },
          "config_type": {
            "$ref": "#/components/schemas/ConfigType"
          },
          "active_evaluators": {
            "items": {
              "$ref": "#/components/schemas/EvaluatorResponse"
            },
            "type": "array",
            "title": "Active evaluators",
            "description": "Evaluators that have been set as active for the project."
          },
          "directory_id": {
            "type": "string",
            "title": "Directory ID",
            "description": "String ID of the directory the project belongs to. Starts with `dir_`."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "users",
          "data_count",
          "feedback_types",
          "team_id",
          "created_at",
          "updated_at"
        ],
        "title": "ProjectResponse"
      },
      "ProjectSortBy": {
        "type": "string",
        "enum": ["created_at", "updated_at", "name"],
        "title": "ProjectSortBy",
        "description": "An enumeration."
      },
      "ProjectUserResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "User ID",
            "description": "String ID of user. Starts with `usr_`."
          },
          "email_address": {
            "type": "string",
            "title": "Email address",
            "description": "The user's email address."
          },
          "full_name": {
            "type": "string",
            "title": "Full name",
            "description": "The user's full name."
          }
        },
        "type": "object",
        "required": ["id", "email_address"],
        "title": "ProjectUserResponse"
      },
      "ProviderApiKeys": {
        "properties": {
          "openai": {
            "type": "string",
            "title": "Openai"
          },
          "ai21": {
            "type": "string",
            "title": "Ai21"
          },
          "mock": {
            "type": "string",
            "title": "Mock"
          },
          "anthropic": {
            "type": "string",
            "title": "Anthropic"
          },
          "cohere": {
            "type": "string",
            "title": "Cohere"
          },
          "openai_azure": {
            "type": "string",
            "title": "Openai Azure"
          },
          "openai_azure_endpoint": {
            "type": "string",
            "title": "Openai Azure Endpoint"
          }
        },
        "type": "object",
        "title": "ProviderApiKeys"
      },
      "ResponseFormat": {
        "properties": {
          "type": {
            "type": "string",
            "enum": ["json_object"],
            "title": "Type"
          }
        },
        "type": "object",
        "required": ["type"],
        "title": "ResponseFormat",
        "description": "Response format of the model."
      },
      "SessionProjectResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Project ID",
            "description": "String ID of project the datapoint belongs to. Starts with `pr_`."
          },
          "name": {
            "type": "string",
            "title": "Project name"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileType"
              }
            ],
            "title": "Project type",
            "description": "Type of project. e.g. `prompt` or `tool`."
          }
        },
        "type": "object",
        "required": ["id", "name", "type"],
        "title": "SessionProjectResponse"
      },
      "SessionResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Session ID",
            "description": "String ID of session. Starts with `sesh_`."
          },
          "reference_id": {
            "type": "string",
            "title": "Reference ID",
            "description": "Unique user-provided string identifying the session."
          },
          "projects": {
            "items": {
              "$ref": "#/components/schemas/SessionProjectResponse"
            },
            "type": "array",
            "title": "Projects",
            "description": "List of projects that have datapoints associated to this session."
          },
          "datapoints_count": {
            "type": "integer",
            "title": "Datapoints count",
            "description": "Number of datapoints associated to this session."
          },
          "first_inputs": {
            "type": "object",
            "title": "First inputs",
            "description": "Inputs for the first datapoint in the session."
          },
          "last_output": {
            "type": "string",
            "title": "Last output",
            "description": "Output for the last datapoint in the session."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "projects",
          "datapoints_count",
          "created_at",
          "updated_at"
        ],
        "title": "SessionResponse"
      },
      "SortOrder": {
        "type": "string",
        "enum": ["asc", "desc"],
        "title": "SortOrder",
        "description": "An enumeration."
      },
      "TextChatContent": {
        "properties": {
          "type": {
            "type": "string",
            "enum": ["text"],
            "title": "Type"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "The message's text content."
          }
        },
        "type": "object",
        "required": ["type", "text"],
        "title": "TextChatContent"
      },
      "TimeUnit": {
        "type": "string",
        "enum": ["day", "week", "month"],
        "title": "TimeUnit",
        "description": "An enumeration."
      },
      "ToolCall": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "type": {
            "$ref": "#/components/schemas/ToolType"
          },
          "function": {
            "$ref": "#/components/schemas/FunctionTool"
          }
        },
        "type": "object",
        "required": ["id", "type", "function"],
        "title": "ToolCall",
        "description": "A tool call to be made."
      },
      "ToolChoice": {
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ToolType"
          },
          "function": {
            "$ref": "#/components/schemas/FunctionToolChoice"
          }
        },
        "type": "object",
        "required": ["type", "function"],
        "title": "ToolChoice",
        "description": "Tool choice to force the model to use a tool."
      },
      "ToolConfigRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Tool name",
            "description": "The name of the tool shown to the model."
          },
          "description": {
            "type": "string",
            "title": "Tool description",
            "description": "The description of the tool shown to the model."
          },
          "parameters": {
            "type": "object",
            "title": "Schema of tool arguments.",
            "description": "Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/"
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ToolSource"
              }
            ],
            "title": "Source",
            "description": "Source of the tool. If defined at an organization level will be 'organization' else 'inline'."
          },
          "source_code": {
            "type": "string",
            "title": "Code source",
            "description": "Code source of the tool."
          },
          "other": {
            "type": "object",
            "title": "Other parameters",
            "description": "Other parameters that define the config."
          },
          "preset_name": {
            "type": "string",
            "title": "preset_name",
            "description": "If is_preset = true, this is the name of the preset tool on Humanloop. This is used as the key to look up the Humanloop runtime of the tool"
          },
          "type": {
            "type": "string",
            "enum": ["tool"],
            "title": "Type"
          }
        },
        "type": "object",
        "required": ["name", "type"],
        "title": "ToolConfigRequest",
        "description": "Definition of tool within a model config.\n\nThe subset of ToolConfig parameters received by the chat endpoint.\nDoes not have things like the signature or setup schema."
      },
      "ToolConfigResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Config ID",
            "description": "String ID of config. Starts with `config_`."
          },
          "other": {
            "type": "object",
            "title": "Other parameters",
            "description": "Other parameters that define the config."
          },
          "type": {
            "type": "string",
            "enum": ["tool"],
            "title": "Type"
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserResponse"
              }
            ],
            "title": "Created by",
            "description": "The user who created the config."
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Whether the config is committed or not."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name for the tool referenced by the model."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the tool referenced by the model"
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ToolSource"
              }
            ],
            "title": "Source",
            "description": "Source of the tool. If defined at an organization level will be 'organization' else 'inline'."
          },
          "source_code": {
            "type": "string",
            "title": "Source Code",
            "description": "Code source of the tool."
          },
          "setup_schema": {
            "type": "object",
            "title": "Setup arguments schema.",
            "description": "Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/"
          },
          "parameters": {
            "type": "object",
            "title": "Run arguments schema.",
            "description": "Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/"
          },
          "signature": {
            "type": "string",
            "title": "Signature",
            "description": "The function signature of the tool when being called."
          },
          "is_preset": {
            "type": "boolean",
            "title": "Is preset",
            "description": "Whether the tool is one where Humanloop defines runtime or not."
          },
          "preset_name": {
            "type": "string",
            "title": "preset_name",
            "description": "If is_preset = true, this is the name of the preset tool on Humanloop. This is used as the key to lookup the Humanloop runtime of the tool"
          }
        },
        "type": "object",
        "required": ["id", "type", "status", "name"],
        "title": "ToolConfigResponse"
      },
      "ToolResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Tool ID",
            "description": "The ID of the tool. Starts with either `config_` or `oc_`."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name for the tool referenced by the model."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the tool referenced by the model"
          },
          "parameters": {
            "type": "object",
            "title": "Run arguments schema.",
            "description": "Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/"
          },
          "source": {
            "type": "string",
            "title": "Origin",
            "description": "The origin of the tool"
          }
        },
        "type": "object",
        "required": ["id", "name"],
        "title": "ToolResponse"
      },
      "ToolResultResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "signature": {
            "type": "string",
            "title": "Signature"
          },
          "result": {
            "type": "string",
            "title": "Result"
          }
        },
        "type": "object",
        "required": ["id", "name", "signature", "result"],
        "title": "ToolResultResponse",
        "description": "A result from a tool used to populate the prompt template"
      },
      "ToolSource": {
        "type": "string",
        "enum": ["organization", "inline"],
        "title": "ToolSource",
        "description": "Source of tool. Used to differentiate between tools and tool versions when they are combined in a list.\n\nV4 uses organization and inline. Those are deprecated and will be removed in favour of tool and tool_version."
      },
      "ToolType": {
        "type": "string",
        "enum": ["function"],
        "title": "ToolType",
        "description": "The type of tool to call."
      },
      "UpdateDatasetRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "title": "Name",
            "description": "The name of the dataset."
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "title": "Description",
            "description": "The description of the dataset."
          }
        },
        "type": "object",
        "title": "UpdateDatasetRequest"
      },
      "UpdateEvaluationStatusRequest": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluationStatus"
              }
            ],
            "title": "Evaluation status",
            "description": "The new status of the evaluation."
          }
        },
        "type": "object",
        "required": ["status"],
        "title": "UpdateEvaluationStatusRequest"
      },
      "UpdateEvaluatorRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the evaluator."
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "title": "Description",
            "description": "The description of the evaluator."
          },
          "arguments_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatorArgumentsType"
              }
            ],
            "title": "Arguments type",
            "description": "Whether this evaluator is target-free or target-required."
          },
          "return_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EvaluatorReturnTypeEnum"
              }
            ],
            "title": "Return type",
            "description": "The type of the return value of the evaluator."
          },
          "code": {
            "type": "string",
            "title": "Code",
            "description": "The code for the evaluator. This code will be executed in a sandboxed environment."
          },
          "model_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ModelConfigCompletionRequest"
              }
            ],
            "title": "Model configuration",
            "description": "The model configuration used to generate."
          }
        },
        "type": "object",
        "title": "UpdateEvaluatorRequest"
      },
      "UpdateExperimentRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Experiment name",
            "description": "Name of experiment."
          },
          "positive_labels": {
            "items": {
              "$ref": "#/components/schemas/PositiveLabel"
            },
            "type": "array",
            "title": "Positive labels",
            "description": "Feedback labels to treat as positive user feedback. Used to monitor the performance of model configs in the experiment."
          },
          "config_ids_to_register": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Model config IDs to register",
            "description": "Model configs to add to this experiment."
          },
          "config_ids_to_deregister": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Model config IDs to deregister",
            "description": "Model configs in this experiment to be deactivated."
          }
        },
        "type": "object",
        "title": "UpdateExperimentRequest"
      },
      "UpdateLogRequest": {
        "properties": {
          "output": {
            "type": "string",
            "title": "Model output",
            "description": "Generated output from your model for the provided inputs."
          },
          "error": {
            "type": "string",
            "title": "Error",
            "description": "Error message if the log is an error."
          },
          "duration": {
            "type": "number",
            "title": "Duration",
            "description": "Duration of the logged event in seconds."
          }
        },
        "type": "object",
        "title": "UpdateLogRequest"
      },
      "UpdateProjectRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Project name",
            "description": "The new unique project name. Caution, if you are using the project name as the unique identifier in your API calls, changing the name will break the calls."
          },
          "active_experiment_id": {
            "type": "string",
            "title": "Active experiment ID",
            "description": "ID for an experiment to set as the project's active deployment. Starts with 'exp_'. At most one of 'active_experiment_id' and 'active_model_config_id' can be set."
          },
          "active_config_id": {
            "type": "string",
            "title": "Active config ID",
            "description": "ID for a config to set as the project's active deployment. Starts with 'config_'. At most one of 'active_experiment_id' and 'active_config_id' can be set."
          },
          "positive_labels": {
            "items": {
              "$ref": "#/components/schemas/PositiveLabel"
            },
            "type": "array",
            "title": "List of feedback labels to consider as positive actions",
            "description": "The full list of labels to treat as positive user feedback."
          },
          "directory_id": {
            "type": "string",
            "title": "Directory ID",
            "description": "ID of directory to assign project to. Starts with `dir_`."
          }
        },
        "type": "object",
        "title": "UpdateProjectRequest"
      },
      "Usage": {
        "properties": {
          "prompt_tokens": {
            "type": "integer",
            "title": "Prompt tokens",
            "description": "Number of tokens used in the prompt."
          },
          "generation_tokens": {
            "type": "integer",
            "title": "Generation tokens",
            "description": "Number of tokens produced by the generation."
          },
          "total_tokens": {
            "type": "integer",
            "title": "Total tokens",
            "description": "Total number of tokens used by the prompt and generation combined."
          }
        },
        "type": "object",
        "required": ["prompt_tokens", "generation_tokens", "total_tokens"],
        "title": "Usage"
      },
      "UserResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "User ID",
            "description": "String ID of user. Starts with `usr_`."
          },
          "email_address": {
            "type": "string",
            "title": "Email address",
            "description": "The user's email address."
          },
          "full_name": {
            "type": "string",
            "title": "Full name",
            "description": "The user's full name."
          },
          "verified": {
            "type": "boolean",
            "title": "Verified",
            "description": "Whether the user has verified their email address."
          }
        },
        "type": "object",
        "required": ["id", "email_address", "verified"],
        "title": "UserResponse"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      },
      "VersionStatus": {
        "type": "string",
        "enum": ["uncommitted", "committed", "deleted"],
        "title": "VersionStatus",
        "description": "An enumeration."
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-KEY",
        "description": "The Humanloop API uses API keys for authentication. Visit your\n[API Keys](https://app.humanloop.com/account/api-keys) page to retrieve the\nAPI key you'll use in your requests.\n\nThis key allows full access and control over your projects, so keep this secret\nand take care to not expose it in any client-side code.\n\nTo use your API key, include it under the `X-API-KEY` header in your HTTP request.\n\n```bash\ncurl https://api.humanloop.com/v4/projects -H 'X-API-KEY: YOUR_API_KEY'\n```\n\nIf you're using the Python SDK, initialize the client with your API key before\nusing other SDK methods:\n\n```python\nfrom humanloop import Humanloop\nhumanloop = Humanloop(api_key=\"YOUR_API_KEY\")\n```\n\nIf you're using the TypeScript SDK, initialize the client with your API key before\nusing other SDK methods:\n\n```js\nimport { Humanloop } from \"humanloop\";\nconst humanloop = new Humanloop({apiKey: \"YOUR_API_KEY\"});\n```"
      }
    }
  },
  "x-readme": {
    "samples-languages": ["python", "javascript", "curl"]
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "The Humanloop API uses API keys for authentication. Visit your\n[API Keys](https://app.humanloop.com/account/api-keys) page to retrieve the\nAPI key you'll use in your requests.\n\nThis key allows full access and control over your projects, so keep this secret\nand take care to not expose it in any client-side code.\n\nTo use your API key, include it under the `X-API-KEY` header in your HTTP request.\n\n```bash\ncurl https://api.humanloop.com/v4/projects -H 'X-API-KEY: YOUR_API_KEY'\n```\n\nIf you're using the Python SDK, initialize the client with your API key before\nusing other SDK methods:\n\n```python\nfrom humanloop import Humanloop\nhumanloop = Humanloop(api_key=\"YOUR_API_KEY\")\n```\n\nIf you're using the TypeScript SDK, initialize the client with your API key before\nusing other SDK methods:\n\n```js\nimport { Humanloop } from \"humanloop\";\nconst humanloop = new Humanloop({apiKey: \"YOUR_API_KEY\"});\n```"
    }
  ]
}
